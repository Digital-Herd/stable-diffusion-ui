(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Sitecore = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":1,"buffer":3,"ieee754":7}],4:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],6:[function(require,module,exports){
var http = require('http')
var url = require('url')

var https = module.exports

for (var key in http) {
  if (http.hasOwnProperty(key)) https[key] = http[key]
}

https.request = function (params, cb) {
  params = validateParams(params)
  return http.request.call(this, params, cb)
}

https.get = function (params, cb) {
  params = validateParams(params)
  return http.get.call(this, params, cb)
}

function validateParams (params) {
  if (typeof params === 'string') {
    params = url.parse(params)
  }
  if (!params.protocol) {
    params.protocol = 'https:'
  }
  if (params.protocol !== 'https:') {
    throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
  }
  return params
}

},{"http":15,"url":35}],7:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],8:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],9:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],10:[function(require,module,exports){
(function (global){(function (){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],11:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],12:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],13:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":11,"./encode":12}],14:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":3}],15:[function(require,module,exports){
(function (global){(function (){
var ClientRequest = require('./lib/request')
var response = require('./lib/response')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.ClientRequest = ClientRequest
http.IncomingMessage = response.IncomingMessage

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.globalAgent = new http.Agent()

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":17,"./lib/response":18,"builtin-status-codes":4,"url":35,"xtend":38}],16:[function(require,module,exports){
(function (global){(function (){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.writableStream = isFunction(global.WritableStream)

exports.abortController = isFunction(global.AbortController)

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],17:[function(require,module,exports){
(function (process,global,Buffer){(function (){
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
		// If the use of XHR should be preferred. Not typically needed.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)
	self._fetchTimer = null
	self._socketTimeout = null
	self._socketTimer = null

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var header = this._headers[name.toLowerCase()]
	if (header)
		return header.value
	return null
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	if ('timeout' in opts && opts.timeout !== 0) {
		self.setTimeout(opts.timeout)
	}

	var headersObj = self._headers
	var body = null
	if (opts.method !== 'GET' && opts.method !== 'HEAD') {
        body = new Blob(self._body, {
            type: (headersObj['content-type'] || {}).value || ''
        });
    }

	// create flattened list of headers
	var headersList = []
	Object.keys(headersObj).forEach(function (keyName) {
		var name = headersObj[keyName].name
		var value = headersObj[keyName].value
		if (Array.isArray(value)) {
			value.forEach(function (v) {
				headersList.push([name, v])
			})
		} else {
			headersList.push([name, value])
		}
	})

	if (self._mode === 'fetch') {
		var signal = null
		if (capability.abortController) {
			var controller = new AbortController()
			signal = controller.signal
			self._fetchAbortController = controller

			if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
				self._fetchTimer = global.setTimeout(function () {
					self.emit('requestTimeout')
					if (self._fetchAbortController)
						self._fetchAbortController.abort()
				}, opts.requestTimeout)
			}
		}

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headersList,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin',
			signal: signal
		}).then(function (response) {
			self._fetchResponse = response
			self._resetTimers(false)
			self._connect()
		}, function (reason) {
			self._resetTimers(true)
			if (!self._destroyed)
				self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('requestTimeout' in opts) {
			xhr.timeout = opts.requestTimeout
			xhr.ontimeout = function () {
				self.emit('requestTimeout')
			}
		}

		headersList.forEach(function (header) {
			xhr.setRequestHeader(header[0], header[1])
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self._resetTimers(true)
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	self._resetTimers(false)

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress(self._resetTimers.bind(self))
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self))
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype._resetTimers = function (done) {
	var self = this

	global.clearTimeout(self._socketTimer)
	self._socketTimer = null

	if (done) {
		global.clearTimeout(self._fetchTimer)
		self._fetchTimer = null
	} else if (self._socketTimeout) {
		self._socketTimer = global.setTimeout(function () {
			self.emit('timeout')
		}, self._socketTimeout)
	}
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {
	var self = this
	self._destroyed = true
	self._resetTimers(true)
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	else if (self._fetchAbortController)
		self._fetchAbortController.abort()

	if (err)
		self.emit('error', err)
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.setTimeout = function (timeout, cb) {
	var self = this

	if (cb)
		self.once('timeout', cb)

	self._socketTimeout = timeout
	self._resetTimers(false)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'via'
]

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":16,"./response":18,"_process":9,"buffer":3,"inherits":8,"readable-stream":33}],18:[function(require,module,exports){
(function (process,global,Buffer){(function (){
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, resetTimers) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function (header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})

		if (capability.writableStream) {
			var writable = new WritableStream({
				write: function (chunk) {
					resetTimers(false)
					return new Promise(function (resolve, reject) {
						if (self._destroyed) {
							reject()
						} else if(self.push(Buffer.from(chunk))) {
							resolve()
						} else {
							self._resumeFetch = resolve
						}
					})
				},
				close: function () {
					resetTimers(true)
					if (!self._destroyed)
						self.push(null)
				},
				abort: function (err) {
					resetTimers(true)
					if (!self._destroyed)
						self.emit('error', err)
				}
			})

			try {
				response.body.pipeTo(writable).catch(function (err) {
					resetTimers(true)
					if (!self._destroyed)
						self.emit('error', err)
				})
				return
			} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
		}
		// fallback for when writableStream or pipeTo aren't available
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				resetTimers(result.done)
				if (result.done) {
					self.push(null)
					return
				}
				self.push(Buffer.from(result.value))
				read()
			}).catch(function (err) {
				resetTimers(true)
				if (!self._destroyed)
					self.emit('error', err)
			})
		}
		read()
	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {
	var self = this

	var resolve = self._resumeFetch
	if (resolve) {
		self._resumeFetch = null
		resolve()
	}
}

IncomingMessage.prototype._onXHRProgress = function (resetTimers) {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text':
			response = xhr.responseText
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = Buffer.alloc(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(Buffer.from(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				resetTimers(true)
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		resetTimers(true)
		self.push(null)
	}
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":16,"_process":9,"buffer":3,"inherits":8,"readable-stream":33}],19:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],20:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = require('./_stream_readable');

var Writable = require('./_stream_writable');

require('inherits')(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":22,"./_stream_writable":24,"_process":9,"inherits":8}],21:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

require('inherits')(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":23,"inherits":8}],22:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = require('util');

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = require('./internal/streams/buffer_list');

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

require('inherits')(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":19,"./_stream_duplex":20,"./internal/streams/async_iterator":25,"./internal/streams/buffer_list":26,"./internal/streams/destroy":27,"./internal/streams/from":29,"./internal/streams/state":31,"./internal/streams/stream":32,"_process":9,"buffer":3,"events":5,"inherits":8,"string_decoder/":34,"util":2}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';

module.exports = Transform;

var _require$codes = require('../errors').codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = require('./_stream_duplex');

require('inherits')(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":19,"./_stream_duplex":20,"inherits":8}],24:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/


var Buffer = require('buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = require('./internal/streams/destroy');

var _require = require('./internal/streams/state'),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = require('../errors').codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

require('inherits')(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":19,"./_stream_duplex":20,"./internal/streams/destroy":27,"./internal/streams/state":31,"./internal/streams/stream":32,"_process":9,"buffer":3,"inherits":8,"util-deprecate":37}],25:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = require('./end-of-stream');

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":28,"_process":9}],26:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('buffer'),
    Buffer = _require.Buffer;

var _require2 = require('util'),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();
},{"buffer":3,"util":2}],27:[function(require,module,exports){
(function (process){(function (){
'use strict'; // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":9}],28:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;
},{"../../../errors":19}],29:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],30:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = require('../../../errors').codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;
},{"../../../errors":19,"./end-of-stream":28}],31:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":19}],32:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":5}],33:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":20,"./lib/_stream_passthrough.js":21,"./lib/_stream_readable.js":22,"./lib/_stream_transform.js":23,"./lib/_stream_writable.js":24,"./lib/internal/streams/end-of-stream.js":28,"./lib/internal/streams/pipeline.js":30}],34:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":14}],35:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":36,"punycode":10,"querystring":13}],36:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],37:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],38:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],39:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadToDam = void 0;
const sc_contenthub_webclient_sdk_1 = require("@sitecore/sc-contenthub-webclient-sdk");
const oauth_password_grant_1 = __importDefault(require("@sitecore/sc-contenthub-webclient-sdk/dist/authentication/oauth-password-grant"));
const content_hub_client_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/clients/content-hub-client");
const culture_load_option_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/culture-load-option");
const entity_load_configuration_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/entity-load-configuration");
const property_load_option_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/property-load-option");
const relation_load_option_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/relation-load-option");
const relation_specification_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/relation-specification");
const link_1 = __importDefault(require("@sitecore/sc-contenthub-webclient-sdk/dist/link"));
const array_buffer_upload_source_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/models/upload/array-buffer-upload-source");
const upload_request_1 = require("@sitecore/sc-contenthub-webclient-sdk/dist/models/upload/upload-request");
function UploadToDam(config, entityId, imgSrc) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const oauth = new oauth_password_grant_1.default(config.clientId, config.clientSecret, config.userName, config.password);
        const client = new content_hub_client_1.ContentHubClient(config.endpoint, oauth);
        const authenticated = yield client.internalClient.authenticateAsync();
        if (!authenticated) {
            throw new Error(`Unable to authenticate to CH endpoint '${config.endpoint}'`);
        }
        const resp = yield fetch(imgSrc);
        const buffer = yield resp.arrayBuffer();
        const uploadSource = new array_buffer_upload_source_1.ArrayBufferUploadSource(buffer, 'background.jpg');
        const request = new upload_request_1.UploadRequest(uploadSource, 'UserProfileBackgroundUploadConfiguration', 'NewAsset');
        const result = yield client.uploads.uploadAsync(request);
        if (!result.isSuccessStatusCode) {
            throw new Error(`Unable to upload file to DAM ${result.statusCode}: ${result.statusText}`);
        }
        const location = result.responseHeaders["location"];
        console.log(`Created CH Asset with location ${location}`);
        const lh = new sc_contenthub_webclient_sdk_1.LinkHelper(client);
        const assetId = yield lh.idFromEntityAsync(new link_1.default(location));
        if (assetId == null) {
            throw new Error(`Unable to retrieve Asset Id from ${location}`);
        }
        const asset = yield client.entities.getAsync(assetId, new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, property_load_option_1.PropertyLoadOption.None, new relation_load_option_1.RelationLoadOption([new relation_specification_1.RelationSpecification("InstanceToBackground")])));
        if (asset == null) {
            throw new Error(`Unable to retrieve Asset with Id ${assetId} from CH`);
        }
        (_a = asset === null || asset === void 0 ? void 0 : asset.getRelation("InstanceToBackground")) === null || _a === void 0 ? void 0 : _a.setIds([entityId]);
        yield client.entities.saveAsync(asset);
        console.log(`Linked Asset with Id ${assetId} to ${entityId} via relation InstanceToBackground`);
        return true;
    });
}
exports.UploadToDam = UploadToDam;

},{"@sitecore/sc-contenthub-webclient-sdk":226,"@sitecore/sc-contenthub-webclient-sdk/dist/authentication/oauth-password-grant":47,"@sitecore/sc-contenthub-webclient-sdk/dist/clients/content-hub-client":57,"@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/culture-load-option":140,"@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/entity-load-configuration":147,"@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/property-load-option":177,"@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/relation-load-option":185,"@sitecore/sc-contenthub-webclient-sdk/dist/contracts/querying/relation-specification":186,"@sitecore/sc-contenthub-webclient-sdk/dist/link":228,"@sitecore/sc-contenthub-webclient-sdk/dist/models/upload/array-buffer-upload-source":314,"@sitecore/sc-contenthub-webclient-sdk/dist/models/upload/upload-request":319}],40:[function(require,module,exports){
"use strict";
/// <reference lib="es2018"/>
/// <reference lib="dom"/>
/// <reference types="node"/>
Object.defineProperty(exports, "__esModule", { value: true });
const typedArrayTypeNames = [
    'Int8Array',
    'Uint8Array',
    'Uint8ClampedArray',
    'Int16Array',
    'Uint16Array',
    'Int32Array',
    'Uint32Array',
    'Float32Array',
    'Float64Array',
    'BigInt64Array',
    'BigUint64Array'
];
function isTypedArrayName(name) {
    return typedArrayTypeNames.includes(name);
}
const objectTypeNames = [
    'Function',
    'Generator',
    'AsyncGenerator',
    'GeneratorFunction',
    'AsyncGeneratorFunction',
    'AsyncFunction',
    'Observable',
    'Array',
    'Buffer',
    'Blob',
    'Object',
    'RegExp',
    'Date',
    'Error',
    'Map',
    'Set',
    'WeakMap',
    'WeakSet',
    'ArrayBuffer',
    'SharedArrayBuffer',
    'DataView',
    'Promise',
    'URL',
    'FormData',
    'URLSearchParams',
    'HTMLElement',
    ...typedArrayTypeNames
];
function isObjectTypeName(name) {
    return objectTypeNames.includes(name);
}
const primitiveTypeNames = [
    'null',
    'undefined',
    'string',
    'number',
    'bigint',
    'boolean',
    'symbol'
];
function isPrimitiveTypeName(name) {
    return primitiveTypeNames.includes(name);
}
// eslint-disable-next-line @typescript-eslint/ban-types
function isOfType(type) {
    return (value) => typeof value === type;
}
const { toString } = Object.prototype;
const getObjectType = (value) => {
    const objectTypeName = toString.call(value).slice(8, -1);
    if (/HTML\w+Element/.test(objectTypeName) && is.domElement(value)) {
        return 'HTMLElement';
    }
    if (isObjectTypeName(objectTypeName)) {
        return objectTypeName;
    }
    return undefined;
};
const isObjectOfType = (type) => (value) => getObjectType(value) === type;
function is(value) {
    if (value === null) {
        return 'null';
    }
    switch (typeof value) {
        case 'undefined':
            return 'undefined';
        case 'string':
            return 'string';
        case 'number':
            return 'number';
        case 'boolean':
            return 'boolean';
        case 'function':
            return 'Function';
        case 'bigint':
            return 'bigint';
        case 'symbol':
            return 'symbol';
        default:
    }
    if (is.observable(value)) {
        return 'Observable';
    }
    if (is.array(value)) {
        return 'Array';
    }
    if (is.buffer(value)) {
        return 'Buffer';
    }
    const tagType = getObjectType(value);
    if (tagType) {
        return tagType;
    }
    if (value instanceof String || value instanceof Boolean || value instanceof Number) {
        throw new TypeError('Please don\'t use object wrappers for primitive types');
    }
    return 'Object';
}
is.undefined = isOfType('undefined');
is.string = isOfType('string');
const isNumberType = isOfType('number');
is.number = (value) => isNumberType(value) && !is.nan(value);
is.bigint = isOfType('bigint');
// eslint-disable-next-line @typescript-eslint/ban-types
is.function_ = isOfType('function');
is.null_ = (value) => value === null;
is.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');
is.boolean = (value) => value === true || value === false;
is.symbol = isOfType('symbol');
is.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));
is.array = (value, assertion) => {
    if (!Array.isArray(value)) {
        return false;
    }
    if (!is.function_(assertion)) {
        return true;
    }
    return value.every(assertion);
};
is.buffer = (value) => { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = value) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.isBuffer) === null || _c === void 0 ? void 0 : _c.call(_b, value)) !== null && _d !== void 0 ? _d : false; };
is.blob = (value) => isObjectOfType('Blob')(value);
is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);
is.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value));
is.iterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]); };
is.asyncIterable = (value) => { var _a; return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.asyncIterator]); };
is.generator = (value) => { var _a, _b; return is.iterable(value) && is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.next) && is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.throw); };
is.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);
is.nativePromise = (value) => isObjectOfType('Promise')(value);
const hasPromiseAPI = (value) => {
    var _a, _b;
    return is.function_((_a = value) === null || _a === void 0 ? void 0 : _a.then) &&
        is.function_((_b = value) === null || _b === void 0 ? void 0 : _b.catch);
};
is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);
is.generatorFunction = isObjectOfType('GeneratorFunction');
is.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';
is.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';
// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types
is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');
is.regExp = isObjectOfType('RegExp');
is.date = isObjectOfType('Date');
is.error = isObjectOfType('Error');
is.map = (value) => isObjectOfType('Map')(value);
is.set = (value) => isObjectOfType('Set')(value);
is.weakMap = (value) => isObjectOfType('WeakMap')(value);
is.weakSet = (value) => isObjectOfType('WeakSet')(value);
is.int8Array = isObjectOfType('Int8Array');
is.uint8Array = isObjectOfType('Uint8Array');
is.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');
is.int16Array = isObjectOfType('Int16Array');
is.uint16Array = isObjectOfType('Uint16Array');
is.int32Array = isObjectOfType('Int32Array');
is.uint32Array = isObjectOfType('Uint32Array');
is.float32Array = isObjectOfType('Float32Array');
is.float64Array = isObjectOfType('Float64Array');
is.bigInt64Array = isObjectOfType('BigInt64Array');
is.bigUint64Array = isObjectOfType('BigUint64Array');
is.arrayBuffer = isObjectOfType('ArrayBuffer');
is.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');
is.dataView = isObjectOfType('DataView');
is.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);
is.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;
is.urlInstance = (value) => isObjectOfType('URL')(value);
is.urlString = (value) => {
    if (!is.string(value)) {
        return false;
    }
    try {
        new URL(value); // eslint-disable-line no-new
        return true;
    }
    catch (_a) {
        return false;
    }
};
// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`
is.truthy = (value) => Boolean(value);
// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`
is.falsy = (value) => !value;
is.nan = (value) => Number.isNaN(value);
is.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);
is.integer = (value) => Number.isInteger(value);
is.safeInteger = (value) => Number.isSafeInteger(value);
is.plainObject = (value) => {
    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js
    if (toString.call(value) !== '[object Object]') {
        return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return prototype === null || prototype === Object.getPrototypeOf({});
};
is.typedArray = (value) => isTypedArrayName(getObjectType(value));
const isValidLength = (value) => is.safeInteger(value) && value >= 0;
is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);
is.inRange = (value, range) => {
    if (is.number(range)) {
        return value >= Math.min(0, range) && value <= Math.max(range, 0);
    }
    if (is.array(range) && range.length === 2) {
        return value >= Math.min(...range) && value <= Math.max(...range);
    }
    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);
};
const NODE_TYPE_ELEMENT = 1;
const DOM_PROPERTIES_TO_CHECK = [
    'innerHTML',
    'ownerDocument',
    'style',
    'attributes',
    'nodeValue'
];
is.domElement = (value) => {
    return is.object(value) &&
        value.nodeType === NODE_TYPE_ELEMENT &&
        is.string(value.nodeName) &&
        !is.plainObject(value) &&
        DOM_PROPERTIES_TO_CHECK.every(property => property in value);
};
is.observable = (value) => {
    var _a, _b, _c, _d;
    if (!value) {
        return false;
    }
    // eslint-disable-next-line no-use-extend-native/no-use-extend-native
    if (value === ((_b = (_a = value)[Symbol.observable]) === null || _b === void 0 ? void 0 : _b.call(_a))) {
        return true;
    }
    if (value === ((_d = (_c = value)['@@observable']) === null || _d === void 0 ? void 0 : _d.call(_c))) {
        return true;
    }
    return false;
};
is.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);
is.infinite = (value) => value === Infinity || value === -Infinity;
const isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;
is.evenInteger = isAbsoluteMod2(0);
is.oddInteger = isAbsoluteMod2(1);
is.emptyArray = (value) => is.array(value) && value.length === 0;
is.nonEmptyArray = (value) => is.array(value) && value.length > 0;
is.emptyString = (value) => is.string(value) && value.length === 0;
const isWhiteSpaceString = (value) => is.string(value) && !/\S/.test(value);
is.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);
// TODO: Use `not ''` when the `not` operator is available.
is.nonEmptyString = (value) => is.string(value) && value.length > 0;
// TODO: Use `not ''` when the `not` operator is available.
is.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);
is.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;
// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:
// - https://github.com/Microsoft/TypeScript/pull/29317
is.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;
is.emptySet = (value) => is.set(value) && value.size === 0;
is.nonEmptySet = (value) => is.set(value) && value.size > 0;
is.emptyMap = (value) => is.map(value) && value.size === 0;
is.nonEmptyMap = (value) => is.map(value) && value.size > 0;
// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)
is.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);
is.formData = (value) => isObjectOfType('FormData')(value);
is.urlSearchParams = (value) => isObjectOfType('URLSearchParams')(value);
const predicateOnArray = (method, predicate, values) => {
    if (!is.function_(predicate)) {
        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);
    }
    if (values.length === 0) {
        throw new TypeError('Invalid number of values');
    }
    return method.call(values, predicate);
};
is.any = (predicate, ...values) => {
    const predicates = is.array(predicate) ? predicate : [predicate];
    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));
};
is.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);
const assertType = (condition, description, value, options = {}) => {
    if (!condition) {
        const { multipleValues } = options;
        const valuesMessage = multipleValues ?
            `received values of types ${[
                ...new Set(value.map(singleValue => `\`${is(singleValue)}\``))
            ].join(', ')}` :
            `received value of type \`${is(value)}\``;
        throw new TypeError(`Expected value which is \`${description}\`, ${valuesMessage}.`);
    }
};
exports.assert = {
    // Unknowns.
    undefined: (value) => assertType(is.undefined(value), 'undefined', value),
    string: (value) => assertType(is.string(value), 'string', value),
    number: (value) => assertType(is.number(value), 'number', value),
    bigint: (value) => assertType(is.bigint(value), 'bigint', value),
    // eslint-disable-next-line @typescript-eslint/ban-types
    function_: (value) => assertType(is.function_(value), 'Function', value),
    null_: (value) => assertType(is.null_(value), 'null', value),
    class_: (value) => assertType(is.class_(value), "Class" /* class_ */, value),
    boolean: (value) => assertType(is.boolean(value), 'boolean', value),
    symbol: (value) => assertType(is.symbol(value), 'symbol', value),
    numericString: (value) => assertType(is.numericString(value), "string with a number" /* numericString */, value),
    array: (value, assertion) => {
        const assert = assertType;
        assert(is.array(value), 'Array', value);
        if (assertion) {
            value.forEach(assertion);
        }
    },
    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),
    blob: (value) => assertType(is.blob(value), 'Blob', value),
    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), "null or undefined" /* nullOrUndefined */, value),
    object: (value) => assertType(is.object(value), 'Object', value),
    iterable: (value) => assertType(is.iterable(value), "Iterable" /* iterable */, value),
    asyncIterable: (value) => assertType(is.asyncIterable(value), "AsyncIterable" /* asyncIterable */, value),
    generator: (value) => assertType(is.generator(value), 'Generator', value),
    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),
    nativePromise: (value) => assertType(is.nativePromise(value), "native Promise" /* nativePromise */, value),
    promise: (value) => assertType(is.promise(value), 'Promise', value),
    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),
    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),
    // eslint-disable-next-line @typescript-eslint/ban-types
    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),
    // eslint-disable-next-line @typescript-eslint/ban-types
    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),
    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),
    date: (value) => assertType(is.date(value), 'Date', value),
    error: (value) => assertType(is.error(value), 'Error', value),
    map: (value) => assertType(is.map(value), 'Map', value),
    set: (value) => assertType(is.set(value), 'Set', value),
    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),
    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),
    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),
    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),
    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),
    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),
    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),
    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),
    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),
    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),
    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),
    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),
    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),
    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),
    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),
    dataView: (value) => assertType(is.dataView(value), 'DataView', value),
    enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),
    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),
    urlString: (value) => assertType(is.urlString(value), "string with a URL" /* urlString */, value),
    truthy: (value) => assertType(is.truthy(value), "truthy" /* truthy */, value),
    falsy: (value) => assertType(is.falsy(value), "falsy" /* falsy */, value),
    nan: (value) => assertType(is.nan(value), "NaN" /* nan */, value),
    primitive: (value) => assertType(is.primitive(value), "primitive" /* primitive */, value),
    integer: (value) => assertType(is.integer(value), "integer" /* integer */, value),
    safeInteger: (value) => assertType(is.safeInteger(value), "integer" /* safeInteger */, value),
    plainObject: (value) => assertType(is.plainObject(value), "plain object" /* plainObject */, value),
    typedArray: (value) => assertType(is.typedArray(value), "TypedArray" /* typedArray */, value),
    arrayLike: (value) => assertType(is.arrayLike(value), "array-like" /* arrayLike */, value),
    domElement: (value) => assertType(is.domElement(value), "HTMLElement" /* domElement */, value),
    observable: (value) => assertType(is.observable(value), 'Observable', value),
    nodeStream: (value) => assertType(is.nodeStream(value), "Node.js Stream" /* nodeStream */, value),
    infinite: (value) => assertType(is.infinite(value), "infinite number" /* infinite */, value),
    emptyArray: (value) => assertType(is.emptyArray(value), "empty array" /* emptyArray */, value),
    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), "non-empty array" /* nonEmptyArray */, value),
    emptyString: (value) => assertType(is.emptyString(value), "empty string" /* emptyString */, value),
    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), "empty string or whitespace" /* emptyStringOrWhitespace */, value),
    nonEmptyString: (value) => assertType(is.nonEmptyString(value), "non-empty string" /* nonEmptyString */, value),
    nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), "non-empty string and not whitespace" /* nonEmptyStringAndNotWhitespace */, value),
    emptyObject: (value) => assertType(is.emptyObject(value), "empty object" /* emptyObject */, value),
    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), "non-empty object" /* nonEmptyObject */, value),
    emptySet: (value) => assertType(is.emptySet(value), "empty set" /* emptySet */, value),
    nonEmptySet: (value) => assertType(is.nonEmptySet(value), "non-empty set" /* nonEmptySet */, value),
    emptyMap: (value) => assertType(is.emptyMap(value), "empty map" /* emptyMap */, value),
    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), "non-empty map" /* nonEmptyMap */, value),
    propertyKey: (value) => assertType(is.propertyKey(value), 'PropertyKey', value),
    formData: (value) => assertType(is.formData(value), 'FormData', value),
    urlSearchParams: (value) => assertType(is.urlSearchParams(value), 'URLSearchParams', value),
    // Numbers.
    evenInteger: (value) => assertType(is.evenInteger(value), "even integer" /* evenInteger */, value),
    oddInteger: (value) => assertType(is.oddInteger(value), "odd integer" /* oddInteger */, value),
    // Two arguments.
    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), "T" /* directInstanceOf */, instance),
    inRange: (value, range) => assertType(is.inRange(value, range), "in range" /* inRange */, value),
    // Variadic functions.
    any: (predicate, ...values) => {
        return assertType(is.any(predicate, ...values), "predicate returns truthy for any value" /* any */, values, { multipleValues: true });
    },
    all: (predicate, ...values) => assertType(is.all(predicate, ...values), "predicate returns truthy for all values" /* all */, values, { multipleValues: true })
};
// Some few keywords are reserved, but we'll populate them for Node.js users
// See https://github.com/Microsoft/TypeScript/issues/2536
Object.defineProperties(is, {
    class: {
        value: is.class_
    },
    function: {
        value: is.function_
    },
    null: {
        value: is.null_
    }
});
Object.defineProperties(exports.assert, {
    class: {
        value: exports.assert.class_
    },
    function: {
        value: exports.assert.function_
    },
    null: {
        value: exports.assert.null_
    }
});
exports.default = is;
// For CommonJS default export support
module.exports = is;
module.exports.default = is;
module.exports.assert = exports.assert;

},{}],41:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiInfoResource = void 0;
const ta_json_1 = require("ta-json");
const api_resource_converter_1 = require("../converters/api-resource-converter");
const file_version_converter_1 = require("../converters/file-version-converter");
const fileversion_1 = require("../fileversion");
const api_resource_1 = require("./api-resource");
let ApiInfoResource = class ApiInfoResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("file_version"),
    (0, ta_json_1.JsonConverter)(file_version_converter_1.FileVersionConverter),
    __metadata("design:type", fileversion_1.FileVersion)
], ApiInfoResource.prototype, "fileVersion", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("product_version"),
    __metadata("design:type", String)
], ApiInfoResource.prototype, "productVersion", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("minimum_sdk_version"),
    (0, ta_json_1.JsonConverter)(file_version_converter_1.FileVersionConverter),
    __metadata("design:type", fileversion_1.FileVersion)
], ApiInfoResource.prototype, "minimumSdkVersion", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("routes"),
    (0, ta_json_1.JsonConverter)(api_resource_converter_1.ApiResourceConverter),
    __metadata("design:type", api_resource_1.ApiResource)
], ApiInfoResource.prototype, "routes", void 0);
ApiInfoResource = __decorate([
    (0, ta_json_1.JsonObject)()
], ApiInfoResource);
exports.ApiInfoResource = ApiInfoResource;

},{"../converters/api-resource-converter":192,"../converters/file-version-converter":194,"../fileversion":223,"./api-resource":43,"ta-json":424}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiInfo = void 0;
/**
 * {@inheritDoc}
 */
class ApiInfo {
    constructor(fileVersion, minimumSdkVersion, routes) {
        this.fileVersion = fileVersion;
        this.minimumSdkVersion = minimumSdkVersion;
        this.routes = routes;
    }
}
exports.ApiInfo = ApiInfo;

},{}],43:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResource = void 0;
const ta_json_1 = require("ta-json");
let ApiResource = class ApiResource {
};
ApiResource = __decorate([
    (0, ta_json_1.JsonObject)()
], ApiResource);
exports.ApiResource = ApiResource;

},{"ta-json":424}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiRoutesDictionary = void 0;
/**
 * A dictionary containing the API routes.
 * Contents: route name -\> route link.
 */
class ApiRoutesDictionary {
}
exports.ApiRoutesDictionary = ApiRoutesDictionary;

},{}],45:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuthGrantBase = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
let OAuthGrantBase = class OAuthGrantBase {
    constructor(clientId, clientSecret) {
        guard_1.default.notNullOrUndefined(clientId);
        guard_1.default.notNullOrUndefined(clientSecret);
        this.clientId = clientId;
        this.clientSecret = clientSecret;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("grant_type"),
    __metadata("design:type", String)
], OAuthGrantBase.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("client_id"),
    __metadata("design:type", String)
], OAuthGrantBase.prototype, "clientId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("client_secret"),
    __metadata("design:type", String)
], OAuthGrantBase.prototype, "clientSecret", void 0);
OAuthGrantBase = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String])
], OAuthGrantBase);
exports.OAuthGrantBase = OAuthGrantBase;

},{"../guard":224,"ta-json":424}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuthGrantType = void 0;
var OAuthGrantType;
(function (OAuthGrantType) {
    OAuthGrantType["Password"] = "password";
    OAuthGrantType["RefreshToken"] = "refresh_token";
})(OAuthGrantType = exports.OAuthGrantType || (exports.OAuthGrantType = {}));

},{}],47:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const oauth_grant_base_1 = require("./oauth-grant-base");
const oauth_grant_type_1 = require("./oauth-grant-type");
let OAuthPasswordGrant = class OAuthPasswordGrant extends oauth_grant_base_1.OAuthGrantBase {
    constructor(clientId, clientSecret, username, password) {
        super(clientId, clientSecret);
        this.type = oauth_grant_type_1.OAuthGrantType.Password;
        guard_1.default.notNullOrUndefined(username);
        guard_1.default.notNullOrUndefined(password);
        this.username = username;
        this.password = password;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("grant_type"),
    __metadata("design:type", String)
], OAuthPasswordGrant.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("username"),
    __metadata("design:type", String)
], OAuthPasswordGrant.prototype, "username", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("password"),
    __metadata("design:type", String)
], OAuthPasswordGrant.prototype, "password", void 0);
OAuthPasswordGrant = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String, String, String])
], OAuthPasswordGrant);
exports.default = OAuthPasswordGrant;

},{"../guard":224,"./oauth-grant-base":45,"./oauth-grant-type":46,"ta-json":424}],48:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const oauth_grant_base_1 = require("./oauth-grant-base");
const oauth_grant_type_1 = require("./oauth-grant-type");
let OAuthRefreshTokenGrant = class OAuthRefreshTokenGrant extends oauth_grant_base_1.OAuthGrantBase {
    constructor(clientId, clientSecret, refreshToken) {
        super(clientId, clientSecret);
        this.type = oauth_grant_type_1.OAuthGrantType.RefreshToken;
        guard_1.default.notNullOrUndefined(refreshToken);
        this.refreshToken = refreshToken;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("grant_type"),
    __metadata("design:type", String)
], OAuthRefreshTokenGrant.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("refresh_token"),
    __metadata("design:type", String)
], OAuthRefreshTokenGrant.prototype, "refreshToken", void 0);
OAuthRefreshTokenGrant = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String, String])
], OAuthRefreshTokenGrant);
exports.default = OAuthRefreshTokenGrant;

},{"../guard":224,"./oauth-grant-base":45,"./oauth-grant-type":46,"ta-json":424}],49:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenInfo = void 0;
const ta_json_1 = require("ta-json");
let TokenInfo = class TokenInfo {
};
__decorate([
    (0, ta_json_1.JsonProperty)("access_token"),
    __metadata("design:type", String)
], TokenInfo.prototype, "accessToken", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("token_type"),
    __metadata("design:type", String)
], TokenInfo.prototype, "tokenType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("refresh_token"),
    __metadata("design:type", String)
], TokenInfo.prototype, "refreshToken", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("redirect_url"),
    __metadata("design:type", String)
], TokenInfo.prototype, "redirectUrl", void 0);
TokenInfo = __decorate([
    (0, ta_json_1.JsonObject)()
], TokenInfo);
exports.TokenInfo = TokenInfo;

},{"ta-json":424}],50:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaseInsensitiveStringMap = void 0;
class CaseInsensitiveStringMap {
    constructor(map) {
        if (map && typeof map === "object") {
            Object.assign(this, Object.keys(map).reduce((obj, key) => {
                obj[key.toLowerCase()] = map[key];
                return obj;
            }, {}));
        }
        return new Proxy(this, {
            set: (obj, prop, value) => {
                if (typeof prop === "string") {
                    return Reflect.set(obj, prop.toLowerCase(), value);
                }
                else {
                    return Reflect.set(obj, prop, value);
                }
            },
            get: (obj, prop) => {
                if (typeof prop === "string") {
                    return Reflect.get(obj, prop.toLowerCase());
                }
                else {
                    return Reflect.get(obj, prop);
                }
            },
        });
    }
}
exports.CaseInsensitiveStringMap = CaseInsensitiveStringMap;

},{}],51:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureCache = void 0;
const guard_1 = __importDefault(require("../guard"));
class CultureCache {
    constructor() {
        this._map = new Map();
        this._cacheKey = "cultures";
    }
    loadCache(cultures) {
        guard_1.default.notNullOrUndefined(cultures);
        this._map.set(this._cacheKey, cultures);
    }
    getCachedCultures() {
        return this._map.get(this._cacheKey) || null;
    }
}
exports.CultureCache = CultureCache;

},{"../guard":224}],52:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionCache = void 0;
const guard_1 = __importDefault(require("../guard"));
/**
 * Caches definition in memory.
 */
class EntityDefinitionCache {
    constructor() {
        this._allCacheKey = "__ALL__";
        this._promiseKeyPrefix = "PROMISE__";
        this._map = new Map();
        this._map = new Map();
    }
    /**
     * Load the specified definition into the cache.
     * @param definition - The entity definition
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definition
     */
    load(definition, includeConditionalMembers, loadPermissions) {
        guard_1.default.notNullOrUndefined(definition, "definition");
        guard_1.default.notNullOrUndefined(definition.id, "definition id");
        this._map.set(this.getCacheKey(definition.name, includeConditionalMembers, loadPermissions), definition);
        this._map.set(this.getCacheKey(definition.id.toString(), includeConditionalMembers, loadPermissions), definition);
    }
    /**
     * Load the specified definition into the cache asynchronously.
     * @param key - The definition name or definition id
     * @param promise - A promise resolving to the definition
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definition
     */
    loadAsync(key, promise, includeConditionalMembers, loadPermissions) {
        this.validateKey(key);
        guard_1.default.notNullOrUndefined(promise);
        this._map.set(`${this._promiseKeyPrefix}${this.getCacheKey(key.toString(), includeConditionalMembers, loadPermissions)}`, promise);
        const loadPromise = promise.then(definition => {
            if (definition) {
                this.load(definition);
            }
        });
        return loadPromise;
    }
    /**
     * Retrieve the definition with specified name or id from the cache.
     * @param key - The definition name or definition id
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definition
     * @returns The cached definition or null
     */
    get(key, includeConditionalMembers, loadPermissions) {
        this.validateKey(key);
        const res = this._map.get(this.getCacheKey(key.toString(), includeConditionalMembers, loadPermissions)) || null;
        return res;
    }
    /**
     * Retrieve the definition with specified name or id from the cache asynchronously.
     * @param key - The definition name or definition id
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definition
     * @returns A promise resolving to the cached definition or null
     */
    getAsync(key, includeConditionalMembers, loadPermissions) {
        this.validateKey(key);
        const promise = (this._map.get(`${this._promiseKeyPrefix}${this.getCacheKey(key.toString(), includeConditionalMembers, loadPermissions)}`) || null);
        if (promise != null) {
            return promise;
        }
        const definition = (this.get(this.getCacheKey(key.toString(), includeConditionalMembers, loadPermissions)) ||
            null);
        if (definition != null) {
            return Promise.resolve(definition);
        }
        return null;
    }
    /**
     * Loads all definitions into the cache.
     * @param definitions - An array of entity definitions
     * @param loadAllIndividually - Flag indicating whether to load the definitions individually or not
     * @param loadAsGroup - Key to be used to store the array of definitions, or false to not load the array
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definitions
     */
    loadAll(definitions, loadAllIndividually = true, loadAsGroup = this._allCacheKey, includeConditionalMembers, loadPermissions) {
        guard_1.default.notNullOrUndefined(definitions);
        if (definitions.length === 0) {
            return;
        }
        if (loadAsGroup) {
            guard_1.default.stringNotNullOrEmpty(loadAsGroup);
            this._map.set(this.getCacheKey(loadAsGroup, includeConditionalMembers, loadPermissions), definitions);
        }
        if (loadAllIndividually) {
            definitions.forEach(definition => this.load(definition, includeConditionalMembers, loadPermissions), this);
        }
    }
    /**
     * Retrieves an array of definitions that was cached with the specified group key.
     *
     * @remarks
     * Can not be used to retrieve a single cached definition. Use {@link EntityDefinitionCache.get} instead.
     *
     * @param group - The key with which the group of definitions was stored
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definitions
     */
    getAll(group = this._allCacheKey, includeConditionalMembers, loadPermissions) {
        const res = this._map.get(this.getCacheKey(group, includeConditionalMembers, loadPermissions)) || null;
        return res instanceof Array ? res : null;
    }
    /**
     * Invalidates/removes the definition with specified name or id from the cache.
     * @param key - The definition name or definition id
     * @param includeConditionalMembers - Include conditional members
     * @param loadPermissions - Load permissions for the definition
     */
    invalidate(key, includeConditionalMembers, loadPermissions) {
        if (!key) {
            this._map.clear();
            return;
        }
        this.validateKey(key);
        const definition = this.get(key);
        if (!definition)
            return;
        this._map.delete(this.getCacheKey(definition.name, includeConditionalMembers, loadPermissions));
        this._map.delete(this.getCacheKey(definition.id.toString(), includeConditionalMembers, loadPermissions));
    }
    validateKey(key) {
        if (typeof key === "string") {
            guard_1.default.stringNotNullOrEmpty(key);
        }
        else {
            guard_1.default.validId(key);
        }
    }
    getCacheKey(key, includeConditionalMembers, loadPermissions) {
        return [key.trim().toLowerCase(), includeConditionalMembers && "conditionals", loadPermissions && "permissions"]
            .filter(Boolean)
            .join("-");
    }
}
exports.EntityDefinitionCache = EntityDefinitionCache;

},{"../guard":224}],53:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateClient = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const aggregate_resource_1 = require("../models/aggregate-resources/aggregate-resource");
const response_handler_1 = require("./response-handler");
class AggregateClient {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
    }
    getAsync(name, id, culture, loadOptions = {}, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const link = yield this._client.linkHelper.aggregateToLinkAsync(name, id, culture, loadOptions);
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            return ta_json_1.TaJson.deserialize(response.content, aggregate_resource_1.AggregateResource);
        });
    }
}
exports.AggregateClient = AggregateClient;

},{"../guard":224,"../models/aggregate-resources/aggregate-resource":257,"./response-handler":71,"ta-json":424}],54:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const string_format_1 = __importDefault(require("string-format"));
const ta_json_1 = require("ta-json");
const api_info_resource_1 = require("../api/api-info-resource");
const api_1 = require("../constants/api");
const error_messages_1 = __importDefault(require("../error-messages"));
const not_supported_error_1 = require("../errors/not-supported-error");
const fileversion_1 = require("../fileversion");
const guard_1 = __importDefault(require("../guard"));
const api_resource_mapper_1 = require("../mappers/api-resource-mapper");
const compatibility_1 = require("../models/versionining/compatibility");
const response_handler_1 = require("./response-handler");
class ApiClient {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    get disableCompatibilityChecks() {
        return ApiClient._disableCompatibilityChecks;
    }
    set disableCompatibilityChecks(value) {
        ApiClient._disableCompatibilityChecks = value;
    }
    getApiInfoAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadAsync();
            return this._api;
        });
    }
    getApiRoutesAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadAsync();
            return this._api.routes;
        });
    }
    refreshAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            this._api = yield this.fetchApiInfoAsync();
        });
    }
    /**
     * Load the REST API information if absent.
     */
    loadAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._api) {
                yield this.refreshAsync();
            }
        });
    }
    /**
     * Fetches the API information and checks if the server is running a compatible Content Hub version.
     *
     * @returns The API information.
     */
    fetchApiInfoAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {};
            headers[api_1.HEADERS.apiVersion] = "2";
            const response = yield this._client.raw.getAsync(api_1.API_ROOT, headers);
            response_handler_1.ResponseHandler.handleErrors(response);
            let resource;
            try {
                resource = ta_json_1.TaJson.deserialize(response && response.content, api_info_resource_1.ApiInfoResource);
                if (resource === null ||
                    resource.fileVersion === null ||
                    resource.minimumSdkVersion === null ||
                    resource.routes === null) {
                    throw 0;
                }
            }
            catch (ex) {
                throw new not_supported_error_1.NotSupportedError(error_messages_1.default.ContentHubClient.IncompatibleVersionsPre3_0);
            }
            const sdkVersion = new fileversion_1.FileVersion(3, 0, 0); //TODO Load this from somewhere
            const serverVersion = resource.fileVersion;
            if (!this.disableCompatibilityChecks) {
                const compatibilityResult = this._client.versionChecker.getCompatibility(serverVersion, sdkVersion, resource.minimumSdkVersion);
                if (compatibilityResult == compatibility_1.Compatibility.SdkOld) {
                    throw new not_supported_error_1.NotSupportedError((0, string_format_1.default)(error_messages_1.default.ContentHubClient.IncompatibleMinimumVersion, sdkVersion, serverVersion, resource.minimumSdkVersion));
                }
                if (compatibilityResult == compatibility_1.Compatibility.SdkNew) {
                    throw new not_supported_error_1.NotSupportedError((0, string_format_1.default)(error_messages_1.default.ContentHubClient.IncompatibleVersion, sdkVersion, serverVersion));
                }
            }
            const apiInfo = api_resource_mapper_1.ApiResourceMapper.map(resource);
            return apiInfo;
        });
    }
}
exports.ApiClient = ApiClient;

},{"../api/api-info-resource":41,"../constants/api":79,"../error-messages":205,"../errors/not-supported-error":214,"../fileversion":223,"../guard":224,"../mappers/api-resource-mapper":232,"../models/versionining/compatibility":321,"./response-handler":71,"string-format":404,"ta-json":424}],55:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetsClient = void 0;
const definitions_1 = require("../constants/definitions");
const guard_1 = __importDefault(require("../guard"));
class AssetsClient {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
    }
    createPublicLinkAsync(assetId, rendition, expirationDate, relativeUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(assetId);
            guard_1.default.stringNotNullOrEmpty(rendition);
            const publicLink = yield this._client.entityFactory.createAsync(definitions_1.PublicLink.definitionName);
            publicLink.setPropertyValue(definitions_1.PublicLink.resource, rendition);
            if (expirationDate) {
                publicLink.setPropertyValue(definitions_1.PublicLink.expirationDate, expirationDate);
            }
            if (relativeUrl) {
                guard_1.default.stringNotNullOrEmpty(relativeUrl);
                publicLink.setPropertyValue(definitions_1.PublicLink.relativeUrl, relativeUrl);
            }
            const assetToPublicLink = publicLink.getRelation(definitions_1.PublicLink.assetToPublicLink);
            assetToPublicLink === null || assetToPublicLink === void 0 ? void 0 : assetToPublicLink.add(assetId);
            return this._client.entities.saveAsync(publicLink);
        });
    }
}
exports.AssetsClient = AssetsClient;

},{"../constants/definitions":81,"../guard":224}],56:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandsClient = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const response_handler_1 = require("./response-handler");
class CommandsClient {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
    }
    executeCommandRawAsync(namespace, command, args = null, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(namespace);
            guard_1.default.stringNotNullOrEmpty(command);
            const link = yield this._client.linkHelper.commandToLinkAsync(namespace, command);
            const content = ta_json_1.TaJson.serialize(args !== null && args !== void 0 ? args : {});
            const response = yield this._client.raw.postAsync(link.href, content, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            return response;
        });
    }
    executeCommandAsync(namespace, command, args = null, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(namespace);
            guard_1.default.stringNotNullOrEmpty(command);
            const response = yield this.executeCommandRawAsync(namespace, command, args, cancelCallback);
            let result = null;
            if (response.content != null) {
                result = response.content;
            }
            return result;
        });
    }
}
exports.CommandsClient = CommandsClient;

},{"../guard":224,"./response-handler":71,"ta-json":424}],57:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentHubClient = void 0;
const entity_factory_1 = require("../factories/entity-factory");
const option_list_factory_1 = require("../factories/option-list-factory");
const relation_factory_1 = require("../factories/relation-factory");
const guard_1 = __importDefault(require("../guard"));
const link_helper_1 = require("../link-helper");
const null_logger_1 = __importDefault(require("../logging/null-logger"));
const entity_definition_mapper_1 = require("../mappers/entity-definition-mapper");
const entity_mapper_1 = require("../mappers/entity-mapper");
const typed_entity_creator_1 = require("../mappers/typed-entity-creator");
const aggregates_client_1 = require("./aggregates-client");
const api_client_1 = require("./api-client");
const assets_client_1 = require("./assets-client");
const commands_client_1 = require("./commands-client");
const culture_client_1 = require("./culture-client");
const culture_loader_1 = require("./culture-loader");
const entities_client_1 = require("./entities-client");
const entity_definitions_client_1 = require("./entity-definitions-client");
const internal_client_1 = require("./internal-client");
const notifications_client_1 = require("./notifications-client");
const option_list_client_1 = require("./option-list-client");
const pages_client_1 = require("./pages-client");
const permissions_client_1 = require("./permissions-client");
const policies_client_1 = require("./policies-client");
const querying_client_1 = require("./querying-client");
const raw_client_1 = require("./raw-client");
const search_client_1 = require("./search-client");
const settings_client_1 = require("./settings-client");
const upload_client_1 = require("./upload-client");
const users_client_1 = require("./users-client");
const version_checker_1 = require("./version-checker");
class ContentHubClient {
    constructor(baseUri, oauthGrant, logger = new null_logger_1.default()) {
        this.impersonatedUsername = null;
        guard_1.default.notNullOrUndefined(baseUri);
        guard_1.default.notNull(oauthGrant);
        const baseUrl = typeof baseUri === "string" ? baseUri : baseUri.href();
        guard_1.default.stringNotNullOrEmpty(baseUrl);
        this.logger = logger;
        this.internalClient = new internal_client_1.InternalClient(baseUri, oauthGrant);
        this.api = new api_client_1.ApiClient(this);
        this.aggregates = new aggregates_client_1.AggregateClient(this);
        this.assets = new assets_client_1.AssetsClient(this);
        this.commands = new commands_client_1.CommandsClient(this);
        this.entities = new entities_client_1.EntitiesClient(this);
        this.entityDefinitions = new entity_definitions_client_1.EntityDefinitionsClient(this);
        this.notifications = new notifications_client_1.NotificationsClient(this);
        this.notifications = new notifications_client_1.NotificationsClient(this);
        this.optionLists = new option_list_client_1.OptionListClient(this);
        this.pages = new pages_client_1.PagesClient(this);
        this.policies = new policies_client_1.PoliciesClient(this);
        this.querying = new querying_client_1.QueryingClient(this);
        this.raw = new raw_client_1.RawClient(this);
        this.search = new search_client_1.SearchClient(this);
        this.settings = new settings_client_1.SettingsClient(this);
        this.users = new users_client_1.UsersClient(this);
        this.permissions = new permissions_client_1.PermissionsClient(this);
        this.uploads = new upload_client_1.UploadClient(this);
        const cultureLoader = new culture_loader_1.CultureLoader(this);
        this.cultures = new culture_client_1.CultureClient(cultureLoader);
        this.relationFactory = new relation_factory_1.RelationFactory(this);
        const typedEntityCreator = new typed_entity_creator_1.TypedEntityCreator(this);
        this.entityFactory = new entity_factory_1.EntityFactory(this, this.relationFactory, cultureLoader, typedEntityCreator);
        this.optionListFactory = new option_list_factory_1.OptionListFactory();
        this.entityMapper = new entity_mapper_1.EntityMapper(this);
        this.entityDefinitionMapper = new entity_definition_mapper_1.EntityDefinitionMapper(this);
        this.linkHelper = new link_helper_1.LinkHelper(this);
        this.versionChecker = new version_checker_1.VersionChecker(this.api);
    }
}
exports.ContentHubClient = ContentHubClient;

},{"../factories/entity-factory":219,"../factories/option-list-factory":220,"../factories/relation-factory":222,"../guard":224,"../link-helper":227,"../logging/null-logger":231,"../mappers/entity-definition-mapper":235,"../mappers/entity-mapper":236,"../mappers/typed-entity-creator":256,"./aggregates-client":53,"./api-client":54,"./assets-client":55,"./commands-client":56,"./culture-client":58,"./culture-loader":59,"./entities-client":60,"./entity-definitions-client":61,"./internal-client":62,"./notifications-client":63,"./option-list-client":64,"./pages-client":65,"./permissions-client":66,"./policies-client":67,"./querying-client":68,"./raw-client":69,"./search-client":74,"./settings-client":75,"./upload-client":76,"./users-client":77,"./version-checker":78}],58:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureClient = void 0;
const guard_1 = __importDefault(require("../guard"));
class CultureClient {
    constructor(cultureLoader) {
        guard_1.default.notNullOrUndefined(cultureLoader);
        this._cultureLoader = cultureLoader;
    }
    getAllCulturesAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._cultureLoader.getAllCulturesAsync();
        });
    }
    getAllCulturesCachedAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._cultureLoader.getAllCulturesCachedAsync();
        });
    }
    getDefaultCultureAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._cultureLoader.getDefaultCultureAsync();
        });
    }
    getDefaultCultureCachedAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._cultureLoader.getDefaultCultureCachedAsync();
        });
    }
}
exports.CultureClient = CultureClient;

},{"../guard":224}],59:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureLoader = void 0;
const culture_cache_1 = require("../caches/culture-cache");
const constants_1 = require("../constants");
const culture_load_option_1 = require("../contracts/querying/culture-load-option");
const entity_load_configuration_1 = require("../contracts/querying/entity-load-configuration");
const filters_1 = require("../contracts/querying/filters");
const member_load_option_1 = require("../contracts/querying/member-load-option");
const property_load_option_1 = require("../contracts/querying/property-load-option");
const query_1 = require("../contracts/querying/query");
const relation_load_option_1 = require("../contracts/querying/relation-load-option");
const error_messages_1 = __importDefault(require("../error-messages"));
const internal_error_1 = require("../errors/internal-error");
const guard_1 = __importDefault(require("../guard"));
class CultureLoader {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
        this._cultureCache = new culture_cache_1.CultureCache();
    }
    getDefaultCultureAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const cultures = yield this.getAllCulturesAsync();
            return CultureLoader.extractDefaultCulture(cultures);
        });
    }
    getDefaultCultureCachedAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const cultures = yield this.getAllCulturesCachedAsync();
            return CultureLoader.extractDefaultCulture(cultures);
        });
    }
    getAllCulturesAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const cultures = yield this.queryCultureAsync();
            this._cultureCache.loadCache(cultures);
            return cultures;
        });
    }
    getAllCulturesCachedAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            let cultures = this._cultureCache.getCachedCultures();
            if (cultures == null) {
                cultures = yield this.getAllCulturesAsync();
            }
            return cultures;
        });
    }
    //#region Private methods
    queryCultureAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this._client.querying.singleAsync(CultureLoader._query, CultureLoader._loadConfig);
            if (result == null) {
                throw new internal_error_1.InternalError(error_messages_1.default.CultureLoader.CouldNotFindCultures);
            }
            const token = yield result.getPropertyValueAsync(constants_1.DEFINITIONS["Setting"].value, member_load_option_1.MemberLoadOption.LazyLoading);
            if (token == null) {
                throw new internal_error_1.InternalError(error_messages_1.default.CultureLoader.CouldNotFindCultures);
            }
            const cultures = token instanceof Array ? token : typeof token === "string" ? JSON.parse(token) : [];
            return cultures;
        });
    }
    static extractDefaultCulture(cultures) {
        if (cultures == null || cultures.length === 0) {
            return null;
        }
        return cultures[0];
    }
}
exports.CultureLoader = CultureLoader;
CultureLoader._loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["Setting"].value), relation_load_option_1.RelationLoadOption.None);
CultureLoader._query = new query_1.Query({
    filter: new filters_1.CompositeQueryFilter({
        combineMethod: filters_1.CompositeFilterOperator.And,
        children: [
            new filters_1.DefinitionQueryFilter({
                name: constants_1.DEFINITIONS["Setting"].definitionName,
                operator: filters_1.ComparisonOperator.Equals,
            }),
            new filters_1.PropertyQueryFilter({
                operator: filters_1.ComparisonOperator.Equals,
                dataType: filters_1.FilterDataType.String,
                property: constants_1.DEFINITIONS["Setting"].name,
                value: constants_1.DEFINITIONS["Setting"].CultureSetting.name,
            }),
        ],
    }),
    take: 1,
});

},{"../caches/culture-cache":51,"../constants":82,"../contracts/querying/culture-load-option":140,"../contracts/querying/entity-load-configuration":147,"../contracts/querying/filters":159,"../contracts/querying/member-load-option":174,"../contracts/querying/property-load-option":177,"../contracts/querying/query":183,"../contracts/querying/relation-load-option":185,"../error-messages":205,"../errors/internal-error":209,"../guard":224}],60:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitiesClient = void 0;
const ta_json_1 = require("ta-json");
const api_1 = require("../constants/api");
const defaults_1 = require("../constants/defaults");
const entity_iterator_1 = require("../contracts/querying/entity-iterator");
const entity_load_configuration_1 = require("../contracts/querying/entity-load-configuration");
const filters_1 = require("../contracts/querying/filters");
const id_iterator_1 = require("../contracts/querying/id-iterator");
const query_1 = require("../contracts/querying/query");
const error_messages_1 = __importDefault(require("../error-messages"));
const internal_error_1 = require("../errors/internal-error");
const web_api_error_1 = require("../errors/web-api-error");
const guard_1 = __importDefault(require("../guard"));
const link_1 = __importDefault(require("../link"));
const entity_copy_options_mapper_1 = require("../mappers/entity-copy-options-mapper");
const type_guards_1 = require("../type-guards");
const response_handler_1 = require("./response-handler");
/**
 * The client responsible for getting, saving and deleting entities.
 */
class EntitiesClient {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    /**
     * {@inheritDoc}
     */
    getAsync(param, loadConfiguration, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            let query;
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                query = new query_1.Query({
                    filter: new filters_1.IdentifierQueryFilter({
                        operator: filters_1.ComparisonOperator.Equals,
                        value: param,
                    }),
                });
            }
            else {
                guard_1.default.validId(param);
                query = new query_1.Query({
                    filter: new filters_1.IdQueryFilter({
                        operator: filters_1.ComparisonOperator.Equals,
                        value: param,
                    }),
                });
            }
            const result = yield this._client.querying.queryAsync(query, loadConfiguration || null, cancelCallback);
            const entity = EntitiesClient.single(result);
            return entity;
        });
    }
    /**
     * {@inheritDoc}
     */
    getManyAsync(param, loadConfiguration, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (param == null || param.length === 0)
                return [];
            let query;
            if (type_guards_1.TypeGuards.isStringArray(param)) {
                const identifiers = param;
                guard_1.default.arrayNoneNullOrEmptyString(identifiers);
                query = new query_1.Query({
                    filter: new filters_1.IdentifierQueryFilter({
                        operator: filters_1.ComparisonOperator.Equals,
                        values: identifiers,
                    }),
                });
            }
            else {
                const ids = param;
                guard_1.default.arrayNoneNullOrUndefined(ids);
                guard_1.default.validIds(ids);
                query = new query_1.Query({
                    filter: new filters_1.IdQueryFilter({
                        operator: filters_1.ComparisonOperator.Equals,
                        values: ids,
                    }),
                });
            }
            const result = yield this._client.querying.queryAsync(query, loadConfiguration || null, cancelCallback);
            return result.items;
        });
    }
    /**
     * {@inheritDoc}
     */
    getByDefinitionAsync(definitionName, loadConfiguration, skip = defaults_1.ENTITIES.skip, take = defaults_1.ENTITIES.take, sorting, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(definitionName);
            guard_1.default.notNegative(skip);
            guard_1.default.notNegative(take);
            const query = new query_1.Query({
                filter: new filters_1.DefinitionQueryFilter({
                    name: definitionName,
                    operator: filters_1.ComparisonOperator.Equals,
                }),
                skip: skip,
                take: take,
                sorting: sorting,
            });
            return this._client.querying.queryAsync(query, loadConfiguration, cancelCallback);
        });
    }
    /**
     * {@inheritDoc}
     */
    getIdsByDefinitionAsync(definitionName, skip, take, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(definitionName);
            if (skip != null)
                guard_1.default.notNegative(skip);
            if (take != null)
                guard_1.default.notNegative(take);
            const query = new query_1.Query({
                filter: new filters_1.DefinitionQueryFilter({
                    name: definitionName,
                    operator: filters_1.ComparisonOperator.Equals,
                }),
                skip: skip,
                take: take,
                //TODO sorting on created on ascending?
            });
            const result = yield this._client.querying.queryIdsAsync(query, cancelCallback);
            return result;
        });
    }
    /**
     * {@inheritDoc}
     */
    getEntityIterator(definition, loadConfiguration) {
        guard_1.default.stringNotNullOrEmpty(definition);
        loadConfiguration = loadConfiguration || entity_load_configuration_1.EntityLoadConfiguration.Default;
        const query = new query_1.Query({
            filter: new filters_1.DefinitionQueryFilter({
                name: definition,
                operator: filters_1.ComparisonOperator.Equals,
            }),
        });
        return new entity_iterator_1.EntityIterator(this._client, query, loadConfiguration);
    }
    /**
     * {@inheritDoc}
     */
    getEntityIdIterator(definition) {
        guard_1.default.stringNotNullOrEmpty(definition);
        const query = new query_1.Query({
            filter: new filters_1.DefinitionQueryFilter({
                name: definition,
                operator: filters_1.ComparisonOperator.Equals,
            }),
        });
        return new id_iterator_1.EntityIdIterator(this._client, query);
    }
    /**
     * {@inheritDoc}
     */
    saveAsync(entity, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(entity);
            let id;
            if (entity.isNew) {
                id = yield this.createEntityAsync(entity, cancelCallback);
            }
            else {
                yield this.updateEntityAsync(entity, cancelCallback);
                id = entity.id;
            }
            entity.markClean();
            return id;
        });
    }
    /**
     * {@inheritDoc}
     */
    deleteAsync(entityId, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(entityId);
            const link = yield this._client.linkHelper.entityToLinkAsync(entityId);
            const response = yield this._client.raw.deleteAsync(link.href, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    /**
     * {@inheritDoc}
     */
    copyAsync(entityId, copyOptions, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(entityId);
            guard_1.default.notNull(copyOptions);
            const link = yield this._client.linkHelper.copyEntityToLinkAsync(entityId);
            const options = entity_copy_options_mapper_1.EntityCopyOptionsMapper.map(copyOptions);
            const response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(options), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            const href = response.responseHeaders[api_1.HEADERS.location];
            if (!href) {
                throw new web_api_error_1.WebApiError(error_messages_1.default.EntitiesClient.UnableToExtractLocationHeaderFromResponse, response.statusCode, response);
            }
            const id = yield this._client.linkHelper.idFromEntityAsync(new link_1.default(href));
            if (id === null || id === 0) {
                throw new internal_error_1.InternalError(error_messages_1.default.EntitiesClient.UnableToExtractEntityIdFromHeader);
            }
            return id;
        });
    }
    /**
     * Creates the specified {@link IEntity} in the system.
     *
     * @param entity - The entity to create/save in the system
     */
    createEntityAsync(entity, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.entitiesLinkAsync();
            const resource = yield this._client.entityMapper.toResourceAsync(entity);
            const response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(resource), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            const href = response.responseHeaders[api_1.HEADERS.location];
            if (!href) {
                throw new web_api_error_1.WebApiError(error_messages_1.default.EntitiesClient.UnableToExtractLocationHeaderFromResponse, response.statusCode, response);
            }
            const id = yield this._client.linkHelper.idFromEntityAsync(new link_1.default(href));
            if (id === null || id === 0) {
                throw new internal_error_1.InternalError(error_messages_1.default.EntitiesClient.UnableToExtractEntityIdFromHeader);
            }
            return id;
        });
    }
    /**
     * Update the specified {@link IEntity}.
     *
     * @param entity - The entity to update
     */
    updateEntityAsync(entity, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            // Check if the entity is loaded in only one culture to improve save performance.
            let culture = null;
            if (entity.cultures.length === 1) {
                culture = entity.cultures[0];
            }
            const link = yield this._client.linkHelper.entityToLinkAsync(entity.id, culture !== null && culture !== void 0 ? culture : undefined);
            const resource = yield this._client.entityMapper.mapDirtiesToResourceAsync(entity);
            const response = yield this._client.raw.putAsync(link.href, ta_json_1.TaJson.serialize(resource), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    /**
     * Get an {@link IEntity} or `null` from the specified {@link IEntityQueryResult}.
     *
     * @remarks
     * Throws an {@link InternalError} if multiple results where available.
     *
     * @param queryResult - The query result (should contain one or no items)
     * @returns An {@link IEntity} or `null`.
     */
    static single(queryResult) {
        if (queryResult.totalNumberOfResults === 0) {
            return null;
        }
        else if (queryResult.totalNumberOfResults === 1) {
            return queryResult.items[0];
        }
        else {
            throw new internal_error_1.InternalError(error_messages_1.default.QueryingClient.MultipleResultsWhenOneExpected);
        }
    }
}
exports.EntitiesClient = EntitiesClient;

},{"../constants/api":79,"../constants/defaults":80,"../contracts/querying/entity-iterator":145,"../contracts/querying/entity-load-configuration":147,"../contracts/querying/filters":159,"../contracts/querying/id-iterator":170,"../contracts/querying/query":183,"../error-messages":205,"../errors/internal-error":209,"../errors/web-api-error":218,"../guard":224,"../link":228,"../mappers/entity-copy-options-mapper":234,"../type-guards":322,"./response-handler":71,"ta-json":424}],61:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionsClient = void 0;
const http_status_codes_1 = require("http-status-codes");
const ta_json_1 = require("ta-json");
const urijs_1 = __importDefault(require("urijs"));
const entity_definition_cache_1 = require("../caches/entity-definition-cache");
const entity_definition_id_iterator_1 = require("../contracts/querying/entity-definition-id-iterator");
const entity_definition_id_query_result_1 = require("../contracts/querying/entity-definition-id-query-result");
const entity_definition_iterator_1 = require("../contracts/querying/entity-definition-iterator");
const entity_definition_query_result_1 = require("../contracts/querying/entity-definition-query-result");
const internal_error_1 = require("../errors/internal-error");
const guard_1 = __importDefault(require("../guard"));
const entity_definition_collection_resource_1 = require("../models/entity-definition-collection-resource");
const entity_definition_resource_1 = require("../models/entity-definition-resource");
const type_guards_1 = require("../type-guards");
const array_utilities_1 = require("../utilities/array-utilities");
const response_handler_1 = require("./response-handler");
const api_1 = require("../constants/api");
class EntityDefinitionsClient {
    constructor(client) {
        this._client = client;
        this._cache = new entity_definition_cache_1.EntityDefinitionCache();
    }
    getAllCachedAsync(includeConditionalMembers = true, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            let definitions = this._cache.getAll(undefined, includeConditionalMembers, loadPermissions);
            if (!definitions) {
                definitions = yield this.getAllAsync(includeConditionalMembers, loadPermissions);
            }
            return definitions;
        });
    }
    getAllAsync(includeConditionalMembers = true, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            const allEntityDefinitions = yield this.getAllBatchedAsync(includeConditionalMembers, loadPermissions);
            this._cache.loadAll(allEntityDefinitions, undefined, undefined, includeConditionalMembers, loadPermissions);
            return allEntityDefinitions;
        });
    }
    getAsync(param, includeConditionalMembers = true, loadPermissions, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            const link = yield this._client.linkHelper.definitionToLinkAsync(param, includeConditionalMembers, loadPermissions);
            const uri = new urijs_1.default(link.href);
            if (cacheSignature && !uri.hasQuery("after")) {
                uri.addQuery("after", cacheSignature);
                link.href = uri.toString();
            }
            return this.getDefinitionAsync(link);
        });
    }
    getCachedAsync(param, includeConditionalMembers = true, loadPermissions, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            let definitionPromise = this._cache.getAsync(param, includeConditionalMembers, loadPermissions);
            if (!definitionPromise) {
                definitionPromise = this.getAsync(param, includeConditionalMembers, loadPermissions, cacheSignature);
                this._cache.loadAsync(param, definitionPromise, includeConditionalMembers, loadPermissions);
            }
            return definitionPromise;
        });
    }
    getNameAsync(id, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            const definition = yield this.getAsync(id, undefined, undefined, cacheSignature);
            return definition && definition.name;
        });
    }
    getNameCachedAsync(id, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            let definition = this._cache.get(id);
            if (!definition) {
                definition = yield this.getAsync(id, undefined, undefined, cacheSignature);
            }
            return definition && definition.name;
        });
    }
    getIdAsync(name, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const definition = yield this.getAsync(name, undefined, undefined, cacheSignature);
            return definition && definition.id;
        });
    }
    getIdCachedAsync(name, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            let definition = this._cache.get(name);
            if (!definition) {
                definition = yield this.getAsync(name, undefined, undefined, cacheSignature);
            }
            return definition && definition.id;
        });
    }
    getManyAsync(param, includeConditionalMembers = true, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (param.length === 0) {
                return [];
            }
            else if (type_guards_1.TypeGuards.isStringArray(param)) {
                guard_1.default.arrayNoneNullOrEmptyString(param);
                const linkFactory = (batch, batchSize) => this._client.linkHelper.definitionsToLinkAsync(batch, undefined, batchSize, includeConditionalMembers, undefined, loadPermissions);
                return this.getDefinitionsBatchedAsync(param, linkFactory);
            }
            else {
                guard_1.default.validIds(param);
                const linkFactory = (batch, batchSize) => this._client.linkHelper.definitionsToLinkAsync(batch, undefined, batchSize, includeConditionalMembers);
                return this.getDefinitionsBatchedAsync(param, linkFactory);
            }
        });
    }
    getManyCachedAsync(param, includeConditionalMembers = true, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (param.length === 0)
                return [];
            const shouldGetByName = typeof param[0] === "string";
            const stillToFetch = [];
            const result = [];
            for (const nameOrId of param) {
                const definition = this._cache.getAsync(nameOrId, includeConditionalMembers, loadPermissions);
                if (definition != null) {
                    result.push(definition);
                }
                else {
                    stillToFetch.push(nameOrId);
                }
            }
            if (stillToFetch != null && stillToFetch.length > 0) {
                const set = new Set(stillToFetch);
                const fetchedDefinitions = yield this.getManyAsync(shouldGetByName ? [...set] : [...set], includeConditionalMembers, loadPermissions);
                result.push(...fetchedDefinitions);
            }
            const loadedResults = yield Promise.all(result);
            return loadedResults.filter((definition) => definition != null);
        });
    }
    getNamesAsync(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(ids);
            if (ids.length === 0)
                return {};
            guard_1.default.validIds(ids);
            const definitions = yield this.getManyAsync(ids);
            const result = {};
            for (const definition of definitions) {
                result[definition.id] = definition.name;
            }
            return result;
        });
    }
    getNamesCachedAsync(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(ids);
            if (ids.length === 0)
                return {};
            guard_1.default.validIds(ids);
            const definitions = yield this.getManyCachedAsync(ids);
            const result = {};
            for (const definition of definitions) {
                result[definition.id] = definition.name;
            }
            return result;
        });
    }
    getIdsAsync(names) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(names);
            if (names.length === 0)
                return {};
            const definitions = yield this.getManyAsync(names);
            const result = {};
            for (const definition of definitions) {
                result[definition.name] = definition.id;
            }
            return result;
        });
    }
    getIdsCachedAsync(names) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(names);
            if (names.length === 0)
                return {};
            const definitions = yield this.getManyCachedAsync(names);
            const result = {};
            for (const definition of definitions) {
                result[definition.name] = definition.id;
            }
            return result;
        });
    }
    saveAsync(definition) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(definition);
            const resource = yield this._client.entityDefinitionMapper.mapEntityDefinitionResourceAsync(definition);
            let response;
            if (definition.isNew) {
                const link = yield this._client.linkHelper.definitionsLinkAsync();
                response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(resource));
            }
            else {
                const link = yield this._client.linkHelper.definitionToLinkAsync(definition.name);
                response = yield this._client.raw.putAsync(link.href, ta_json_1.TaJson.serialize(resource));
            }
            response_handler_1.ResponseHandler.handleErrors(response);
            let definitionId = 0;
            if (definition.isNew) {
                definitionId = (yield this.getIdAsync(definition.name)) || 0;
            }
            else {
                definitionId = definition.id;
                this._cache.invalidate(definitionId);
            }
            if (definitionId === 0) {
                throw new internal_error_1.InternalError("Did not receive a valid id after saving.");
            }
            return definitionId;
        });
    }
    deleteAsync(param) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
            }
            else {
                guard_1.default.validId(param);
            }
            const link = yield this._client.linkHelper.definitionToLinkAsync(param);
            const response = yield this._client.raw.deleteAsync(link.href);
            response_handler_1.ResponseHandler.handleErrors(response);
            this._cache.invalidate(param);
        });
    }
    getRangeAsync(skip, take) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNegative(skip);
            guard_1.default.notNegative(take);
            const resource = yield this.getDefinitionsSkipTake(skip, take);
            const definitions = yield this._client.entityDefinitionMapper.mapEntityDefinitionsAsync(resource);
            for (const definition of definitions) {
                this._cache.load(definition);
            }
            return new entity_definition_query_result_1.EntityDefinitionQueryResult(this._client, definitions, resource.totalItems || 0, skip);
        });
    }
    getRangeIdsAsync(skip, take) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNegative(skip);
            guard_1.default.notNegative(take);
            const result = yield this.getRangeAsync(skip, take);
            return new entity_definition_id_query_result_1.EntityDefinitionIdQueryResult(this._client, result.items.map(item => item.id), result.totalNumberOfResults, skip);
        });
    }
    createEntityDefinitionIterator(pageSize) {
        return new entity_definition_iterator_1.EntityDefinitionIterator(this._client, pageSize);
    }
    createEntityDefinitionIdIterator(pageSize) {
        return new entity_definition_id_iterator_1.EntityDefinitionIdIterator(this._client, pageSize);
    }
    getDefinitionsSkipTake(skip, take, includeConditionalMembers = true, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.definitionsToLinkAsync(null, skip, take, includeConditionalMembers, undefined, loadPermissions);
            const response = yield this._client.raw.getAsync(link.href);
            const collectionResource = ta_json_1.TaJson.deserialize(response.content, entity_definition_collection_resource_1.EntityDefinitionCollectionResource);
            return collectionResource;
        });
    }
    getDefinitionAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._client.raw.getAsync(link.href);
            if (response.statusCode === http_status_codes_1.StatusCodes.NOT_FOUND) {
                return null;
            }
            const resource = ta_json_1.TaJson.deserialize(response.content, entity_definition_resource_1.EntityDefinitionResource);
            const definition = yield this._client.entityDefinitionMapper.mapEntityDefinitionAsync(resource);
            if (definition) {
                const uri = new urijs_1.default(link.href);
                this._cache.load(definition, uri.hasQuery(api_1.ENTITY_DEFINITIONS.includeConditionalMembers, true), uri.hasQuery(api_1.ENTITY_DEFINITIONS.loadPermissions, true));
            }
            return definition;
        });
    }
    getDefinitionsBatchedAsync(definitionsToFetch, linkFactory) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!definitionsToFetch || definitionsToFetch.length === 0) {
                return [];
            }
            // We need to batch this or the backend will refuse to respond.
            const batches = (0, array_utilities_1.chunk)(definitionsToFetch, EntityDefinitionsClient._batchSize);
            const includeConditionalMembers = true;
            const definitions = [];
            for (const definitionBatch of batches) {
                const batchResult = linkFactory(definitionBatch, EntityDefinitionsClient._batchSize, includeConditionalMembers)
                    .then(link => {
                    return this._client.raw.getAsync(link.href);
                })
                    .then(response => {
                    response_handler_1.ResponseHandler.handleErrors(response);
                    const resource = ta_json_1.TaJson.deserialize(response.content, entity_definition_collection_resource_1.EntityDefinitionCollectionResource);
                    return resource.items;
                });
                // Map each definition key to its result and load into cache individually
                for (const definitionKey of definitionBatch) {
                    const definition = batchResult
                        .then(result => {
                        var _a;
                        return (_a = result.find(definition => typeof definitionKey === "string"
                            ? definition.name === definitionKey
                            : definition.id === definitionKey)) !== null && _a !== void 0 ? _a : null;
                    })
                        .then(resource => resource ? this._client.entityDefinitionMapper.mapEntityDefinitionAsync(resource) : null);
                    definitions.push(definition);
                    // Important this caching is done before any promise is resolved, to cache the load ASAP.
                    this._cache.loadAsync(definitionKey, definition, includeConditionalMembers);
                }
            }
            return Promise.all(definitions).then(results => results.filter((result) => result != null));
        });
    }
    getAllBatchedAsync(includeConditionalMembers = true, loadPermissions) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const resources = [];
            let resource = null;
            let skip = 0;
            while (resource == null || resource.next) {
                const link = (_a = resource === null || resource === void 0 ? void 0 : resource.next) !== null && _a !== void 0 ? _a : (yield this._client.linkHelper.definitionsLinkAsync(skip, EntityDefinitionsClient._batchSize, includeConditionalMembers, undefined, loadPermissions));
                const response = yield this._client.raw.getAsync(link.href);
                response_handler_1.ResponseHandler.handleErrors(response);
                resource = ta_json_1.TaJson.deserialize(response.content, entity_definition_collection_resource_1.EntityDefinitionCollectionResource);
                resources.push(...resource.items);
                skip += (_b = resource.returnedItems) !== null && _b !== void 0 ? _b : resource.items.length;
            }
            const definitions = yield this._client.entityDefinitionMapper.mapEntityDefinitionsAsync(resources);
            for (const definition of definitions) {
                this._cache.load(definition);
            }
            return definitions;
        });
    }
}
exports.EntityDefinitionsClient = EntityDefinitionsClient;
EntityDefinitionsClient._batchSize = 25;

},{"../caches/entity-definition-cache":52,"../constants/api":79,"../contracts/querying/entity-definition-id-iterator":141,"../contracts/querying/entity-definition-id-query-result":142,"../contracts/querying/entity-definition-iterator":143,"../contracts/querying/entity-definition-query-result":144,"../errors/internal-error":209,"../guard":224,"../models/entity-definition-collection-resource":261,"../models/entity-definition-resource":262,"../type-guards":322,"../utilities/array-utilities":323,"./response-handler":71,"http-status-codes":362,"ta-json":424,"urijs":431}],62:[function(require,module,exports){
(function (process){(function (){
"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalClient = void 0;
const axios_1 = __importDefault(require("axios"));
const axios_extensions_1 = require("axios-extensions");
const https_1 = __importDefault(require("https"));
const ta_json_1 = require("ta-json");
const oauth_password_grant_1 = __importDefault(require("../authentication/oauth-password-grant"));
const oauth_refreshtoken_grant_1 = __importDefault(require("../authentication/oauth-refreshtoken-grant"));
const token_info_1 = require("../authentication/token-info");
const authentication_error_1 = require("../errors/authentication-error");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../guard"));
const http_method_1 = require("../http-method");
const response_message_1 = require("./response-message");
class InternalClient {
    constructor(baseUri, oauthGrant) {
        this._passwordGrant = null;
        this._refreshTokenGrant = null;
        this._requestHeaders = {};
        guard_1.default.notNullOrUndefined(baseUri);
        guard_1.default.notNull(oauthGrant);
        const baseUrl = typeof baseUri === "string" ? baseUri : baseUri.href();
        guard_1.default.stringNotNullOrEmpty(baseUrl);
        const createClientParameters = {
            baseURL: baseUrl,
            adapter: (0, axios_extensions_1.throttleAdapterEnhancer)((0, axios_extensions_1.cacheAdapterEnhancer)(axios_1.default.defaults.adapter, { enabledByDefault: false })),
        };
        // This setting should be added to the .env file for connecting to a server using a self signed certificate
        if (typeof process !== "undefined" && process != null) {
            if (process.env.IGNORE_HTTPS_ERRORS === "true") {
                createClientParameters.httpsAgent = new https_1.default.Agent({
                    rejectUnauthorized: false,
                });
            }
        }
        this._client = axios_1.default.create(createClientParameters);
        if (oauthGrant instanceof oauth_password_grant_1.default) {
            this._passwordGrant = oauthGrant;
        }
        else if (oauthGrant instanceof oauth_refreshtoken_grant_1.default) {
            this._refreshTokenGrant = oauthGrant;
        }
        if (this.shouldAuthenticateWithOAuth) {
            const createRefreshTokenResponseInterceptor = () => {
                const responseInterceptor = this._client.interceptors.response.use((response) => response, (error) => {
                    // Reject promise if usual error
                    if (error.status !== 401) {
                        return Promise.reject(error);
                    }
                    // When response code is 401, try to refresh the token.
                    // Eject the interceptor so it doesn't loop in case the token refresh causes the 401 response.
                    this._client.interceptors.response.eject(responseInterceptor);
                    return this._client
                        .request({
                        url: "/oauth/token",
                        method: "POST",
                        transformRequest: [
                            function (data, headers) {
                                headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8";
                                return Object.keys(data)
                                    .reduce((d, k) => {
                                    d.push(`${k}=${encodeURIComponent(data[k])}`);
                                    return d;
                                }, [])
                                    .join("&");
                            },
                        ],
                        data: ta_json_1.TaJson.serialize(this._refreshTokenGrant),
                    })
                        .then(response => {
                        const tokenInfo = ta_json_1.TaJson.deserialize(response.data, token_info_1.TokenInfo);
                        this._accessToken = tokenInfo.accessToken;
                        this._refreshTokenGrant.refreshToken = tokenInfo.refreshToken;
                        error.response.config.headers["Authorization"] = "Bearer " + tokenInfo.accessToken;
                        return (0, axios_1.default)(error.response.config);
                    })
                        .catch(error => {
                        this._isAuthenticated = false;
                        throw error;
                    })
                        .finally(createRefreshTokenResponseInterceptor);
                });
            };
            createRefreshTokenResponseInterceptor.bind(this);
            createRefreshTokenResponseInterceptor();
        }
        else {
            // No OAuthGrant specified, so we must be in the browser.
            this._client.defaults.withCredentials = true; // Send the cookies with the requests.
            this._isAuthenticated = true; // Let's assume we're already authenticated
        }
    }
    /**
     * Indicates if we should authenticate with OAuth.
     */
    get shouldAuthenticateWithOAuth() {
        return !!(this._passwordGrant || this._refreshTokenGrant);
    }
    authenticateAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._isAuthenticated || !this.shouldAuthenticateWithOAuth) {
                return true;
            }
            if (this._accessToken) {
                return true;
            }
            if (!this._passwordGrant) {
                throw new invalid_operation_error_1.InvalidOperationError("Can not authenticate - Missing OAuth password grant.");
            }
            return yield this._client
                .request({
                url: "/oauth/token",
                method: "POST",
                transformRequest: [
                    function (data, headers) {
                        headers["Content-Type"] = "application/x-www-form-urlencoded; charset=UTF-8";
                        return Object.keys(data)
                            .reduce((d, k) => {
                            d.push(`${k}=${encodeURIComponent(data[k])}`);
                            return d;
                        }, [])
                            .join("&");
                    },
                ],
                data: ta_json_1.TaJson.serialize(this._passwordGrant),
            })
                .then(response => {
                const tokenInfo = ta_json_1.TaJson.deserialize(response.data, token_info_1.TokenInfo);
                this._accessToken = tokenInfo.accessToken;
                this._refreshTokenGrant = new oauth_refreshtoken_grant_1.default(this._passwordGrant.clientId, this._passwordGrant.clientSecret, tokenInfo.refreshToken);
                this._client.interceptors.request.use(config => {
                    config.headers["Authorization"] = `Bearer ${this._accessToken}`;
                    return config;
                }, error => {
                    return Promise.reject(error);
                });
                this._isAuthenticated = true;
                return true;
            })
                .catch(error => {
                this._isAuthenticated = false;
                throw new authentication_error_1.AuthenticationError("Authentication failed.", error);
            });
        });
    }
    setRequestHeaders(headers) {
        guard_1.default.notNullOrUndefined(headers);
        this._requestHeaders = headers;
    }
    /**
     * Sets the provided error handler as an interceptor for the responses.
     * @param onError - the callback that should be called on error.
     */
    setResponseErrorHandler(onError) {
        if (this.shouldAuthenticateWithOAuth) {
            throw new invalid_operation_error_1.InvalidOperationError("Unable to set response error handler when authenticating via OAuth.");
        }
        this._client.interceptors.response.use(response => response, error => onError(error));
    }
    send_onFulfilled(requestMsg) {
        return (response) => {
            return response_message_1.ResponseMessage.build(response.status, response.headers, {
                requestMessage: Object.freeze(requestMsg),
                content: response.data,
                statusText: response.statusText,
            });
        };
    }
    send_onRejected(error) {
        if (error.response) {
            return response_message_1.ResponseMessage.build(error.response.status, error.response.headers, {
                statusText: error.response.statusText,
                content: error.response.data,
            });
        }
        else if (error.request) {
            return response_message_1.ResponseMessage.build(error.request.status, {}, { statusText: error.request.statusText, content: error.request.data });
        }
        else {
            throw error;
        }
    }
    sendAsync(requestGenerator, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._isAuthenticated) {
                throw new invalid_operation_error_1.InvalidOperationError("Client is not authenticated. Authenticate first.");
            }
            guard_1.default.notNullOrUndefined(requestGenerator);
            const requestMsg = requestGenerator();
            guard_1.default.notNullOrUndefined(requestMsg.requestUri);
            const requestUrl = typeof requestMsg.requestUri === "string" ? requestMsg.requestUri : requestMsg.requestUri.href();
            guard_1.default.stringNotNullOrEmpty(requestUrl);
            const requestConfig = {};
            requestConfig.headers = Object.assign(Object.assign({}, this._requestHeaders), requestMsg.requestHeaders);
            if (cancelCallback) {
                requestConfig.cancelToken = new axios_1.default.CancelToken(cancelCallback);
            }
            let result = response_message_1.ResponseMessage.build(0); // Not a valid status code, but we'll know it failed.
            switch (requestMsg.method) {
                case http_method_1.HttpMethod.DELETE:
                    result = yield this._client
                        .delete(requestUrl, requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.GET:
                    result = yield this._client
                        .get(requestUrl, requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.HEAD:
                    result = yield this._client
                        .head(requestUrl, requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.OPTIONS:
                    requestConfig.method = "OPTIONS";
                    requestConfig.url = requestUrl;
                    result = yield this._client
                        .request(requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.PATCH:
                    result = yield this._client
                        .patch(requestUrl, typeof requestMsg.content === "string"
                        ? requestMsg.content
                        : ta_json_1.TaJson.serialize(requestMsg.content), requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.POST:
                    result = yield this._client
                        .post(requestUrl, typeof requestMsg.content === "string"
                        ? requestMsg.content
                        : ta_json_1.TaJson.serialize(requestMsg.content), requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                case http_method_1.HttpMethod.PUT:
                    result = yield this._client
                        .put(requestUrl, typeof requestMsg.content === "string"
                        ? requestMsg.content
                        : ta_json_1.TaJson.serialize(requestMsg.content), requestConfig)
                        .then(this.send_onFulfilled(requestMsg), error => this.send_onRejected(error));
                    break;
                default:
                    throw "Method not supported.";
            }
            return result;
        });
    }
}
exports.InternalClient = InternalClient;

}).call(this)}).call(this,require('_process'))
},{"../authentication/oauth-password-grant":47,"../authentication/oauth-refreshtoken-grant":48,"../authentication/token-info":49,"../errors/authentication-error":207,"../errors/invalid-operation-error":210,"../guard":224,"../http-method":225,"./response-message":72,"_process":9,"axios":330,"axios-extensions":325,"https":6,"ta-json":424}],63:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsClient = void 0;
const ta_json_1 = require("ta-json");
const constants_1 = require("../constants");
const guard_1 = __importDefault(require("../guard"));
const notification_mapper_1 = require("../mappers/notification-mapper");
const distribute_notification_resource_1 = require("../models/notifications/distribute-notification-resource");
const type_guards_1 = require("../type-guards");
const response_handler_1 = require("./response-handler");
class NotificationsClient {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    //! Not necessary for now, can be added later (lots of boilerplate)
    // // public async getMailTemplateAsync(name: string, loadConfiguration: Nullable<IEntityLoadConfiguration> = null)
    sendConfirmationEmailAsync(users) {
        return __awaiter(this, void 0, void 0, function* () {
            let userIds = [];
            if (type_guards_1.TypeGuards.isStringArray(users)) {
                userIds = (yield this._client.users.getUserIdsAsync(users));
            }
            else {
                userIds = users;
            }
            guard_1.default.validIds(userIds);
            for (const userId of userIds) {
                const link = yield this._client.linkHelper.sendConfirmationMailToLinkAsync(userId);
                const response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(userId));
                response_handler_1.ResponseHandler.handleErrors(response);
            }
        });
    }
    sendEmailNotificationAsync(mailRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(mailRequest);
            mailRequest.validate();
            if ("recipients" in mailRequest) {
                if (type_guards_1.TypeGuards.isStringArray(mailRequest.recipients)) {
                    // Usernames
                    const mailUsernames = mailRequest;
                    const ids = yield this._client.users.getUserIdsAsync(mailUsernames.recipients);
                    if (ids !== null) {
                        yield this.sendPrivateEmailNotificationAsync(mailUsernames, ids);
                    }
                }
                else {
                    // Ids
                    const mailIds = mailRequest;
                    yield this.sendPrivateEmailNotificationAsync(mailIds, mailIds.recipients);
                }
            }
            else {
                // Broadcast
                yield this.sendPrivateEmailNotificationAsync(mailRequest, null);
            }
        });
    }
    sendRealTimeNotificationAsync(realtimeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(realtimeRequest);
            realtimeRequest.validate();
            if ("recipients" in realtimeRequest) {
                if (type_guards_1.TypeGuards.isStringArray(realtimeRequest.recipients)) {
                    // Usernames
                    const realtimeUsers = realtimeRequest;
                    const ids = yield this._client.users.getUserIdsAsync(realtimeUsers.recipients);
                    if (ids !== null) {
                        yield this.sendPrivateRealTimeNotificationAsync(realtimeRequest, ids);
                    }
                }
                else {
                    // Ids
                    const realtimeIds = realtimeRequest;
                    yield this.sendPrivateRealTimeNotificationAsync(realtimeIds, realtimeIds.recipients);
                }
            }
            else {
                // Broadcast
                yield this.sendPrivateRealTimeNotificationAsync(realtimeRequest, null);
            }
        });
    }
    //#region Private functions
    sendPrivateEmailNotificationAsync(mailRequest, recipients) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.sendNotificationAsync(mailRequest.mailTemplateName, recipients, "EmailNotification", mailRequest.variables);
        });
    }
    sendPrivateRealTimeNotificationAsync(realtimeRequest, recipients) {
        return __awaiter(this, void 0, void 0, function* () {
            const parameters = notification_mapper_1.NotificationMapper.mapParameters(realtimeRequest);
            return this.sendNotificationAsync(constants_1.NOTIFICATIONS.REALTIME.raw, recipients, "RealTimeNotification", parameters);
        });
    }
    sendNotificationAsync(notificationName, recipients, channel, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.sendNotificationToLinkAsync(notificationName);
            // Get user links.
            let userLinks = null;
            const linkPromises = recipients === null || recipients === void 0 ? void 0 : recipients.map(id => this._client.linkHelper.entityToLinkAsync(id));
            if (linkPromises != null) {
                userLinks = yield Promise.all(linkPromises);
            }
            // Create the resource.
            const resource = new distribute_notification_resource_1.DistributeNotificationResource();
            resource.recipients = userLinks;
            resource.channels = [channel];
            resource.parameters = parameters;
            const response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(resource));
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
}
exports.NotificationsClient = NotificationsClient;

},{"../constants":82,"../guard":224,"../mappers/notification-mapper":244,"../models/notifications/distribute-notification-resource":269,"../type-guards":322,"./response-handler":71,"ta-json":424}],64:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionListClient = void 0;
const ta_json_1 = require("ta-json");
const urijs_1 = __importDefault(require("urijs"));
const guard_1 = __importDefault(require("../guard"));
const option_list_mapper_1 = require("../mappers/option-list-mapper");
const option_list_collection_resource_1 = __importDefault(require("../models/option-lists/option-list-collection-resource"));
const option_list_resource_1 = __importDefault(require("../models/option-lists/option-list-resource"));
const response_handler_1 = require("./response-handler");
class OptionListClient {
    constructor(client) {
        this._client = client;
        this._mapper = new option_list_mapper_1.OptionListMapper(client);
    }
    getAllNamesAsync(cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.dataSourcesLinkAsync();
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            const resource = ta_json_1.TaJson.deserialize(response.content, option_list_collection_resource_1.default);
            const names = resource.items.map(item => item.name);
            return names;
        });
    }
    getAllDescriptionsAsync(cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.dataSourcesLinkAsync();
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            const resource = ta_json_1.TaJson.deserialize(response.content, option_list_collection_resource_1.default);
            return resource.items;
        });
    }
    getAsync(name, cancelCallback, cacheSignature) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const link = yield this._client.linkHelper.dataSourceToLinkAsync(name);
            const uri = new urijs_1.default(link.href);
            if (!uri.hasQuery("after") && cacheSignature) {
                uri.addQuery("after", cacheSignature);
                link.href = uri.toString();
            }
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            if (response.statusCode === 404) {
                return null;
            }
            response_handler_1.ResponseHandler.handleErrors(response);
            const resource = ta_json_1.TaJson.deserialize(response.content, option_list_resource_1.default);
            return this._mapper.mapOptionListAsync(resource);
        });
    }
    createAsync(optionList, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(optionList, "optionList");
            const resource = this._mapper.map(optionList);
            const link = yield this._client.linkHelper.dataSourcesLinkAsync();
            const response = yield this._client.raw.postAsync(link.href, ta_json_1.TaJson.serialize(resource), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    updateAsync(optionList, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(optionList, "optionList");
            const resource = this._mapper.map(optionList);
            const link = yield this._client.linkHelper.dataSourceToLinkAsync(optionList.name);
            const response = yield this._client.raw.putAsync(link.href, ta_json_1.TaJson.serialize(resource), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    deleteAsync(name, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const link = yield this._client.linkHelper.dataSourceToLinkAsync(name);
            const response = yield this._client.raw.deleteAsync(link.href, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
}
exports.OptionListClient = OptionListClient;

},{"../guard":224,"../mappers/option-list-mapper":245,"../models/option-lists/option-list-collection-resource":270,"../models/option-lists/option-list-resource":272,"./response-handler":71,"ta-json":424,"urijs":431}],65:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagesClient = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const page_resource_1 = require("../models/pages/page-resource");
const response_handler_1 = require("./response-handler");
class PagesClient {
    constructor(client) {
        this._client = client;
    }
    getPageByNameAsync(name, culture, entityId, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            guard_1.default.notNullOrUndefined(culture);
            return this.getPageByIdentifierAsync(name, culture, entityId, cancelCallback);
        });
    }
    getPageByIdentifierAsync(identifier, culture, entityId, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(identifier);
            guard_1.default.notNullOrUndefined(culture);
            const link = yield this._client.linkHelper.pageResourceToLinkAsync(identifier, culture, entityId);
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            return ta_json_1.TaJson.deserialize(response.content, page_resource_1.PageResource);
        });
    }
    getPageByIdAsync(id, culture, entityId, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            guard_1.default.notNullOrUndefined(culture);
            const link = yield this._client.linkHelper.pageResourceToLinkAsync(id, culture, entityId);
            const response = yield this._client.raw.getAsync(link.href, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            return ta_json_1.TaJson.deserialize(response.content, page_resource_1.PageResource);
        });
    }
}
exports.PagesClient = PagesClient;

},{"../guard":224,"../models/pages/page-resource":278,"./response-handler":71,"ta-json":424}],66:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsClient = void 0;
const ta_json_1 = require("ta-json");
const response_handler_1 = require("../clients/response-handler");
const guard_1 = __importDefault(require("../guard"));
const permissions_resource_1 = require("../models/permissions-resource");
const user_entity_permissions_resource_1 = require("../models/user-entity-permissions-resource");
class PermissionsClient {
    constructor(client) {
        this._client = client;
    }
    getPermissionsAsync(id, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            let link;
            if (userId != null) {
                guard_1.default.validId(userId);
                link = yield this._client.linkHelper.explainUserPermissionsForEntityToLinkAsync(id, userId);
            }
            else {
                link = yield this._client.linkHelper.permissionsForEntityToLinkAsync(id);
            }
            const response = yield this._client.raw.getAsync(link.href);
            if (response.statusCode === 404) {
                return [];
            }
            response_handler_1.ResponseHandler.handleErrors(response);
            if (userId != null) {
                const resource = ta_json_1.TaJson.deserialize(response.content, user_entity_permissions_resource_1.UserEntityPermissionsResource);
                const permissions = resource.permissions.map(p => p.permission);
                return permissions != null && permissions.length > 0 ? permissions : [];
            }
            else {
                const resource = ta_json_1.TaJson.deserialize(response.content, permissions_resource_1.PermissionsResource);
                return resource.permissions || [];
            }
        });
    }
}
exports.PermissionsClient = PermissionsClient;

},{"../clients/response-handler":71,"../guard":224,"../models/permissions-resource":283,"../models/user-entity-permissions-resource":320,"ta-json":424}],67:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoliciesClient = void 0;
const http_status_codes_1 = require("http-status-codes");
const ta_json_1 = require("ta-json");
const error_messages_1 = __importDefault(require("../error-messages"));
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../guard"));
const policy_mapper_1 = require("../mappers/policy-mapper");
const policy_resource_1 = require("../models/policies/policy-resource");
const response_handler_1 = require("./response-handler");
class PoliciesClient {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
    }
    getUserGroupPolicyAsync(userGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(userGroupId);
            const resource = yield this.getPolicyResourceAsync(userGroupId);
            const result = yield policy_mapper_1.PolicyMapper.mapToUserGroupPolicyAsync(this._client, resource);
            return result;
        });
    }
    getUserPolicyAsync(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(userId);
            const resource = yield this.getPolicyResourceAsync(userId);
            const result = yield policy_mapper_1.PolicyMapper.mapToUserPolicyAsync(this._client, resource);
            return result;
        });
    }
    updateAsync(policy) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(policy);
            const resource = yield policy_mapper_1.PolicyMapper.mapToResourceAsync(this._client, policy);
            const id = policy.getRelatedId();
            if (id == null) {
                throw new invalid_operation_error_1.InvalidOperationError(error_messages_1.default.PoliciesClient.RelatedIdCannotBeNull);
            }
            const link = yield this._client.linkHelper.policyToLinkAsync(id);
            const content = ta_json_1.TaJson.serialize(resource);
            const response = yield this._client.raw.postAsync(link.href, content);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    //#region Private methods
    getPolicyResourceAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = yield this._client.linkHelper.policyToLinkAsync(id);
            const response = yield this._client.raw.getAsync(link.href);
            if (response.statusCode === http_status_codes_1.StatusCodes.NOT_FOUND) {
                return null;
            }
            response_handler_1.ResponseHandler.handleErrors(response);
            const resource = ta_json_1.TaJson.deserialize(response.content, policy_resource_1.PolicyResource);
            return resource;
        });
    }
}
exports.PoliciesClient = PoliciesClient;

},{"../error-messages":205,"../errors/invalid-operation-error":210,"../guard":224,"../mappers/policy-mapper":246,"../models/policies/policy-resource":286,"./response-handler":71,"http-status-codes":362,"ta-json":424}],68:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryingClient = void 0;
const query_load_configuration_1 = require("../contracts/querying/query-load-configuration");
const error_messages_1 = __importDefault(require("../error-messages"));
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../guard"));
const load_options_mapper_1 = require("../mappers/load-options-mapper");
const querying_mapper_1 = require("../mappers/querying-mapper");
const schema_querying_1 = require("./schema-querying");
/**
 *  Contains functionality to query and scroll for entities.
 */
class QueryingClientBase {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    /**
     * Gets a single entity that matches the query.
     *
     * @param query - The query to execute
     * @param loadConfiguration - The load configuration. If it is null, then {@link EntityLoadConfiguration#Default} will be used.
     * @param cancelCallback - A {@link CancelCallback} that will be placed in an Axios {@link CancelToken} if provided
     * @returns The entity that matches the query or null if there are no results.
     */
    singleAsync(query, loadConfiguration, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(query);
            const result = yield this.queryAsync(query, loadConfiguration, cancelCallback);
            if (result.items.length === 0) {
                return null;
            }
            else if (result.items.length > 1) {
                throw new invalid_operation_error_1.InvalidOperationError(error_messages_1.default.QueryingClient.MultipleResults);
            }
            return result.items[0];
        });
    }
    /**
     * Gets a the id of the entity that matches the query.
     *
     * @param query - The query to execute
     * @param cancelCallback - A {@link CancelCallback} that will be placed in an Axios {@link CancelToken} if provided
     * @returns The id of the entity that matches the query or null if there are no results.
     */
    singleIdAsync(query, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(query);
            const result = yield this.queryIdsAsync(query, cancelCallback);
            if (result.items.length === 0) {
                return null;
            }
            else if (result.items.length > 1) {
                throw new invalid_operation_error_1.InvalidOperationError(error_messages_1.default.QueryingClient.MultipleResults);
            }
            return result.items[0];
        });
    }
    //? deprecated
    resolveLoadConfiguration(query, loadConfiguration) {
        let queryLoadConfiguration;
        if (loadConfiguration != null) {
            queryLoadConfiguration = load_options_mapper_1.LoadOptionsMapper.toQueryLoadConfiguration(loadConfiguration);
        }
        else {
            queryLoadConfiguration = query_load_configuration_1.QueryLoadConfiguration.Default;
        }
        return queryLoadConfiguration;
    }
}
/**
 *  Contains functionality to query and scroll for entities.
 */
class QueryingClient extends QueryingClientBase {
    constructor(client) {
        super(client);
        guard_1.default.notNullOrUndefined(client);
        this._extendedClient = client;
        this._schemaQuerying = new schema_querying_1.SchemaQuerying(client);
        this._mapper = new querying_mapper_1.QueryingMapper(client);
    }
    /**
     * Retrieves entities matching the query.
     *
     * @param query - The query to execute.
     * @param loadConfiguration - The load configuration. If it is null, then {@link EntityLoadConfiguration#Default} will be used.
     * @param cancelCallback - A {@link CancelCallback} that will be placed in an Axios {@link CancelToken} if provided
     */
    queryAsync(query, loadConfiguration, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(query, "query");
            //TODO query.validate();
            const queryLoadConfiguration = this.resolveLoadConfiguration(query, loadConfiguration || undefined);
            const resource = yield this._schemaQuerying.queryWithSchemaAsync(query, queryLoadConfiguration, cancelCallback);
            loadConfiguration = load_options_mapper_1.LoadOptionsMapper.toEntityLoadConfiguration(queryLoadConfiguration || undefined);
            const result = yield this._mapper.mapEntityQueryResultAsync(resource, query, loadConfiguration);
            return result;
        });
    }
    /**
     * Retrieves the ids of entities matching the query.
     *
     * @param query - The query to execute.
     * @param cancelCallback - A {@link CancelCallback} that will be placed in an Axios {@link CancelToken} if provided
     */
    queryIdsAsync(query, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(query, "query");
            //TODO query.validate();
            const resource = yield this._schemaQuerying.queryWithSchemaAsync(query, query_load_configuration_1.QueryLoadConfiguration.Ids, cancelCallback);
            const result = yield this._mapper.mapEntityIdQueryResultAsync(resource, query);
            return result;
        });
    }
}
exports.QueryingClient = QueryingClient;

},{"../contracts/querying/query-load-configuration":179,"../error-messages":205,"../errors/invalid-operation-error":210,"../guard":224,"../mappers/load-options-mapper":238,"../mappers/querying-mapper":248,"./schema-querying":73}],69:[function(require,module,exports){
"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RawClient = void 0;
const guard_1 = __importDefault(require("../guard"));
const http_method_1 = require("../http-method");
const request_message_1 = require("./request-message");
class RawClient {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    getAsync(uri, headers, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.internalClient.sendAsync(() => new request_message_1.RequestMessage({
                requestUri: uri,
                method: http_method_1.HttpMethod.GET,
                requestHeaders: headers,
            }), cancelCallback);
        });
    }
    postAsync(uri, content, headers, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!headers) {
                headers = {
                    "Content-Type": "application/json",
                };
            }
            return yield this._client.internalClient.sendAsync(() => new request_message_1.RequestMessage({
                requestUri: uri,
                method: http_method_1.HttpMethod.POST,
                requestHeaders: headers,
                content: content,
            }), cancelCallback);
        });
    }
    putAsync(uri, content, headers, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!headers) {
                headers = {
                    "Content-Type": "application/json",
                };
            }
            return yield this._client.internalClient.sendAsync(() => new request_message_1.RequestMessage({
                requestUri: uri,
                method: http_method_1.HttpMethod.PUT,
                requestHeaders: headers,
                content: content,
            }), cancelCallback);
        });
    }
    deleteAsync(uri, headers, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.internalClient.sendAsync(() => new request_message_1.RequestMessage({
                requestUri: uri,
                method: http_method_1.HttpMethod.DELETE,
                requestHeaders: headers,
            }), cancelCallback);
        });
    }
    sendAsync(messageFactory, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(messageFactory);
            return yield this._client.internalClient.sendAsync(messageFactory, cancelCallback);
        });
    }
}
exports.RawClient = RawClient;

},{"../guard":224,"../http-method":225,"./request-message":70}],70:[function(require,module,exports){
"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestMessage = void 0;
/**
 * A request message to be used with {@link IInternalClient} implementations.
 */
class RequestMessage {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.RequestMessage = RequestMessage;

},{}],71:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseHandler = void 0;
const http_status_codes_1 = require("http-status-codes");
const argument_error_1 = require("../errors/argument-error");
const forbidden_error_1 = require("../errors/forbidden-error");
const not_found_error_1 = require("../errors/not-found-error");
const validation_error_1 = require("../errors/validation-error");
const validation_failure_1 = require("../errors/validation-failure");
const web_api_error_1 = require("../errors/web-api-error");
const guard_1 = __importDefault(require("../guard"));
class ResponseHandler {
    /**
     * Inspects the response message's success status.
     *
     * @remarks
     * Throws errors when response message is not successful.
     *
     * @param responseMessage - The response message
     */
    static handleErrors(responseMessage) {
        guard_1.default.notNullOrUndefined(responseMessage);
        if (responseMessage.isSuccessStatusCode) {
            return;
        }
        if (responseMessage.statusCode === http_status_codes_1.StatusCodes.BAD_REQUEST) {
            ResponseHandler.handleBadRequest(responseMessage);
        }
        else {
            ResponseHandler.handleGenericError(responseMessage);
        }
    }
    /**
     * Handle validation errors related to a malformed or in another way invalid request payload send to server.
     *
     * @remarks
     * This method always throws an exception.
     *
     * @param responseMessage - The response message
     */
    static handleBadRequest(responseMessage) {
        guard_1.default.notNullOrUndefined(responseMessage);
        if (responseMessage.isSuccessStatusCode) {
            throw new argument_error_1.ArgumentError(`Can not process successful request (code: ${responseMessage.statusCode}).`);
        }
        if (responseMessage.statusCode !== http_status_codes_1.StatusCodes.BAD_REQUEST) {
            throw new argument_error_1.ArgumentError(`Can not process failed request with status code '${responseMessage.statusCode}'.`);
        }
        /* istanbul ignore if */
        if (responseMessage.content != null) {
            let json;
            if (typeof responseMessage.content === "string") {
                try {
                    json = JSON.parse(responseMessage.content);
                }
                catch (ex) {
                    throw new validation_error_1.ValidationError(responseMessage.content);
                }
            }
            else {
                json = responseMessage.content;
            }
            throw new validation_error_1.ValidationError("One or more validation errors were detected.", ...Object.keys(json).map(propertyName => new validation_failure_1.ValidationFailure(json[propertyName], propertyName)));
        }
        else {
            throw new validation_error_1.ValidationError("An unspecified error occurred.");
        }
    }
    /**
     * Handle generic errors.
     *
     * @remarks
     * This method always throws an exception.
     *
     * @param responseMessage - The response message
     */
    static handleGenericError(responseMessage) {
        var _a;
        guard_1.default.notNullOrUndefined(responseMessage);
        if (responseMessage.isSuccessStatusCode) {
            throw new argument_error_1.ArgumentError(`Can not process successful request (code: ${responseMessage.statusCode}).`);
        }
        let message = null;
        /* istanbul ignore if */
        if (responseMessage.content != null) {
            let json;
            try {
                if (typeof responseMessage.content === "string") {
                    try {
                        json = JSON.parse(responseMessage.content);
                    }
                    catch (ex) {
                        throw new validation_error_1.ValidationError(responseMessage.content);
                    }
                }
                else {
                    json = responseMessage.content;
                }
                message = (_a = json["ExceptionMessage"]) !== null && _a !== void 0 ? _a : json["Message"];
            }
            catch (ex) { }
        }
        message = message !== null && message !== void 0 ? message : responseMessage.content;
        if (responseMessage.statusCode === http_status_codes_1.StatusCodes.FORBIDDEN) {
            throw new forbidden_error_1.ForbiddenError(message !== null && message !== void 0 ? message : "Insufficient privileges or resource in use.");
        }
        else if (responseMessage.statusCode === http_status_codes_1.StatusCodes.NOT_FOUND) {
            throw new not_found_error_1.NotFoundError(message && message.length > 0 ? message : "Resource can not be found.", responseMessage);
        }
        else {
            if (message != null) {
                message =
                    `An error has occurred (${responseMessage.statusCode}${responseMessage.statusText != null ? ` - ${responseMessage.statusText}` : ""}).\n` + `Message: ${message}`;
            }
            else if (responseMessage.statusCode === http_status_codes_1.StatusCodes.CONFLICT) {
                message = `Conflict in the parameter value or name (${responseMessage.statusCode}${responseMessage.statusText != null ? ` - ${responseMessage.statusText}` : ""})`;
            }
            else {
                message = `An error has occurred without further information (${responseMessage.statusCode}${responseMessage.statusText != null ? ` - ${responseMessage.statusText}` : ""})`;
            }
            throw new web_api_error_1.WebApiError(message, responseMessage.statusCode, responseMessage);
        }
    }
}
exports.ResponseHandler = ResponseHandler;

},{"../errors/argument-error":206,"../errors/forbidden-error":208,"../errors/not-found-error":211,"../errors/validation-error":216,"../errors/validation-failure":217,"../errors/web-api-error":218,"../guard":224,"http-status-codes":362}],72:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseMessage = void 0;
const base_types_1 = require("../base-types");
/**
 * A response message that will be returned by {@link IInternalClient} instances.
 */
class ResponseMessage {
    constructor(init) {
        Object.assign(this, init);
    }
    /**
     * Indicates if the response is successful.
     */
    get isSuccessStatusCode() {
        return !!this.statusCode && this.statusCode >= 200 && this.statusCode < 300;
    }
    /**
     * Build a response message.
     * @param statusCode - HTTP status code
     * @param responseHeaders - Headers containing additional information sent by the server
     * @param optional - Object with more response properties (statusText, content, ...)
     */
    static build(statusCode, responseHeaders, optional) {
        var _a;
        responseHeaders = new base_types_1.CaseInsensitiveStringMap(responseHeaders || {});
        let reasonPhrase = undefined;
        if ((statusCode < 200 || statusCode >= 300) && typeof ((_a = optional === null || optional === void 0 ? void 0 : optional.content) === null || _a === void 0 ? void 0 : _a["Message"]) === "string") {
            reasonPhrase = optional.content["Message"];
        }
        return new ResponseMessage(Object.assign(Object.assign({}, optional), { statusCode, responseHeaders, reasonPhrase }));
    }
}
exports.ResponseMessage = ResponseMessage;

},{"../base-types":50}],73:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaQuerying = void 0;
const ta_json_1 = require("ta-json");
const urijs_1 = __importDefault(require("urijs"));
const URITemplate_1 = __importDefault(require("urijs/src/URITemplate"));
const api_1 = require("../constants/api");
const query_request_1 = require("../contracts/querying/query-request");
const guard_1 = __importDefault(require("../guard"));
const query_result_resource_1 = require("../models/query-result-resource");
const response_handler_1 = require("./response-handler");
class SchemaQuerying {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    queryWithSchemaAsync(query, loadConfiguration, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(query, "query");
            guard_1.default.notNullOrUndefined(loadConfiguration, "loadConfiguration");
            //TODO query.validate();
            const routes = yield this._client.api.getApiRoutesAsync();
            const queryEndpoint = routes[api_1.QUERY.templateName];
            let uri;
            /* istanbul ignore next */
            if (queryEndpoint.templated) {
                const uriTemplate = new URITemplate_1.default(queryEndpoint.href);
                uri = uriTemplate.expand({});
            }
            else {
                uri = new urijs_1.default(queryEndpoint.href);
            }
            const queryRequest = new query_request_1.QueryRequest({
                query: query,
                loadConfiguration: loadConfiguration,
            });
            const resource = yield this.queryEndpointAsync(uri, ta_json_1.TaJson.serialize(queryRequest), cancelCallback);
            return resource;
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    scrollWithSchemaAsync(scrollRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error("Method not implemented."); //TODO
        });
    }
    queryEndpointAsync(endpoint, content, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._client.raw.postAsync(endpoint, content, {
                [api_1.HEADERS.apiVersion]: "3",
                [api_1.HEADERS.minimalSchema]: "true",
                "Content-Type": "application/json",
            }, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            const resource = ta_json_1.TaJson.deserialize(response.content, query_result_resource_1.QueryResultResource);
            return resource;
        });
    }
}
exports.SchemaQuerying = SchemaQuerying;

},{"../constants/api":79,"../contracts/querying/query-request":180,"../guard":224,"../models/query-result-resource":291,"./response-handler":71,"ta-json":424,"urijs":431,"urijs/src/URITemplate":432}],74:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchClient = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../guard"));
const all_facet_values_response_1 = require("../models/search/all-facet-values-response");
const search_response_1 = require("../models/search/search-response");
const response_handler_1 = require("./response-handler");
class SearchClient {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    searchAsync(searchRequest, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(searchRequest);
            const searchLink = yield this._client.linkHelper.searchLinkAsync();
            const response = yield this._client.raw.postAsync(searchLink.href, ta_json_1.TaJson.serialize(searchRequest), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            const searchResponse = ta_json_1.TaJson.deserialize(response.content, search_response_1.SearchResponse);
            return searchResponse;
        });
    }
    allFacetsAsync(allFacetsRequest, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(allFacetsRequest);
            const allFacetsLink = yield this._client.linkHelper.allFacetsAsync();
            const response = yield this._client.raw.postAsync(allFacetsLink.href, ta_json_1.TaJson.serialize(allFacetsRequest), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(response);
            const allFacetsResponse = ta_json_1.TaJson.deserialize(response.content, all_facet_values_response_1.AllFacetValuesResponse);
            return allFacetsResponse;
        });
    }
}
exports.SearchClient = SearchClient;

},{"../guard":224,"../models/search/all-facet-values-response":299,"../models/search/search-response":311,"./response-handler":71,"ta-json":424}],75:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsClient = void 0;
const constants_1 = require("../constants");
const filters_1 = require("../contracts/querying/filters");
const query_1 = require("../contracts/querying/query");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../guard"));
const response_handler_1 = require("../clients/response-handler");
class SettingsClient {
    constructor(client) {
        guard_1.default.notNull(client);
        this._client = client;
    }
    getCategoryIdAsync(name) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            // Build query
            const query = new query_1.Query();
            query.filter = new filters_1.CompositeQueryFilter({
                combineMethod: filters_1.CompositeFilterOperator.And,
                children: [
                    new filters_1.DefinitionQueryFilter({
                        name: constants_1.DEFINITIONS["SettingsCategory"].definitionName,
                        operator: filters_1.ComparisonOperator.Equals,
                    }),
                    new filters_1.PropertyQueryFilter({
                        operator: filters_1.ComparisonOperator.Contains,
                        dataType: filters_1.FilterDataType.String,
                        property: constants_1.DEFINITIONS["SettingsCategory"].name,
                        value: name,
                    }),
                ],
            });
            // Get the category
            const result = yield this._client.querying.queryIdsAsync(query);
            let id = null;
            if (!result.items || !result.items.length) {
                return null;
            }
            else if (result.items.length === 1) {
                id = result.items[0];
                return id;
            }
            else {
                throw new invalid_operation_error_1.InvalidOperationError("Can't have more than one result, must be unique");
            }
        });
    }
    getSettingAsync(category, name, loadConfiguration = null) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(category);
            guard_1.default.stringNotNullOrEmpty(name);
            // Get the category id
            const categoryId = yield this.getCategoryIdAsync(category);
            if (categoryId == null) {
                return null;
            }
            // Build query
            const query = new query_1.Query();
            query.filter = new filters_1.CompositeQueryFilter({
                combineMethod: filters_1.CompositeFilterOperator.And,
                children: [
                    new filters_1.DefinitionQueryFilter({
                        name: constants_1.DEFINITIONS["Setting"].definitionName,
                        operator: filters_1.ComparisonOperator.Equals,
                    }),
                    new filters_1.PropertyQueryFilter({
                        operator: filters_1.ComparisonOperator.Contains,
                        dataType: filters_1.FilterDataType.String,
                        property: constants_1.DEFINITIONS["Setting"].name,
                        value: name,
                    }),
                    new filters_1.RelationQueryFilter({
                        relation: constants_1.DEFINITIONS["Setting"].settingCategoryToSettings,
                        parentId: categoryId,
                    }),
                ],
            });
            // Get the setting
            const result = yield this._client.querying.queryAsync(query, loadConfiguration);
            return (_a = result.items[0]) !== null && _a !== void 0 ? _a : null;
        });
    }
    getSettingValueAndSchemaAsync(category, name) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(category);
            guard_1.default.stringNotNullOrEmpty(name);
            const link = yield this._client.linkHelper.settingByNameLink(category, name);
            // Get the setting
            const result = yield this._client.raw.getAsync(link.href);
            response_handler_1.ResponseHandler.handleErrors(result);
            return result.content;
        });
    }
    getSettingsForCategoryAsync(category, loadConfiguration = null) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(category);
            // Get the category id
            const categoryId = yield this.getCategoryIdAsync(category);
            if (categoryId == null) {
                throw new invalid_operation_error_1.InvalidOperationError("categoryId was not found");
            }
            // Build query
            const query = new query_1.Query();
            query.filter = new filters_1.CompositeQueryFilter({
                combineMethod: filters_1.CompositeFilterOperator.And,
                children: [
                    new filters_1.DefinitionQueryFilter({
                        name: constants_1.DEFINITIONS["Setting"].definitionName,
                        operator: filters_1.ComparisonOperator.Equals,
                    }),
                    new filters_1.RelationQueryFilter({
                        relation: constants_1.DEFINITIONS["Setting"].settingCategoryToSettings,
                        parentId: categoryId,
                    }),
                ],
            });
            // Get the settings
            const result = yield this._client.querying.queryAsync(query, loadConfiguration);
            return result.items;
        });
    }
}
exports.SettingsClient = SettingsClient;

},{"../clients/response-handler":71,"../constants":82,"../contracts/querying/filters":159,"../contracts/querying/query":183,"../errors/invalid-operation-error":210,"../guard":224}],76:[function(require,module,exports){
"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadClient = void 0;
const form_data_1 = __importDefault(require("form-data"));
const ta_json_1 = require("ta-json");
const api_1 = require("../constants/api");
const defaults_1 = require("../constants/defaults");
const error_messages_1 = __importDefault(require("../error-messages"));
const web_api_error_1 = require("../errors/web-api-error");
const fileversion_1 = require("../fileversion");
const guard_1 = __importDefault(require("../guard"));
const create_upload_response_1 = require("../models/upload/create-upload-response");
const upload_action_1 = require("../models/upload/upload-action");
const upload_configuration_1 = require("../models/upload/upload-configuration");
const upload_request_wrapper_1 = require("../models/upload/upload-request-wrapper");
const response_handler_1 = require("./response-handler");
class UploadClient {
    constructor(client) {
        this.client = client;
        guard_1.default.notNull(client);
    }
    uploadAsync(request, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(request);
            yield this.client.versionChecker.compatibilityCheckAsync(new fileversion_1.FileVersion(4, 0, 0, 0));
            const source = yield request.source.getReadableSourceAsync();
            const uploadRequest = new upload_request_wrapper_1.UploadRequestWrapper();
            uploadRequest.fileName = request.source.name;
            uploadRequest.fileSize = source.byteLength;
            uploadRequest.uploadConfiguration = new upload_configuration_1.UploadConfiguration(request.configurationName, request.configurationParameters);
            uploadRequest.action = new upload_action_1.UploadAction(request.actionName, request.actionParameters);
            return yield this.uploadFileAsync(uploadRequest, source, cancelCallback);
        });
    }
    uploadFileAsync(uploadRequest, uploadSource, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNull(uploadRequest);
            guard_1.default.notNull(uploadSource);
            // 1. Request new file to be created.
            const uploadLink = yield this.client.linkHelper.createUploadToLinkAsync();
            const uploadResponse = yield this.client.raw.postAsync(uploadLink.href, ta_json_1.TaJson.serialize(uploadRequest), undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(uploadResponse);
            const uploadResponseLocation = uploadResponse.responseHeaders[api_1.HEADERS.location];
            if (!uploadResponseLocation) {
                throw new web_api_error_1.WebApiError(error_messages_1.default.EntitiesClient.UnableToExtractLocationHeaderFromResponse, uploadResponse.statusCode, uploadResponse);
            }
            const createUploadResponse = ta_json_1.TaJson.deserialize(uploadResponse.content, create_upload_response_1.CreateUploadResponse);
            // 2. Upload file
            if (uploadRequest.fileSize >= defaults_1.FILE_UPLOAD.chunkSize) {
                let chunkCurrent = 0;
                const chunkTotal = Math.ceil(uploadRequest.fileSize / defaults_1.FILE_UPLOAD.chunkSize);
                const chunkUploadUri = `${uploadResponseLocation}&chunks=${chunkTotal}`;
                let index = 0;
                while (index < uploadSource.byteLength) {
                    const chunk = uploadSource.slice(index, defaults_1.FILE_UPLOAD.chunkSize + index);
                    yield this.uploadChunkAsync(uploadRequest.fileName, chunk, `${chunkUploadUri}&chunk=${chunkCurrent}`, cancelCallback);
                    index += defaults_1.FILE_UPLOAD.chunkSize;
                    chunkCurrent++;
                }
                // Finalize chunked upload
                const finalizeChunkUploadResponse = yield this.client.raw.postAsync(chunkUploadUri, "", undefined, cancelCallback);
                response_handler_1.ResponseHandler.handleErrors(finalizeChunkUploadResponse);
            }
            else {
                yield this.uploadChunkAsync(uploadRequest.fileName, uploadSource, uploadResponseLocation, cancelCallback);
            }
            // 3. Finalize upload
            const finalizeUploadLink = yield this.client.linkHelper.finalizeUploadToLinkAsync();
            const finalizeUploadResponse = yield this.client.raw.postAsync(finalizeUploadLink.href, createUploadResponse, undefined, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(finalizeUploadResponse);
            return finalizeUploadResponse;
        });
    }
    uploadChunkAsync(fileName, buffer, uri, cancelCallback) {
        return __awaiter(this, void 0, void 0, function* () {
            // Due to differences in the re-implementation of the FormData type in the Node.js wrapper we need two different paths to be able to handle uploads performed from Node.js and the browser.
            // See:
            // - https://github.com/form-data/form-data
            // - https://developer.mozilla.org/en-US/docs/Web/API/FormData
            const [form, headers] = typeof window === "undefined"
                ? this.prepareFormDataNode(fileName, buffer)
                : this.prepareFormDataBrowser(fileName, buffer);
            const uploadResponse = yield this.client.raw.postAsync(uri, form, headers, cancelCallback);
            response_handler_1.ResponseHandler.handleErrors(uploadResponse);
        });
    }
    prepareFormDataNode(fileName, buffer) {
        const form = new form_data_1.default({ autoDestroy: true });
        form.append("file", buffer, fileName);
        const headers = {
            "Content-Type": `multipart/form-data;boundary=${form.getBoundary()}`,
        };
        return [form, headers];
    }
    prepareFormDataBrowser(fileName, buffer) {
        const form = new form_data_1.default();
        form.append("file", new Blob([buffer]), fileName);
        const headers = {
            "Content-Type": "multipart/form-data",
        };
        return [form, headers];
    }
}
exports.UploadClient = UploadClient;

},{"../constants/api":79,"../constants/defaults":80,"../error-messages":205,"../errors/web-api-error":218,"../fileversion":223,"../guard":224,"../models/upload/create-upload-response":315,"../models/upload/upload-action":316,"../models/upload/upload-configuration":317,"../models/upload/upload-request-wrapper":318,"./response-handler":71,"form-data":361,"ta-json":424}],77:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersClient = void 0;
const constants_1 = require("../constants");
const culture_load_option_1 = require("../contracts/querying/culture-load-option");
const entity_load_configuration_1 = require("../contracts/querying/entity-load-configuration");
const filters_1 = require("../contracts/querying/filters");
const property_load_option_1 = require("../contracts/querying/property-load-option");
const query_1 = require("../contracts/querying/query");
const relation_load_option_1 = require("../contracts/querying/relation-load-option");
const guard_1 = __importDefault(require("../guard"));
const set_password_request_resource_1 = __importDefault(require("../models/set-password-request-resource"));
const type_guards_1 = require("../type-guards");
const response_handler_1 = require("./response-handler");
class UsersClient {
    constructor(client) {
        this._client = client;
    }
    //#region Get users
    getUserIdAsync(username) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(username);
            const user = yield this.getUserAsync(username, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            return user != null ? user.id : null;
        });
    }
    getUserIdsAsync(usernames) {
        return __awaiter(this, void 0, void 0, function* () {
            if (usernames == null)
                return null;
            if (usernames.length === 0)
                return [];
            guard_1.default.arrayNoneNullOrEmptyString(usernames);
            const theQuery = new query_1.Query({
                filter: new filters_1.CompositeQueryFilter({
                    combineMethod: filters_1.CompositeFilterOperator.And,
                    children: [
                        new filters_1.DefinitionQueryFilter({
                            name: constants_1.DEFINITIONS["User"].definitionName,
                            operator: filters_1.ComparisonOperator.Equals,
                        }),
                        new filters_1.PropertyQueryFilter({
                            operator: filters_1.ComparisonOperator.Equals,
                            dataType: filters_1.FilterDataType.String,
                            property: constants_1.DEFINITIONS["User"].username,
                            values: usernames,
                        }),
                    ],
                }),
            });
            const result = yield this._client.querying.queryIdsAsync(theQuery);
            return result.items;
        });
    }
    getUsernamesToIdsMapAsync(usernames) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.arrayNoneNullOrEmptyString(usernames);
            const loadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["User"].username));
            const users = yield this.getUsersAsync(usernames, loadConfiguration);
            const userObject = {};
            if (users.length) {
                users.forEach((user) => {
                    const username = user.getPropertyValue(constants_1.DEFINITIONS["User"].username);
                    userObject[username] = user.id;
                });
            }
            return userObject;
        });
    }
    getUsernameAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            const loadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["User"].username), relation_load_option_1.RelationLoadOption.None);
            const user = yield this.getUserAsync(id, loadConfiguration);
            if (user) {
                const username = user.getPropertyValue(constants_1.DEFINITIONS["User"].username);
                return username;
            }
            else {
                return null;
            }
        });
    }
    getUsernamesAsync(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validIds(ids);
            const loadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["User"].username), relation_load_option_1.RelationLoadOption.None);
            const users = yield this.getUsersAsync(ids, loadConfiguration);
            const usersObject = {};
            if (users && users.length) {
                users.forEach((user) => {
                    const username = user.getPropertyValue(constants_1.DEFINITIONS["User"].username);
                    usersObject[user.id] = username;
                });
            }
            return usersObject;
        });
    }
    getUserAsync(param, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                const theQuery = new query_1.Query({
                    filter: new filters_1.CompositeQueryFilter({
                        combineMethod: filters_1.CompositeFilterOperator.And,
                        children: [
                            new filters_1.DefinitionQueryFilter({
                                name: constants_1.DEFINITIONS["User"].definitionName,
                                operator: filters_1.ComparisonOperator.Equals,
                            }),
                            new filters_1.PropertyQueryFilter({
                                operator: filters_1.ComparisonOperator.Equals,
                                dataType: filters_1.FilterDataType.String,
                                property: constants_1.DEFINITIONS["User"].username,
                                value: param,
                            }),
                        ],
                    }),
                    take: 1,
                });
                const entity = yield this._client.querying.singleAsync(theQuery, loadConfiguration);
                return entity;
            }
            else {
                const user = yield this._client.entities.getAsync(param, loadConfiguration);
                return user;
            }
        });
    }
    getUsersAsync(param, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (param.length === 0) {
                return [];
            }
            else if (type_guards_1.TypeGuards.isNumberArray(param)) {
                guard_1.default.validIds(param);
                const users = yield this._client.entities.getManyAsync(param, loadConfiguration);
                return users;
            }
            else {
                guard_1.default.arrayNoneNullOrEmptyString(param);
                const theQuery = new query_1.Query({
                    filter: new filters_1.CompositeQueryFilter({
                        combineMethod: filters_1.CompositeFilterOperator.And,
                        children: [
                            new filters_1.DefinitionQueryFilter({
                                name: constants_1.DEFINITIONS["User"].definitionName,
                                operator: filters_1.ComparisonOperator.Equals,
                            }),
                            new filters_1.PropertyQueryFilter({
                                operator: filters_1.ComparisonOperator.Equals,
                                dataType: filters_1.FilterDataType.String,
                                property: constants_1.DEFINITIONS["User"].username,
                                values: param,
                            }),
                        ],
                    }),
                });
                const entities = yield this._client.querying.queryAsync(theQuery, loadConfiguration);
                return entities.items;
            }
        });
    }
    //#endregion
    //#region Get user groups
    getUserGroupIdAsync(groupName) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(groupName);
            const group = yield this.getUserGroupAsync(groupName, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            return group != null ? group.id : null;
        });
    }
    getUserGroupIdsAsync(groupNames) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.arrayNoneNullOrEmptyString(groupNames);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["UserGroup"].groupName), relation_load_option_1.RelationLoadOption.None);
            const userGroups = yield this.getUserGroupsAsync(groupNames, loadConfig);
            const userGroupObject = {};
            if (userGroups && userGroups.length) {
                userGroups.forEach((userGroup) => {
                    const groupName = userGroup.getPropertyValue(constants_1.DEFINITIONS["UserGroup"].groupName);
                    userGroupObject[groupName] = userGroup.id;
                });
            }
            return userGroupObject;
        });
    }
    getUserGroupNameAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["UserGroup"].groupName), relation_load_option_1.RelationLoadOption.None);
            const userGroup = yield this.getUserGroupAsync(id, loadConfig);
            if (!userGroup) {
                return null;
            }
            const groupName = userGroup.getPropertyValue(constants_1.DEFINITIONS["UserGroup"].groupName);
            return groupName;
        });
    }
    getUserGroupNamesAsync(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validIds(ids);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["UserGroup"].groupName), relation_load_option_1.RelationLoadOption.None);
            const userGroups = yield this.getUserGroupsAsync(ids, loadConfig);
            const userGroupObject = {};
            if (userGroups && userGroups.length) {
                userGroups.forEach((userGroup) => {
                    const groupName = userGroup.getPropertyValue(constants_1.DEFINITIONS["UserGroup"].groupName);
                    userGroupObject[userGroup.id] = groupName;
                });
            }
            return userGroupObject;
        });
    }
    getUserGroupAsync(param, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                const theQuery = new query_1.Query({
                    filter: new filters_1.CompositeQueryFilter({
                        combineMethod: filters_1.CompositeFilterOperator.And,
                        children: [
                            new filters_1.DefinitionQueryFilter({
                                name: constants_1.DEFINITIONS["UserGroup"].definitionName,
                                operator: filters_1.ComparisonOperator.Equals,
                            }),
                            new filters_1.PropertyQueryFilter({
                                operator: filters_1.ComparisonOperator.Equals,
                                dataType: filters_1.FilterDataType.String,
                                property: constants_1.DEFINITIONS["UserGroup"].groupName,
                                value: param,
                            }),
                        ],
                    }),
                    take: 1,
                });
                const entity = yield this._client.querying.singleAsync(theQuery, loadConfiguration);
                return entity;
            }
            else {
                guard_1.default.validId(param);
                const userGroup = this._client.entities.getAsync(param, loadConfiguration);
                return userGroup;
            }
        });
    }
    getUserGroupsAsync(param, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (param.length === 0) {
                return [];
            }
            else if (type_guards_1.TypeGuards.isNumberArray(param)) {
                guard_1.default.validIds(param);
                const userGroups = yield this._client.entities.getManyAsync(param, loadConfiguration);
                return userGroups;
            }
            else {
                guard_1.default.arrayNoneNullOrEmptyString(param);
                const theQuery = new query_1.Query({
                    filter: new filters_1.CompositeQueryFilter({
                        combineMethod: filters_1.CompositeFilterOperator.And,
                        children: [
                            new filters_1.DefinitionQueryFilter({
                                name: constants_1.DEFINITIONS["UserGroup"].definitionName,
                                operator: filters_1.ComparisonOperator.Equals,
                            }),
                            new filters_1.PropertyQueryFilter({
                                operator: filters_1.ComparisonOperator.Equals,
                                dataType: filters_1.FilterDataType.String,
                                property: constants_1.DEFINITIONS["UserGroup"].groupName,
                                values: param,
                            }),
                        ],
                    }),
                });
                const entities = yield this._client.querying.queryAsync(theQuery, loadConfiguration);
                return entities.items;
            }
        });
    }
    //#endregion
    //#region Password management
    setPasswordAsync(id, password) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            const link = yield this._client.linkHelper.setUserPasswordToLinkAsync(id);
            const content = new set_password_request_resource_1.default(password);
            const response = yield this._client.raw.postAsync(link.href, content);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
    resetPasswordAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            const link = yield this._client.linkHelper.resetPasswordToLinkAsync(id);
            const response = yield this._client.raw.postAsync(link.href);
            response_handler_1.ResponseHandler.handleErrors(response);
        });
    }
}
exports.UsersClient = UsersClient;

},{"../constants":82,"../contracts/querying/culture-load-option":140,"../contracts/querying/entity-load-configuration":147,"../contracts/querying/filters":159,"../contracts/querying/property-load-option":177,"../contracts/querying/query":183,"../contracts/querying/relation-load-option":185,"../guard":224,"../models/set-password-request-resource":313,"../type-guards":322,"./response-handler":71}],78:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionChecker = void 0;
const string_format_1 = __importDefault(require("string-format"));
const error_messages_1 = __importDefault(require("../error-messages"));
const not_supported_error_1 = require("../errors/not-supported-error");
const guard_1 = __importDefault(require("../guard"));
const compatibility_1 = require("../models/versionining/compatibility");
class VersionChecker {
    constructor(client) {
        this.client = client;
        guard_1.default.notNull(client);
    }
    getCompatibility(serverVersion, sdkVersion, minimumSdkVersion) {
        if (this.isDebugVersion(serverVersion) || this.isDebugVersion(sdkVersion)) {
            return compatibility_1.Compatibility.Ok;
        }
        if (sdkVersion.smallerThan(minimumSdkVersion)) {
            return compatibility_1.Compatibility.SdkOld;
        }
        if (sdkVersion.major > serverVersion.major ||
            (sdkVersion.major === serverVersion.major && sdkVersion.minor > serverVersion.minor)) {
            return compatibility_1.Compatibility.SdkNew;
        }
        return compatibility_1.Compatibility.Ok;
    }
    compatibilityCheckAsync(requiredVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiInfo = yield this.client.getApiInfoAsync();
            if (apiInfo.fileVersion.smallerThan(requiredVersion) && !this.isDebugVersion(apiInfo.fileVersion)) {
                throw new not_supported_error_1.NotSupportedError((0, string_format_1.default)(error_messages_1.default.ContentHubClient.NotSupportedFeature, apiInfo.fileVersion, requiredVersion));
            }
        });
    }
    isCompatibleAsync(requiredVersion) {
        return __awaiter(this, void 0, void 0, function* () {
            const apiInfo = yield this.client.getApiInfoAsync();
            if (apiInfo.fileVersion > requiredVersion || this.isDebugVersion(apiInfo.fileVersion)) {
                return true;
            }
            return false;
        });
    }
    isDebugVersion(version) {
        return version.major <= 1;
    }
}
exports.VersionChecker = VersionChecker;

},{"../error-messages":205,"../errors/not-supported-error":214,"../guard":224,"../models/versionining/compatibility":321,"string-format":404}],79:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SETTING = exports.COPY_ENTITY = exports.UPLOAD_FINALIZE = exports.UPLOAD = exports.ALL_FACETS = exports.SEARCH = exports.PAGE_BY_ID = exports.PAGE_BY_IDENTIFIER = exports.AGGREGATES = exports.RESET_PASSWORD = exports.SET_USER_PASSWORD = exports.EXECUTE_SCRIPT = exports.PACKAGE = exports.DOWNLOAD_ORDER_BY_ID = exports.SEND_NOTIFICATION = exports.SEND_CONFIRMATION_MAIL = exports.COMMANDS = exports.EXPLAIN_USER_PERMISSIONS_FOR_ENTITY = exports.PERMISSIONS_FOR_ENTITY = exports.FETCH_JOB_BY_ID = exports.FETCH_JOBS = exports.ENTITY_DEFINITION_BY_ID = exports.ENTITY_DEFINITION_BY_NAME_V2 = exports.ENTITY_DEFINITION_BY_NAME = exports.ENTITY_DEFINITIONS = exports.POLICY_BY_ID = exports.ENTITY_RELATION_BY_NAME = exports.ENTITY_BY_IDENTIFIER = exports.ENTITY_BY_ID = exports.ENTITIES = exports.DATA_SOURCE_BY_NAME = exports.DATA_SOURCES = exports.SCROLL = exports.QUERY = exports.EXTENSION_DATA_KEYS = exports.HEADERS = exports.API_ROOT = void 0;
exports.API_ROOT = "/api";
exports.HEADERS = Object.freeze({
    apiVersion: "X-ApiVersion",
    minimalSchema: "minimalSchema",
    location: "Location",
});
exports.EXTENSION_DATA_KEYS = Object.freeze({
    minimalSchema: "minimal_schema_list",
});
exports.QUERY = Object.freeze({
    templateName: "entities_by_query",
});
exports.SCROLL = Object.freeze({
    templateName: "entities_by_scroll",
});
exports.DATA_SOURCES = Object.freeze({
    templateName: "datasources",
});
exports.DATA_SOURCE_BY_NAME = Object.freeze({
    templateName: "datasource_by_name",
    name: "name",
});
exports.ENTITIES = Object.freeze({
    templateName: "entities",
});
exports.ENTITY_BY_ID = Object.freeze({
    templateName: "entity_by_id",
    id: "id",
    culture: "culture",
});
exports.ENTITY_BY_IDENTIFIER = Object.freeze({
    templateName: "entity_by_identifier",
    identifier: "identifier",
});
exports.ENTITY_RELATION_BY_NAME = Object.freeze({
    templateName: "entity_relation_by_name",
    id: "id",
    name: "name",
});
exports.POLICY_BY_ID = Object.freeze({
    templateName: "policy_by_id",
    id: "id",
});
exports.ENTITY_DEFINITIONS = Object.freeze({
    templateName: "entitydefinitions",
    skip: "skip",
    take: "take",
    filter: "filter",
    definitionsToLoad: "definitionsToLoad",
    definitionsToLoadByName: "definitionsToLoadByName",
    definitionsToLoadById: "definitionsToLoadById",
    viewMode: "viewMode",
    loadPermissions: "loadPermissions",
    includeConditionalMembers: "includeConditionalMembers",
    excludeTaxonomyDefinitions: "excludeTaxonomyDefinitions",
    excludeSystemOwnedDefinitions: "excludeSystemOwnedDefinitions",
});
exports.ENTITY_DEFINITION_BY_NAME = Object.freeze({
    templateName: "entitydefinition_by_name",
    name: "name",
    includeConditionalMembers: "includeConditionalMembers",
    loadPermissions: "loadPermissions",
});
exports.ENTITY_DEFINITION_BY_NAME_V2 = Object.freeze({
    templateName: "entitydefinition_by_name_v2",
    name: "name",
    includeConditionalMembers: "includeConditionalMembers",
    loadPermissions: "loadPermissions",
});
exports.ENTITY_DEFINITION_BY_ID = Object.freeze({
    templateName: "entitydefinition_by_id",
    id: "id",
    includeConditionalMembers: "includeConditionalMembers",
    loadPermissions: "loadPermissions",
});
exports.FETCH_JOBS = Object.freeze({
    templateName: "fetchjobs",
});
exports.FETCH_JOB_BY_ID = Object.freeze({
    templateName: "fetchjobs_by_id",
    id: "id",
});
exports.PERMISSIONS_FOR_ENTITY = Object.freeze({
    templateName: "permissions_for_entity",
    id: "id",
});
exports.EXPLAIN_USER_PERMISSIONS_FOR_ENTITY = Object.freeze({
    templateName: "explain_permissions",
    id: "id",
    userId: "userId",
});
exports.COMMANDS = Object.freeze({
    templateName: "commands",
    folder: "folder",
    command: "command",
});
exports.SEND_CONFIRMATION_MAIL = Object.freeze({
    templateName: "send_confirmation_email",
    userId: "userId",
});
exports.SEND_NOTIFICATION = Object.freeze({
    templateName: "send_notification",
    type: "type",
});
exports.DOWNLOAD_ORDER_BY_ID = Object.freeze({
    templateName: "download_orders_by_id",
    id: "id",
});
exports.PACKAGE = Object.freeze({
    templateName: "package",
});
exports.EXECUTE_SCRIPT = Object.freeze({
    templateName: "execute_script",
    identifier: "identifier",
});
exports.SET_USER_PASSWORD = Object.freeze({
    templateName: "set_user_password",
    userId: "userId",
});
exports.RESET_PASSWORD = Object.freeze({
    templateName: "reset_password",
    userId: "userId",
});
exports.AGGREGATES = Object.freeze({
    templateName: "aggregates",
    name: "name",
    id: "id",
    culture: "culture",
    loadPermissions: "loadPermissions",
    loadOptionLists: "loadOptionLists",
    loadSettings: "loadSettings",
    loadDefinitions: "loadDefinitions",
    loadEntities: "loadEntities",
});
exports.PAGE_BY_IDENTIFIER = Object.freeze({
    templateName: "page_by_identifier",
    identifier: "identifier",
    culture: "culture",
    entityId: "entityId",
});
exports.PAGE_BY_ID = Object.freeze({
    templateName: "page_by_id",
    id: "id",
    culture: "culture",
    entityId: "entityId",
});
exports.SEARCH = Object.freeze({
    templateName: "search",
});
exports.ALL_FACETS = Object.freeze({
    templateName: "allfacets",
});
exports.UPLOAD = Object.freeze({
    templateName: "upload",
});
exports.UPLOAD_FINALIZE = Object.freeze({
    templateName: "upload_finalize",
});
exports.COPY_ENTITY = Object.freeze({
    templateName: "copy",
    id: "id",
});
exports.SETTING = Object.freeze({
    templateName: "setting_by_name",
    category: "category",
    name: "name",
});

},{}],80:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FILE_UPLOAD = exports.ENTITIES = exports.ITERATING = void 0;
exports.ITERATING = Object.freeze({
    pageSize: 50,
});
exports.ENTITIES = Object.freeze({
    skip: 0,
    take: 25,
});
exports.FILE_UPLOAD = Object.freeze({
    chunkSize: 1000000,
});

},{}],81:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicLink = exports.SettingsCategory = exports.FinalLifeCycleStatus = exports.UserGroup = exports.UserProfile = exports.User = exports.MailTemplate = exports.Setting = exports.File = exports.Asset = void 0;
/**
 * Class used to enforce definitionName property on definition constants.
 */
class DefinitionConstant extends Object {
}
/**
 * Freezes the object.
 * Note: Using generics to copy inferred typings to the target.
 * @param obj - A plain object
 */
function createDefinitionConstant(obj) {
    return Object.freeze(obj);
}
exports.Asset = createDefinitionConstant({
    definitionName: "M.Asset",
    // Properties
    title: "Title",
    fileName: "FileName",
    description: "Description",
    renditions: "Renditions",
    extraRenditions: "ExtraRenditions",
    // Relations
    finalLifeCycleStatusToAsset: "FinalLifeCycleStatusToAsset",
});
exports.File = createDefinitionConstant({
    definitionName: "M.File",
});
exports.Setting = createDefinitionConstant({
    definitionName: "M.Setting",
    // Properties
    name: "M.Setting.Name",
    value: "M.Setting.Value",
    schema: "M.Setting.Schema",
    label: "M.Setting.Label",
    // Relations
    settingCategoryToSettings: "SettingCategoryToSettings",
    // Instances
    CultureSetting: Object.freeze({
        name: "Cultures",
    }),
});
exports.MailTemplate = createDefinitionConstant({
    definitionName: "M.Mailing.Template",
});
exports.User = createDefinitionConstant({
    definitionName: "User",
    // Properties
    username: "Username",
    lockoutEndDate: "LockoutEndDate",
    accessFailedCount: "AccessFailedCount",
    lastPasswordChangeDateTime: "LastPasswordChangeDateTime",
    emailConfirmationPending: "EmailConfirmationPending",
    lastLoginDateTime: "LastLoginDateTime",
    userGroupConfiguration: "UserGroupConfiguration",
    // Relations
    userGroupToUser: "UserGroupToUser",
    userToUserProfile: "UserToUserProfile",
});
exports.UserProfile = createDefinitionConstant({
    definitionName: "M.UserProfile",
});
exports.UserGroup = createDefinitionConstant({
    definitionName: "UserGroup",
    // Properties
    groupName: "GroupName",
    Groups: Object.freeze({
        everyone: "Everyone",
        superusers: "Superusers",
    }),
});
exports.FinalLifeCycleStatus = createDefinitionConstant({
    definitionName: "M.Final.LifeCycle.Status",
    // Properties
    statusValue: "StatusValue",
    StatusValues: Object.freeze({
        created: "Created",
        approved: "Approved",
        rejected: "Rejected",
        archived: "Archived",
        underReview: "UnderReview",
    }),
});
exports.SettingsCategory = createDefinitionConstant({
    definitionName: "M.SettingCategory",
    // Properties
    name: "M.SettingCategory.Name",
});
exports.PublicLink = createDefinitionConstant({
    definitionName: "M.PublicLink",
    // Properties
    conversionConfiguration: "ConversionConfiguration",
    expirationDate: "ExpirationDate",
    relativeUrl: "RelativeUrl",
    resource: "resource",
    // Relations
    assetToPublicLink: "AssetToPublicLink",
});

},{}],82:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOTIFICATIONS = exports.DEFINITIONS = exports.DEFAULTS = exports.API = void 0;
const API = __importStar(require("./api"));
exports.API = API;
const DEFAULTS = __importStar(require("./defaults"));
exports.DEFAULTS = DEFAULTS;
const DEFINITIONS = __importStar(require("./definitions"));
exports.DEFINITIONS = DEFINITIONS;
const NOTIFICATIONS = __importStar(require("./notifications"));
exports.NOTIFICATIONS = NOTIFICATIONS;

},{"./api":79,"./defaults":80,"./definitions":81,"./notifications":83}],83:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.REALTIME = void 0;
exports.REALTIME = Object.freeze({
    INFO: Object.freeze({
        body: "body",
        icon: "icon",
    }),
    raw: "Raw",
});

},{}],84:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureInsensitiveProperty = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../dirty-value-calculator"));
const property_1 = require("./property");
class CultureInsensitiveProperty extends property_1.PropertyBase {
    constructor(name, typeInfo, value, hasDataSource = false) {
        super(name, typeInfo, hasDataSource);
        this.isMultiLanguage = false;
        if (value !== undefined) {
            this._value = value; //TODO clone?
        }
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        return this._dirtyValueCalculator.isDirty(this._value);
    }
    getValue() {
        return this._value;
    }
    setValue(value) {
        this._value = value; //TODO clone value?
    }
    getTypeName() {
        return this.constructor.name;
    }
    startTracking() {
        if (this.isTracking) {
            return;
        }
        this.isTracking = true;
        this._dirtyValueCalculator = new dirty_value_calculator_1.default();
        this._dirtyValueCalculator.setOriginalValue(this._value);
    }
    markClean() {
        if (!this.isTracking) {
            return;
        }
        this._dirtyValueCalculator.setOriginalValue(this._value);
    }
}
exports.CultureInsensitiveProperty = CultureInsensitiveProperty;

},{"../../dirty-value-calculator":203,"./property":117}],85:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureSensitiveProperty = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../dirty-value-calculator"));
const guard_1 = __importDefault(require("../../guard"));
const property_1 = require("./property");
class CultureSensitiveProperty extends property_1.PropertyBase {
    constructor(name, typeInfo, loadedCultures, values, hasDataSource = false) {
        super(name, typeInfo, hasDataSource);
        this._dirtyValueCalculators = {};
        guard_1.default.arrayNotEmpty(loadedCultures);
        loadedCultures.forEach(guard_1.default.notInvariantCulture);
        this.isMultiLanguage = true;
        this._loadedCultures = [...new Set(loadedCultures)];
        this._values = this._loadedCultures.reduce((defaultValues, culture) => {
            defaultValues[culture] = null;
            return defaultValues;
        }, {});
        if (values != null) {
            Object.keys(values).forEach((culture) => {
                this._values[culture] = values[culture]; //? Deep copy?
            });
        }
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        for (const cultureString in this._values) {
            const culture = cultureString;
            const value = this._values[culture];
            const isDirty = this._dirtyValueCalculators[culture].isDirty(value);
            if (isDirty) {
                return true;
            }
        }
        return false;
    }
    getTypeName() {
        return this.constructor.name;
    }
    getValue(culture) {
        this.cultureMustBeLoaded(culture);
        if (this._values[culture] != null) {
            return this._values[culture]; //? Add 'casting' wrapper
        }
        return null; //? Allow undefined?
    }
    getValues(cultures) {
        if (cultures !== undefined) {
            guard_1.default.arrayNotEmpty(cultures);
            this.culturesMustBeLoaded(cultures);
            return cultures.reduce((values, culture) => {
                values[culture] = this._values[culture]; //? Add 'casting' wrapper?
                return values;
            }, {});
        }
        else {
            return this._loadedCultures.reduce((values, culture) => {
                values[culture] = this._values[culture]; //? Add 'casting' wrapper?
                return values;
            }, {});
        }
    }
    getCultures() {
        return Object.keys(this._values);
    }
    setValue(culture, value) {
        guard_1.default.notInvariantCulture(culture);
        this.cultureMustBeLoaded(culture);
        this._values[culture] = value;
    }
    startTracking() {
        if (this.isTracking) {
            return;
        }
        this.isTracking = true;
        for (const culture of this._loadedCultures) {
            const dirtyValueCalculator = new dirty_value_calculator_1.default();
            dirtyValueCalculator.setOriginalValue(this._values[culture]);
            this._dirtyValueCalculators[culture] = dirtyValueCalculator;
        }
    }
    markClean() {
        if (!this.isTracking) {
            return;
        }
        for (const culture of this._loadedCultures) {
            this._dirtyValueCalculators[culture].setOriginalValue(this._values[culture]);
        }
    }
    getDirtyCultures() {
        if (!this.isTracking) {
            throw new Error("Can't get dirty cultures when not tracking changes.");
        }
        return this._loadedCultures.reduce((dirtyCultures, culture) => {
            if (this._dirtyValueCalculators[culture].isDirty(this._values[culture])) {
                dirtyCultures.push(culture);
            }
            return dirtyCultures;
        }, []);
    }
    cultureMustBeLoaded(culture) {
        if (!this._loadedCultures.includes(culture)) {
            throw new Error(`Culture ${culture} was not loaded.`);
        }
    }
    culturesMustBeLoaded(cultures) {
        cultures.forEach(culture => this.cultureMustBeLoaded(culture));
    }
}
exports.CultureSensitiveProperty = CultureSensitiveProperty;

},{"../../dirty-value-calculator":203,"../../guard":224,"./property":117}],86:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeInfo = exports.PropertyDataType = void 0;
const PropertyDataType = {
    String: "String",
    Integer: "Integer",
    Long: "Long",
    Decimal: "Decimal",
    Boolean: "Boolean",
    DateTime: "DateTime",
    DateTimeOffset: "DateTimeOffset",
    Json: "Json",
};
exports.PropertyDataType = PropertyDataType;
const DataType = Object.assign(Object.assign({}, PropertyDataType), { Relation: "Relation" });
class TypeInfo {
    constructor(type_, isArray) {
        this.name = type_;
        this.type = type_;
        this.isArray = !!isArray;
    }
}
exports.TypeInfo = TypeInfo;
exports.default = DataType;

},{}],87:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityBase = void 0;
const string_format_1 = __importDefault(require("string-format"));
const ta_json_1 = require("ta-json");
const error_messages_1 = __importDefault(require("../../error-messages"));
const argument_error_1 = require("../../errors/argument-error");
const not_loaded_error_1 = require("../../errors/not-loaded-error");
const schema_error_1 = require("../../errors/schema-error");
const guard_1 = __importDefault(require("../../guard"));
const culture_load_option_1 = require("../querying/culture-load-option");
const entity_load_configuration_1 = require("../querying/entity-load-configuration");
const member_load_option_1 = require("../querying/member-load-option");
const entity_construction_args_1 = require("./entity-construction-args");
const member_definition_type_1 = require("./member-definition-type");
const property_1 = require("./property");
const property_manager_1 = require("./property-manager");
const relation_1 = require("./relation");
const relation_manager_1 = require("./relation-manager");
let EntityBase = class EntityBase {
    constructor(client, args) {
        this._members = {};
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(args);
        guard_1.default.arrayNoneNullOrInvariantCulture(args.cultures);
        guard_1.default.arrayNoneNullOrUndefined(args.properties);
        guard_1.default.arrayNoneNullOrUndefined(args.relations);
        this._client = client;
        this.definitionName = args.definitionName;
        this.id = args.id || undefined;
        this.identifier = args.identifier;
        this.cultures = args.cultures;
        this._propertyManager = new property_manager_1.PropertyManager(client, args.properties, this);
        this._relationManager = new relation_manager_1.RelationManager(client, args.relations, this);
    }
    get properties() {
        return this._propertyManager.getProperties();
    }
    get relations() {
        return this._relationManager.getRelations();
    }
    get canDoLazyLoading() {
        return !this.isNew && !!this.id;
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        for (const dirtyTracker of this.getDirtyTrackingMembers()) {
            if (dirtyTracker.isDirty) {
                return true;
            }
        }
        return false;
    }
    get isNew() {
        return !this.id || this.id <= 0;
    }
    isProperty(member) {
        return member && member.definitionType === member_definition_type_1.MemberDefinitionType.Property;
    }
    getProperty(name) {
        guard_1.default.stringNotNullOrEmpty(name);
        const property = this._propertyManager.getProperty(name);
        if (property == null) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyNotFound, name, this.id, this.definitionName);
            throw new not_loaded_error_1.NotLoadedError(errorMessage);
        }
        return property;
    }
    getPropertyAsync(name, loadOption = member_load_option_1.MemberLoadOption.LazyLoading) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            guard_1.default.notNullOrUndefined(loadOption);
            let property = this._propertyManager.getProperty(name);
            if (property == null && loadOption == member_load_option_1.MemberLoadOption.LazyLoading) {
                property = yield this._propertyManager.loadPropertyAsync(name);
                if (property == null) {
                    const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyDoesNotExist, name, this.definitionName);
                    throw new schema_error_1.SchemaError(errorMessage);
                }
            }
            if (property == null) {
                const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyNotFound, name, this.id, this.definitionName);
                throw new schema_error_1.SchemaError(errorMessage);
            }
            return property;
        });
    }
    getPropertyValue(name, culture) {
        guard_1.default.stringNotNullOrEmpty(name);
        const property = this.getProperty(name);
        if (property == null) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyNotFound, name, this.id, this.definitionName);
            throw new not_loaded_error_1.NotLoadedError(errorMessage);
        }
        else if (property.isMultiLanguage && culture == null) {
            throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureRequired);
        }
        else if (culture != null && !property.isMultiLanguage) {
            throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureNotSupported);
        }
        if (property.isMultiLanguage) {
            const cultureSensitiveProp = property;
            return cultureSensitiveProp.getValue(culture);
        }
        else {
            const cultureInsensitiveProp = property;
            return cultureInsensitiveProp.getValue();
        }
    }
    getPropertyValueAsync(name, loadOption = member_load_option_1.MemberLoadOption.LazyLoading, culture) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            guard_1.default.notNullOrUndefined(loadOption);
            const property = yield this.getPropertyAsync(name, loadOption);
            if (property == null) {
                const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyDoesNotExist, name, this.definitionName);
                throw new schema_error_1.SchemaError(errorMessage);
            }
            else if (property.isMultiLanguage && culture == null) {
                throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureRequired);
            }
            else if (culture != null && !property.isMultiLanguage) {
                throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureNotSupported);
            }
            if (property.isMultiLanguage) {
                const cultureSensitiveProp = property;
                return cultureSensitiveProp.getValue(culture);
            }
            else {
                const cultureInsensitiveProp = property;
                return cultureInsensitiveProp.getValue();
            }
        });
    }
    setPropertyValue(name, value, culture) {
        guard_1.default.stringNotNullOrEmpty(name);
        const property = this._propertyManager.getProperty(name);
        if (property == null) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.PropertyNotFound, name, this.id, this.definitionName);
            throw new not_loaded_error_1.NotLoadedError(errorMessage);
        }
        else if (property.isMultiLanguage && culture == null) {
            throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureRequired);
        }
        else if (culture != null && !property.isMultiLanguage) {
            throw new argument_error_1.ArgumentError(error_messages_1.default.Entity.CultureRequired);
        }
        if (property.isMultiLanguage) {
            property.setValue(culture, value);
        }
        else {
            property.setValue(value);
        }
    }
    getRelation(name, role, _returnNull = false) {
        guard_1.default.stringNotNullOrEmpty(name);
        const relation = this._relationManager.getRelation(name, role);
        if (relation == null) {
            if (_returnNull) {
                return null;
            }
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.RelationNotFound, name, this.id, this.definitionName);
            throw new not_loaded_error_1.NotLoadedError(errorMessage);
        }
        else if (relation_1.RelationBase.isChildToManyParentsRelation(relation)) {
            return relation;
        }
        else if (relation_1.RelationBase.isChildToOneParentRelation(relation)) {
            return relation;
        }
        else if (relation_1.RelationBase.isParentToManyChildrenRelation(relation)) {
            return relation;
        }
        else if (relation_1.RelationBase.isParentToOneChildRelation(relation)) {
            return relation;
        }
        return null;
    }
    getRelationAsync(name, role, loadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const relation = this.getRelation(name, role, true);
            if (relation == null && loadOption == member_load_option_1.MemberLoadOption.LazyLoading) {
                {
                    // Scoped to be able to redefine relation as type RelationType does not match IRelation. //TODO generics?
                    const relation = yield this._relationManager.loadRelationAsync(name, role);
                    if (relation == null) {
                        const errorMessage = (0, string_format_1.default)(error_messages_1.default.Entity.RelationDoesNotExist, name, this.definitionName);
                        throw new schema_error_1.SchemaError(errorMessage);
                    }
                    if (relation_1.RelationBase.isChildToManyParentsRelation(relation)) {
                        return relation;
                    }
                    else if (relation_1.RelationBase.isChildToOneParentRelation(relation)) {
                        return relation;
                    }
                    else if (relation_1.RelationBase.isParentToManyChildrenRelation(relation)) {
                        return relation;
                    }
                    else if (relation_1.RelationBase.isParentToOneChildRelation(relation)) {
                        return relation;
                    }
                }
            }
            return relation;
        });
    }
    loadPropertiesAsync(propertyLoadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canDoLazyLoading || propertyLoadOption == null) {
                return false;
            }
            return this._propertyManager.loadPropertiesAsync(propertyLoadOption);
        });
    }
    loadRelationsAsync(relationLoadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canDoLazyLoading || relationLoadOption == null) {
                return false;
            }
            return this._relationManager.loadRelationsAsync(relationLoadOption);
        });
    }
    loadMembersAsync(propertyLoadOption, relationLoadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canDoLazyLoading) {
                return false;
            }
            const hasMissingProperties = this._propertyManager.hasMissingProperties(propertyLoadOption);
            const hasMissingRelations = this._relationManager.hasMissingRelations(relationLoadOption);
            if (!hasMissingProperties && !hasMissingRelations) {
                return false;
            }
            const cultureLoadOption = new culture_load_option_1.CultureLoadOption([...this.cultures]);
            const loadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration(cultureLoadOption, propertyLoadOption, relationLoadOption);
            const tempEntity = yield this._client.entities.getAsync(this.id, loadConfiguration);
            // Import missing members
            this._propertyManager.importMissingProperties(tempEntity);
            this._relationManager.importMissingRelations(tempEntity);
            return true;
        });
    }
    getEntityDefinitionAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this._client.entityDefinitions.getCachedAsync(this.definitionName));
        });
    }
    startTracking() {
        if (this.isTracking)
            return;
        this.isTracking = true;
        for (const member of this.getDirtyTrackingMembers()) {
            member.startTracking();
        }
    }
    markClean() {
        for (const member of this.getDirtyTrackingMembers()) {
            member.markClean();
        }
    }
    getDirtyTrackingMembers() {
        const properties = this._propertyManager.getProperties();
        const relations = this._relationManager.getRelations();
        const list = [...properties, ...relations];
        return list;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], EntityBase.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", Object)
], EntityBase.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("hasPublicLink"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "hasPublicLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("gatewayLinks"),
    __metadata("design:type", Object)
], EntityBase.prototype, "gatewayLinks", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("publicLink"),
    __metadata("design:type", String)
], EntityBase.prototype, "publicLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("publicCollectionLink"),
    __metadata("design:type", String)
], EntityBase.prototype, "publicCollectionLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("locked_by"),
    __metadata("design:type", Object)
], EntityBase.prototype, "lockedBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("locked_on"),
    __metadata("design:type", Object)
], EntityBase.prototype, "lockedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_root_taxonomy_item"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "isRootTaxonomyItem", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_root"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "isPathRoot", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("inherits_security"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "inheritsSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("version"),
    __metadata("design:type", Number)
], EntityBase.prototype, "version", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cultures"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityBase.prototype, "cultures", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_current_user_default"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "isCurrentUserDefault", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_enabled"),
    __metadata("design:type", Boolean)
], EntityBase.prototype, "isEnabled", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modules"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityBase.prototype, "modules", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("combinedPublishStatus"),
    __metadata("design:type", String)
], EntityBase.prototype, "combinedPublishStatus", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("combinedPublishStatusDetails"),
    __metadata("design:type", String)
], EntityBase.prototype, "combinedPublishStatusDetails", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("properties"),
    (0, ta_json_1.JsonElementType)(property_1.PropertyBase),
    __metadata("design:type", Array)
], EntityBase.prototype, "_properties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relations"),
    (0, ta_json_1.JsonElementType)(relation_1.RelationBase),
    __metadata("design:type", Array)
], EntityBase.prototype, "_relations", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    __metadata("design:type", Date)
], EntityBase.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", Number)
], EntityBase.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    __metadata("design:type", Date)
], EntityBase.prototype, "modifiedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", Number)
], EntityBase.prototype, "modifiedBy", void 0);
EntityBase = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object, entity_construction_args_1.EntityConstructionArgs])
], EntityBase);
exports.EntityBase = EntityBase;

},{"../../error-messages":205,"../../errors/argument-error":206,"../../errors/not-loaded-error":213,"../../errors/schema-error":215,"../../guard":224,"../querying/culture-load-option":140,"../querying/entity-load-configuration":147,"../querying/member-load-option":174,"./entity-construction-args":88,"./member-definition-type":95,"./property":117,"./property-manager":116,"./relation":123,"./relation-manager":121,"string-format":404,"ta-json":424}],88:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityConstructionArgs = void 0;
class EntityConstructionArgs {
    constructor(definitionName, init) {
        this.id = null;
        this.identifier = null;
        this.properties = [];
        this.relations = [];
        this.cultures = [];
        this.renditions = [];
        this.relatedPaths = [];
        this.definitionName = definitionName;
        Object.assign(this, init);
    }
}
exports.EntityConstructionArgs = EntityConstructionArgs;

},{}],89:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinition = void 0;
const string_format_1 = __importDefault(require("string-format"));
const ta_json_1 = require("ta-json");
const error_messages_1 = __importDefault(require("../../error-messages"));
const invalid_operation_error_1 = require("../../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../../guard"));
const member_group_1 = require("./member-group");
const property_definition_1 = require("./property-definition");
const relation_definition_1 = require("./relation-definition");
let EntityDefinition = class EntityDefinition {
    constructor(init) {
        this.isSystemOwned = false;
        Object.assign(this, init);
        this.memberGroups = this.memberGroups || [];
        this.labels = this.labels || {};
    }
    get isNew() {
        return !this.id;
    }
    getPropertyDefinition(name) {
        guard_1.default.stringNotNullOrEmpty(name);
        return (this.getPropertyDefinitions().find(propertyDefinition => {
            return propertyDefinition.name.toLowerCase() === name.toLowerCase();
        }) || null);
    }
    getPropertyDefinitions() {
        return this.getMemberDefinitions(property_definition_1.PropertyDefinition);
    }
    getRelationDefinition(name, role) {
        guard_1.default.stringNotNullOrEmpty(name);
        const relationDefinition = this.getRelationDefinitions().find(relationDefinition => {
            return (relationDefinition.name.toLowerCase() === name.toLowerCase() &&
                (role == null || relationDefinition.role === role));
        });
        if ((relationDefinition === null || relationDefinition === void 0 ? void 0 : relationDefinition.associatedEntityDefinitionName) === this.name && role == null) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.NoRoleSpecifiedForSelfRelation, name);
            throw new invalid_operation_error_1.InvalidOperationError(errorMessage);
        }
        return relationDefinition !== null && relationDefinition !== void 0 ? relationDefinition : null;
    }
    getRelationDefinitions() {
        return this.getMemberDefinitions(relation_definition_1.RelationDefinition);
    }
    getMemberDefinitions(typeT) {
        const members = [];
        for (const group of this.memberGroups) {
            for (const member of group.memberDefinitions) {
                if (member instanceof typeT) {
                    members.push(member);
                }
            }
        }
        return members;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], EntityDefinition.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], EntityDefinition.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", Number)
], EntityDefinition.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    __metadata("design:type", Date)
], EntityDefinition.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", Number)
], EntityDefinition.prototype, "modifiedBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    __metadata("design:type", Date)
], EntityDefinition.prototype, "modifiedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("display_template"),
    __metadata("design:type", String)
], EntityDefinition.prototype, "displayTemplate", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_item_definition"),
    __metadata("design:type", Boolean)
], EntityDefinition.prototype, "isTaxonomyItemDefinition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_enabled_definition"),
    __metadata("design:type", Boolean)
], EntityDefinition.prototype, "isPathEnabledDefinition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_manual_sorting_allowed"),
    __metadata("design:type", Boolean)
], EntityDefinition.prototype, "isManualSortingAllowed", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], EntityDefinition.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("member_groups"),
    (0, ta_json_1.JsonElementType)(member_group_1.MemberGroup),
    __metadata("design:type", Array)
], EntityDefinition.prototype, "memberGroups", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], EntityDefinition.prototype, "labels", void 0);
EntityDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], EntityDefinition);
exports.EntityDefinition = EntityDefinition;

},{"../../error-messages":205,"../../errors/invalid-operation-error":210,"../../guard":224,"./member-group":97,"./property-definition":106,"./relation-definition":120,"string-format":404,"ta-json":424}],90:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const ta_json_1 = require("ta-json");
const base_types_1 = require("../../base-types");
const response_handler_1 = require("../../clients/response-handler");
const error_messages_1 = __importDefault(require("../../error-messages"));
const invalid_operation_error_1 = require("../../errors/invalid-operation-error");
const guard_1 = __importDefault(require("../../guard"));
const permissions_resource_1 = require("../../models/permissions-resource");
const entity_base_1 = require("./entity-base");
const entity_construction_args_1 = require("./entity-construction-args");
let Entity = class Entity extends entity_base_1.EntityBase {
    constructor(client, args) {
        super(client, args);
        this._renditions = new base_types_1.CaseInsensitiveStringMap();
        if (args.renditions != null) {
            for (const rendition of args.renditions) {
                this._renditions[rendition.name] = rendition;
            }
        }
        this._relatedPaths = new base_types_1.CaseInsensitiveStringMap();
        if (args.relatedPaths != null) {
            for (const relatedPath of args.relatedPaths) {
                this._relatedPaths[relatedPath.name] = relatedPath;
            }
        }
    }
    get renditions() {
        return Object.values(this._renditions);
    }
    get relatedPaths() {
        return Object.values(this._relatedPaths);
    }
    getRendition(name) {
        var _a, _b;
        guard_1.default.stringNotNullOrEmpty(name);
        const rendition = (_b = (_a = this._renditions) === null || _a === void 0 ? void 0 : _a[name]) !== null && _b !== void 0 ? _b : null;
        return rendition;
    }
    getRelatedPath(name) {
        var _a, _b;
        guard_1.default.stringNotNullOrEmpty(name);
        const relatedPath = (_b = (_a = this._relatedPaths) === null || _a === void 0 ? void 0 : _a[name]) !== null && _b !== void 0 ? _b : null;
        return relatedPath;
    }
    getPermissionsAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            //TODO HashSet?
            if (this.isNew) {
                throw new invalid_operation_error_1.InvalidOperationError(error_messages_1.default.Entity.NoPermissionsOnNewEntity);
            }
            const link = yield this._client.linkHelper.permissionsForEntityToLinkAsync(this.id);
            const response = yield this._client.raw.getAsync(link.href);
            response_handler_1.ResponseHandler.handleErrors(response);
            const resource = ta_json_1.TaJson.deserialize(response.content, permissions_resource_1.PermissionsResource);
            return resource.permissions || [];
        });
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("renditions"),
    __metadata("design:type", base_types_1.CaseInsensitiveStringMap)
], Entity.prototype, "_renditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("related_paths"),
    __metadata("design:type", base_types_1.CaseInsensitiveStringMap)
], Entity.prototype, "_relatedPaths", void 0);
Entity = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object, entity_construction_args_1.EntityConstructionArgs])
], Entity);
exports.Entity = Entity;

},{"../../base-types":50,"../../clients/response-handler":71,"../../error-messages":205,"../../errors/invalid-operation-error":210,"../../guard":224,"../../models/permissions-resource":283,"./entity-base":87,"./entity-construction-args":88,"ta-json":424}],91:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./resource"), exports);
__exportStar(require("./data-type"), exports);
__exportStar(require("./json-content-type"), exports);
__exportStar(require("./string-content-type"), exports);
__exportStar(require("./member-definition-type"), exports);
__exportStar(require("./member-definition"), exports);
__exportStar(require("./member-group"), exports);
__exportStar(require("./member-condition"), exports);
__exportStar(require("./relation-cardinality"), exports);
__exportStar(require("./relation-role"), exports);
__exportStar(require("./relation-definition"), exports);
__exportStar(require("./property-definition"), exports);
__exportStar(require("./property-definitions"), exports);
__exportStar(require("./entity-definition"), exports);

},{"./data-type":86,"./entity-definition":89,"./json-content-type":92,"./member-condition":94,"./member-definition":96,"./member-definition-type":95,"./member-group":97,"./property-definition":106,"./property-definitions":111,"./relation-cardinality":118,"./relation-definition":120,"./relation-role":122,"./resource":129,"./string-content-type":130}],92:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonContentType = void 0;
/**
 * Types of string content.
 */
var JsonContentType;
(function (JsonContentType) {
    /**
     * Content represents renditions.
     */
    JsonContentType[JsonContentType["Renditions"] = 0] = "Renditions";
})(JsonContentType = exports.JsonContentType || (exports.JsonContentType = {}));

},{}],93:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LazyLoadingManager = void 0;
const error_messages_1 = __importDefault(require("../../error-messages"));
const guard_1 = __importDefault(require("../../guard"));
class LazyLoadingManager {
    static ensureLazyLoadingIsPossible(entity) {
        guard_1.default.notNullOrUndefined(entity);
        if (!entity.canDoLazyLoading) {
            throw error_messages_1.default.Entity.CannotLazyLoad;
        }
    }
}
exports.LazyLoadingManager = LazyLoadingManager;

},{"../../error-messages":205,"../../guard":224}],94:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMemberCondition = exports.BooleanMemberCondition = exports.StringMemberCondition = exports.NoAncestorMemberCondition = exports.MemberCondition = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
let MemberCondition = class MemberCondition {
    constructor(memberName) {
        this.memberName = memberName;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("member"),
    __metadata("design:type", String)
], MemberCondition.prototype, "memberName", void 0);
MemberCondition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String])
], MemberCondition);
exports.MemberCondition = MemberCondition;
// // /**
// //  * Condition triggered on the value of the property member or ancestor id of the relation.
// //  */
// // export class MemberValueCondition extends MemberCondition {
// //     /**
// //      * Non {@link null} case insensitive and culture agnostic value which is compared against
// //      * entity property value or relation member taxonomy ancestors. Possible types of this
// //      * value are {@link string} or {@link number}.
// //      * Note that an empty string is treated as unspecified value not triggering the condition.
// //      */
// //     @JsonProperty("value")
// //     value: number|string;
// //
// //     constructor(memberName: string, value: number|string) {
// //         super(memberName);
// //         Guard.notNullOrUndefined(value);
// //
// //         this.value = value;
// //     }
// // }
/**
 * Condition triggered if the relation does not have ancestor of given definition id.
 */
let NoAncestorMemberCondition = class NoAncestorMemberCondition extends MemberCondition {
    constructor(memberName, definitionId) {
        super(memberName);
        this.definitionId = definitionId;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definitionId"),
    __metadata("design:type", Number)
], NoAncestorMemberCondition.prototype, "definitionId", void 0);
NoAncestorMemberCondition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Number])
], NoAncestorMemberCondition);
exports.NoAncestorMemberCondition = NoAncestorMemberCondition;
/**
 * Condition triggered on the value of the property.
 */
let StringMemberCondition = class StringMemberCondition extends MemberCondition {
    constructor(memberName, value) {
        super(memberName);
        guard_1.default.notNullOrUndefined(value);
        this.value = value;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", String)
], StringMemberCondition.prototype, "value", void 0);
StringMemberCondition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String])
], StringMemberCondition);
exports.StringMemberCondition = StringMemberCondition;
/**
 * Condition triggered on the value of the property.
 */
let BooleanMemberCondition = class BooleanMemberCondition extends MemberCondition {
    constructor(memberName, value) {
        super(memberName);
        guard_1.default.notNullOrUndefined(value);
        this.value = value;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Boolean)
], BooleanMemberCondition.prototype, "value", void 0);
BooleanMemberCondition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Boolean])
], BooleanMemberCondition);
exports.BooleanMemberCondition = BooleanMemberCondition;
/**
 * Condition triggered on ancestor id of the relation.
 */
let RelationMemberCondition = class RelationMemberCondition extends MemberCondition {
    constructor(memberName, entityId) {
        super(memberName);
        this.entityId = entityId;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("entityId"),
    __metadata("design:type", Number)
], RelationMemberCondition.prototype, "entityId", void 0);
RelationMemberCondition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Number])
], RelationMemberCondition);
exports.RelationMemberCondition = RelationMemberCondition;

},{"../../guard":224,"ta-json":424}],95:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberDefinitionType = void 0;
/**
 * Describes the type of member.
 */
var MemberDefinitionType;
(function (MemberDefinitionType) {
    /**
     * For properties.
     */
    MemberDefinitionType[MemberDefinitionType["Property"] = 0] = "Property";
    /**
     * For relations.
     */
    MemberDefinitionType[MemberDefinitionType["Relation"] = 1] = "Relation";
})(MemberDefinitionType = exports.MemberDefinitionType || (exports.MemberDefinitionType = {}));

},{}],96:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("./data-type"));
const member_condition_1 = require("./member-condition");
const member_definition_type_1 = require("./member-definition-type");
let MemberDefinition = class MemberDefinition {
    constructor(name, type) {
        this.allowUpdates = true;
        this.labels = {};
        this.helpText = {};
        this.conditions = [];
        this.name = name;
        this.type = type;
    }
    get isConditional() {
        return !!this.conditions.length;
    }
    static isPropertyDefinition(definition) {
        return definition.definitionType === member_definition_type_1.MemberDefinitionType.Property;
    }
    static isStringPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.String;
    }
    static isIntegerPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.Integer;
    }
    static isLongPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.Long;
    }
    static isDecimalPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.Decimal;
    }
    static isBooleanPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.Boolean;
    }
    static isDateTimePropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.DateTime;
    }
    static isDateTimeOffsetPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.DateTimeOffset;
    }
    static isJsonPropertyDefinition(definition) {
        return this.isPropertyDefinition(definition) && definition.dataType === data_type_1.default.Json;
    }
    static isRelationDefinition(definition) {
        return definition.definitionType === member_definition_type_1.MemberDefinitionType.Relation;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], MemberDefinition.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], MemberDefinition.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("allow_updates"),
    __metadata("design:type", Boolean)
], MemberDefinition.prototype, "allowUpdates", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], MemberDefinition.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_secured"),
    __metadata("design:type", Boolean)
], MemberDefinition.prototype, "isSecured", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], MemberDefinition.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("helptext"),
    __metadata("design:type", Object)
], MemberDefinition.prototype, "helpText", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditions"),
    (0, ta_json_1.JsonElementType)(member_condition_1.MemberCondition),
    __metadata("design:type", Array)
], MemberDefinition.prototype, "conditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_trigger_conditional_members"),
    __metadata("design:type", Boolean)
], MemberDefinition.prototype, "canTriggerConditionalMembers", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_write"),
    __metadata("design:type", Boolean)
], MemberDefinition.prototype, "canWrite", void 0);
MemberDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorProperty)("type"),
    __metadata("design:paramtypes", [String, String])
], MemberDefinition);
exports.MemberDefinition = MemberDefinition;

},{"./data-type":86,"./member-condition":94,"./member-definition-type":95,"ta-json":424}],97:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberGroup = void 0;
const ta_json_1 = require("ta-json");
const member_condition_converter_1 = require("../../converters/member-condition-converter");
const member_condition_1 = require("./member-condition");
const member_definition_1 = require("./member-definition");
let MemberGroup = class MemberGroup {
    constructor(init) {
        this.conditions = [];
        this.memberDefinitions = [];
        this.labels = {};
        Object.assign(this, init);
    }
    // @JsonProperty("is_conditional")
    get isConditional() {
        return this.conditions != null && this.conditions.length > 0;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], MemberGroup.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("content_group"),
    __metadata("design:type", String)
], MemberGroup.prototype, "contentGroup", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], MemberGroup.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditions"),
    (0, ta_json_1.JsonElementType)(member_condition_1.MemberCondition),
    (0, ta_json_1.JsonConverter)(member_condition_converter_1.MemberConditionConverter),
    __metadata("design:type", Array)
], MemberGroup.prototype, "conditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_secured"),
    __metadata("design:type", Boolean)
], MemberGroup.prototype, "isSecured", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("members"),
    (0, ta_json_1.JsonElementType)(member_definition_1.MemberDefinition),
    __metadata("design:type", Array)
], MemberGroup.prototype, "memberDefinitions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], MemberGroup.prototype, "labels", void 0);
MemberGroup = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], MemberGroup);
exports.MemberGroup = MemberGroup;

},{"../../converters/member-condition-converter":195,"./member-condition":94,"./member-definition":96,"ta-json":424}],98:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const member_definition_type_1 = require("./member-definition-type");
class MemberBase {
    constructor(name, definitionType) {
        guard_1.default.stringNotNullOrEmpty(name);
        this.name = name;
        this.definitionType = definitionType;
    }
    /**
     * Returns a string representation of the current member instance.
     *
     * @remarks
     * Can not be used for serialization. Only useful during debugging or testing.
     * Returned format: \<member name\> ({@link MemberDefinitionType}) (\<constructor.name\>)
     */
    toString() {
        return `${this.name} (${member_definition_type_1.MemberDefinitionType[this.definitionType]}) (${this.constructor.name})`;
    }
}
exports.MemberBase = MemberBase;

},{"../../guard":224,"./member-definition-type":95}],99:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const option_list_value_base_1 = __importDefault(require("./option-list-value-base"));
class FlatOptionListValue extends option_list_value_base_1.default {
}
exports.default = FlatOptionListValue;

},{"./option-list-value-base":105}],100:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const option_list_base_1 = require("./option-list-base");
const option_list_type_1 = require("./option-list-type");
class FlatOptionList extends option_list_base_1.TypedOptionListBase {
    constructor() {
        super(...arguments);
        this.type = option_list_type_1.OptionListType.Flat;
    }
}
exports.default = FlatOptionList;

},{"./option-list-base":103,"./option-list-type":104}],101:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const option_list_base_1 = require("./option-list-base");
const option_list_type_1 = require("./option-list-type");
class HierarchicalOptionList extends option_list_base_1.TypedOptionListBase {
    constructor() {
        super(...arguments);
        this.type = option_list_type_1.OptionListType.Hierarchical;
    }
}
exports.default = HierarchicalOptionList;

},{"./option-list-base":103,"./option-list-type":104}],102:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const option_list_value_base_1 = __importDefault(require("./option-list-value-base"));
class HierarchicalOptionListValue extends option_list_value_base_1.default {
    constructor(identifier, labels, values) {
        super(identifier, labels);
        //TODO add 'not all null' guard for values
        this.values = values || [];
    }
}
exports.default = HierarchicalOptionListValue;

},{"./option-list-value-base":105}],103:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedOptionListBase = exports.OptionListBase = void 0;
const guard_1 = __importDefault(require("../../../guard"));
class OptionListBase {
    constructor(name, labels) {
        guard_1.default.stringNotNullOrEmpty(name);
        if (labels) {
            guard_1.default.arrayNoneNullOrUndefined(Object.values(labels));
            guard_1.default.arrayNoneNullOrInvariantCulture(Object.keys(labels));
        }
        this.name = name;
        this.labels = labels || {};
    }
}
exports.OptionListBase = OptionListBase;
class TypedOptionListBase extends OptionListBase {
    constructor(name, labels, values) {
        super(name, labels);
        values && guard_1.default.arrayNoneNullOrUndefined(values);
        this.values = values || [];
    }
    getOptionListValues() {
        return this.values;
    }
    setOptionListValues(values) {
        this.values = values;
    }
}
exports.TypedOptionListBase = TypedOptionListBase;

},{"../../../guard":224}],104:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionListType = void 0;
/**
 * Types of option lists.
 */
var OptionListType;
(function (OptionListType) {
    /**
     * Does not allow nesting of values.
     */
    OptionListType["Flat"] = "Flat";
    /**
     * Allows nesting of values.
     */
    OptionListType["Hierarchical"] = "Hierarchical";
})(OptionListType = exports.OptionListType || (exports.OptionListType = {}));

},{}],105:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const guard_1 = __importDefault(require("../../../guard"));
class OptionListValueBase {
    constructor(identifier, labels) {
        guard_1.default.stringNotNullOrEmpty(identifier);
        this.identifier = identifier;
        this.labels = labels || {};
    }
}
exports.default = OptionListValueBase;

},{"../../../guard":224}],106:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const conditional_validation_resource_1 = require("../../models/conditional-validation-resource");
const data_type_1 = require("./data-type");
const member_definition_1 = require("./member-definition");
const member_definition_type_1 = require("./member-definition-type");
let PropertyDefinition = class PropertyDefinition extends member_definition_1.MemberDefinition {
    constructor(name, type) {
        super(name, type);
    }
    get dataType() {
        return this.type;
    }
    get definitionType() {
        return member_definition_type_1.MemberDefinitionType.Property;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("is_indexed"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "indexed", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_mandatory"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "isMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_multilanguage"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "isMultiLanguage", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_multivalue"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "isMultiValue", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_unique"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "isUnique", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("boost"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "boost", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("included_in_content"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "includeInContent", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("included_in_completion"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "includeInCompletion", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ignore_on_export"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "ignoreOnExport", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("stored_in_graph"),
    __metadata("design:type", Boolean)
], PropertyDefinition.prototype, "storedInGraph", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_1.ConditionalValidationResource)
], PropertyDefinition.prototype, "conditionalValidation", void 0);
PropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String])
], PropertyDefinition);
exports.PropertyDefinition = PropertyDefinition;
// Export all property definition types (required for (de)serialization).
__exportStar(require("./property-definitions/"), exports);

},{"../../models/conditional-validation-resource":259,"./data-type":86,"./member-definition":96,"./member-definition-type":95,"./property-definitions/":111,"ta-json":424}],107:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BooleanPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * Boolean property definition.
 */
let BooleanPropertyDefinition = class BooleanPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Boolean);
        Object.assign(this, init);
    }
};
BooleanPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Boolean),
    __metadata("design:paramtypes", [String, Object])
], BooleanPropertyDefinition);
exports.BooleanPropertyDefinition = BooleanPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],108:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimePropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * DateTime property definition.
 */
let DateTimePropertyDefinition = class DateTimePropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.DateTime);
        Object.assign(this, init);
    }
};
DateTimePropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.DateTime),
    __metadata("design:paramtypes", [String, Object])
], DateTimePropertyDefinition);
exports.DateTimePropertyDefinition = DateTimePropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],109:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeOffsetPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * DateTimeOffset property definition.
 */
let DateTimeOffsetPropertyDefinition = class DateTimeOffsetPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.DateTimeOffset);
        Object.assign(this, init);
    }
};
DateTimeOffsetPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.DateTimeOffset),
    __metadata("design:paramtypes", [String, Object])
], DateTimeOffsetPropertyDefinition);
exports.DateTimeOffsetPropertyDefinition = DateTimeOffsetPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],110:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecimalPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * Decimal property definition.
 */
let DecimalPropertyDefinition = class DecimalPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Decimal);
        Object.assign(this, init);
    }
};
DecimalPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Decimal),
    __metadata("design:paramtypes", [String, Object])
], DecimalPropertyDefinition);
exports.DecimalPropertyDefinition = DecimalPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],111:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./boolean-property-definition"), exports);
__exportStar(require("./datetime-property-definition"), exports);
__exportStar(require("./datetimeoffset-property-definition"), exports);
__exportStar(require("./decimal-property-definition"), exports);
__exportStar(require("./integer-property-definition"), exports);
__exportStar(require("./json-property-definition"), exports);
__exportStar(require("./long-property-definition"), exports);
__exportStar(require("./string-property-definition"), exports);

},{"./boolean-property-definition":107,"./datetime-property-definition":108,"./datetimeoffset-property-definition":109,"./decimal-property-definition":110,"./integer-property-definition":112,"./json-property-definition":113,"./long-property-definition":114,"./string-property-definition":115}],112:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegerPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * Integer property definition.
 */
let IntegerPropertyDefinition = class IntegerPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Integer);
        Object.assign(this, init);
    }
};
IntegerPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Integer),
    __metadata("design:paramtypes", [String, Object])
], IntegerPropertyDefinition);
exports.IntegerPropertyDefinition = IntegerPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],113:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * Json property definition.
 */
let JsonPropertyDefinition = class JsonPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Json);
        this.contentType = null;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("content_type"),
    __metadata("design:type", Object)
], JsonPropertyDefinition.prototype, "contentType", void 0);
JsonPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)("Json"),
    __metadata("design:paramtypes", [String, Object])
], JsonPropertyDefinition);
exports.JsonPropertyDefinition = JsonPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],114:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
/**
 * Long property definition.
 */
let LongPropertyDefinition = class LongPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Long);
        Object.assign(this, init);
    }
};
LongPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Long),
    __metadata("design:paramtypes", [String, Object])
], LongPropertyDefinition);
exports.LongPropertyDefinition = LongPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"ta-json":424}],115:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringPropertyDefinition = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../data-type"));
const property_definition_1 = require("../property-definition");
const string_content_type_1 = require("../string-content-type");
/**
 *
 * String property definition.
 */
let StringPropertyDefinition = class StringPropertyDefinition extends property_definition_1.PropertyDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.String);
        Object.assign(this, init);
    }
    /**
     * The name of the {@link IOptionList} to get possible values from.
     *
     * @remarks
     * Is null when there is no attached option list.
     */
    get optionListName() {
        return this.dataSourceName;
    }
    set optionListName(value) {
        this.dataSourceName = value;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("content_type"),
    __metadata("design:type", String)
], StringPropertyDefinition.prototype, "contentType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("validation_expression"),
    __metadata("design:type", Object)
], StringPropertyDefinition.prototype, "validationExpression", void 0);
StringPropertyDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.String),
    __metadata("design:paramtypes", [String, Object])
], StringPropertyDefinition);
exports.StringPropertyDefinition = StringPropertyDefinition;

},{"../data-type":86,"../property-definition":106,"../string-content-type":130,"ta-json":424}],116:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyManager = void 0;
const base_types_1 = require("../../base-types");
const guard_1 = __importDefault(require("../../guard"));
const mapping_utilities_1 = require("../../mappers/mapping-utilities");
const entity_load_configuration_1 = require("../querying/entity-load-configuration");
const load_options_1 = require("../querying/load-options");
const property_load_option_1 = require("../querying/property-load-option");
const relation_load_option_1 = require("../querying/relation-load-option");
const lazy_loading_manager_1 = require("./lazy-loading-manager");
class PropertyManager {
    constructor(client, properties, entity) {
        guard_1.default.notNullOrUndefined(entity);
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(properties);
        this._client = client;
        this._entity = entity;
        this._properties = new base_types_1.CaseInsensitiveStringMap();
        for (const property of properties) {
            this._properties[property.name] = property;
        }
    }
    get count() {
        return Object.keys(this._properties).length;
    }
    getProperty(name) {
        guard_1.default.stringNotNullOrEmpty(name);
        return this._properties[name] || null;
    }
    getProperties() {
        return [...Object.values(this._properties)];
    }
    loadPropertyAsync(propertyName) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(propertyName);
            lazy_loading_manager_1.LazyLoadingManager.ensureLazyLoadingIsPossible(this._entity);
            // Check if it is already loaded
            let property = this._properties[propertyName];
            if (property) {
                return property;
            }
            // Load the property
            property = yield this.fetchPropertyAsync(propertyName);
            // Add the property
            if (property != null) {
                this._properties[property.name] = property;
            }
            return property;
        });
    }
    loadPropertiesAsync(propertyLoadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(propertyLoadOption);
            lazy_loading_manager_1.LazyLoadingManager.ensureLazyLoadingIsPossible(this._entity);
            if (!this.hasMissingProperties(propertyLoadOption)) {
                return false;
            }
            const cultureLoadOption = mapping_utilities_1.MappingUtilities.culturesToLoadOption([...this._entity.cultures]);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(cultureLoadOption, propertyLoadOption, relation_load_option_1.RelationLoadOption.None);
            const tempEntity = yield this._client.entities.getAsync(this._entity.id, loadConfig);
            this.importMissingProperties(tempEntity);
            return true;
        });
    }
    hasMissingProperties(propertyLoadOption) {
        if (propertyLoadOption == null ||
            propertyLoadOption.loadOption === load_options_1.LoadOption.None ||
            propertyLoadOption.properties == null ||
            propertyLoadOption.properties.length === 0) {
            return false;
        }
        if (propertyLoadOption.loadOption === load_options_1.LoadOption.All) {
            // We don't have any info about the definition here. (Same logic as in the C# SDK)
            return true;
        }
        return propertyLoadOption.properties.some(requestedPropertyName => !this._properties[requestedPropertyName]);
    }
    importMissingProperties(entity) {
        guard_1.default.notNullOrUndefined(entity);
        for (const property of entity.properties) {
            if (!this._properties[property.name]) {
                this._properties[property.name] = property;
            }
        }
    }
    fetchPropertyAsync(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // Setup load configuration
            const cultureLoadOption = mapping_utilities_1.MappingUtilities.culturesToLoadOption([...this._entity.cultures]);
            const propertyLoadOption = new property_load_option_1.PropertyLoadOption(name);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(cultureLoadOption, propertyLoadOption, relation_load_option_1.RelationLoadOption.None);
            // Load entity
            const entity = yield this._client.entities.getAsync(this._entity.id, loadConfig);
            if (entity == null) {
                return null;
            }
            // We only loaded this specific property, so we can just take the first one.
            const property = entity.properties[0] || null;
            return property;
        });
    }
}
exports.PropertyManager = PropertyManager;

},{"../../base-types":50,"../../guard":224,"../../mappers/mapping-utilities":239,"../querying/entity-load-configuration":147,"../querying/load-options":172,"../querying/property-load-option":177,"../querying/relation-load-option":185,"./lazy-loading-manager":93}],117:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const data_type_1 = require("./data-type");
const member_1 = require("./member");
const member_definition_type_1 = require("./member-definition-type");
class PropertyBase extends member_1.MemberBase {
    constructor(name, typeInfo, hasDataSource = false) {
        super(name, member_definition_type_1.MemberDefinitionType.Property);
        this.isMultiLanguage = false;
        guard_1.default.notNullOrUndefined(typeInfo);
        this.dataType = typeInfo.type;
        this.isMultiValue = typeInfo.isArray;
        this.hasDataSource = hasDataSource;
    }
    /**
     * Returns a string representation of the current property instance.
     *
     * @remarks
     * Can not be used for serialization. Only useful during debugging or testing.
     * Returned format: \<member format ({@link MemberBase.toString})\> ({@link PropertyDataType})
     */
    toString() {
        return `${super.toString()} (${data_type_1.PropertyDataType[this.dataType]})`;
    }
}
exports.PropertyBase = PropertyBase;

},{"../../guard":224,"./data-type":86,"./member":98,"./member-definition-type":95}],118:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationCardinality = void 0;
/**
 * Describes the cardinality of a relation.
 * All values are from Parent =\> Child.
 */
var RelationCardinality;
(function (RelationCardinality) {
    /**
     * One parent to many children.
     */
    RelationCardinality[RelationCardinality["OneToMany"] = 0] = "OneToMany";
    /**
     * Many parents to many children.
     */
    RelationCardinality[RelationCardinality["ManyToMany"] = 1] = "ManyToMany";
    /**
     * One parent to one child.
     */
    RelationCardinality[RelationCardinality["OneToOne"] = 2] = "OneToOne";
})(RelationCardinality = exports.RelationCardinality || (exports.RelationCardinality = {}));

},{}],119:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationContainer = void 0;
const string_format_1 = __importDefault(require("string-format"));
const error_messages_1 = __importDefault(require("../../error-messages"));
const guard_1 = __importDefault(require("../../guard"));
const relation_1 = require("./relation");
const relation_role_1 = require("./relation-role");
class RelationContainer {
    constructor(relationName) {
        guard_1.default.stringNotNullOrEmpty(relationName);
        this.relationName = relationName;
    }
    get parentRelation() {
        return this._parentRelation;
    }
    get childRelation() {
        return this._childRelation;
    }
    /**
     * Checks if the relation is self-referencing.
     */
    get isSelfRelation() {
        return this.parentRelation != null && this.childRelation != null;
    }
    /**
     * Checks if this contains any relation.
     */
    get isEmpty() {
        return this.parentRelation == null && this.childRelation == null;
    }
    /**
     * Checks if this contains any relation.
     */
    any() {
        return this.parentRelation != null || this.childRelation != null;
    }
    /**
     * Gets the relation. If role is null and the relation is self-referencing, it will throw.
     * Returns null if there are no loaded relations.
     * @param role - Relation role
     */
    getRelation(role) {
        if (role == null) {
            if (this.isSelfRelation) {
                throw new Error((0, string_format_1.default)(error_messages_1.default.Entity.SelfReferencingRelation, this.relationName));
            }
            if (this.parentRelation != null) {
                return this.parentRelation;
            }
            else {
                return this.childRelation;
            }
        }
        else if (role === relation_role_1.RelationRole.Parent) {
            return this.parentRelation;
        }
        else if (role === relation_role_1.RelationRole.Child) {
            return this.childRelation;
        }
        else {
            throw new Error((0, string_format_1.default)(error_messages_1.default.RelationRoleMapper.UnknownRole, role));
        }
    }
    /**
     * Gets an array of all loaded relations.
     */
    getRelations() {
        if (this.isSelfRelation) {
            return [this.parentRelation, this.childRelation];
        }
        else if (this.parentRelation != null) {
            return [this.parentRelation];
        }
        else if (this.childRelation != null) {
            return [this.childRelation];
        }
        else {
            return [];
        }
    }
    /**
     * Checks if the relation with specified role is loaded.
     */
    relationExists(role) {
        if (role === relation_role_1.RelationRole.Parent) {
            return this.parentRelation != null;
        }
        else if (role === relation_role_1.RelationRole.Child) {
            return this.childRelation != null;
        }
        else {
            throw new Error((0, string_format_1.default)(error_messages_1.default.RelationRoleMapper.UnknownRole, role));
        }
    }
    /**
     * Sets the relation on this container.
     */
    setRelation(relation) {
        guard_1.default.notNullOrUndefined(relation);
        if (this.relationName != relation.name) {
            throw new Error(error_messages_1.default.Entity.RelationNameMustMatch);
        }
        if (relation_1.RelationBase.isParentRelation(relation)) {
            this._parentRelation = relation;
        }
        else if (relation_1.RelationBase.isChildRelation(relation)) {
            this._childRelation = relation;
        }
        else {
            throw new Error((0, string_format_1.default)(error_messages_1.default.RelationRoleMapper.UnknownRole, relation.role));
        }
    }
}
exports.RelationContainer = RelationContainer;

},{"../../error-messages":205,"../../guard":224,"./relation":123,"./relation-role":122,"string-format":404}],120:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationDefinition = void 0;
const ta_json_1 = require("ta-json");
const conditional_validation_resource_js_1 = require("../../models/conditional-validation-resource.js");
const data_type_1 = __importDefault(require("./data-type"));
const member_definition_1 = require("./member-definition");
const member_definition_type_1 = require("./member-definition-type");
const relation_cardinality_1 = require("./relation-cardinality");
const relation_role_1 = require("./relation-role");
let RelationDefinition = class RelationDefinition extends member_definition_1.MemberDefinition {
    constructor(name, init) {
        super(name, data_type_1.default.Relation);
        this.allowNavigation = true;
        this.nestedProperties = [];
        this.associatedLabels = {};
        Object.assign(this, init);
    }
    get definitionType() {
        return member_definition_type_1.MemberDefinitionType.Relation;
    }
    get isMultiValue() {
        return (this.cardinality === relation_cardinality_1.RelationCardinality.ManyToMany ||
            (this.cardinality === relation_cardinality_1.RelationCardinality.OneToMany && this.role === relation_role_1.RelationRole.Parent));
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("role"),
    __metadata("design:type", Number)
], RelationDefinition.prototype, "role", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cardinality"),
    __metadata("design:type", Number)
], RelationDefinition.prototype, "cardinality", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("associated_entitydefinition"),
    __metadata("design:type", String)
], RelationDefinition.prototype, "associatedEntityDefinitionName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child_is_mandatory"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "childIsMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child_conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_js_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_js_1.ConditionalValidationResource)
], RelationDefinition.prototype, "childConditionalValidation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_is_mandatory"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "parentIsMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_js_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_js_1.ConditionalValidationResource)
], RelationDefinition.prototype, "parentConditionalValidation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("inherits_security"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "inheritsSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("allow_navigation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "allowNavigation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_nested"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isNested", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested_properties"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], RelationDefinition.prototype, "nestedProperties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested_permissions"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "nestedPermissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isTaxonomyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_hierarchy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isTaxonomyHierarchyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("content_is_copied"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "contentIsCopied", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("completion_is_copied"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "completionIsCopied", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_relation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isPathRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_hierarchy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isPathHierarchyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("path_hierarchy_score"),
    __metadata("design:type", String)
], RelationDefinition.prototype, "pathHierarchyScore", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_rendition_relation"),
    __metadata("design:type", Boolean)
], RelationDefinition.prototype, "isRenditionRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("associated_labels"),
    __metadata("design:type", Object)
], RelationDefinition.prototype, "associatedLabels", void 0);
RelationDefinition = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Relation),
    __metadata("design:paramtypes", [String, Object])
], RelationDefinition);
exports.RelationDefinition = RelationDefinition;

},{"../../models/conditional-validation-resource.js":259,"./data-type":86,"./member-definition":96,"./member-definition-type":95,"./relation-cardinality":118,"./relation-role":122,"ta-json":424}],121:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationManager = void 0;
const base_types_1 = require("../../base-types");
const guard_1 = __importDefault(require("../../guard"));
const culture_load_option_1 = require("../querying/culture-load-option");
const entity_load_configuration_1 = require("../querying/entity-load-configuration");
const load_options_1 = require("../querying/load-options");
const property_load_option_1 = require("../querying/property-load-option");
const relation_load_option_1 = require("../querying/relation-load-option");
const relation_specification_1 = require("../querying/relation-specification");
const lazy_loading_manager_1 = require("./lazy-loading-manager");
const relation_container_1 = require("./relation-container");
class RelationManager {
    constructor(client, relations, entity) {
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(relations);
        guard_1.default.notNullOrUndefined(entity);
        this._client = client;
        this._entity = entity;
        this._relations = new base_types_1.CaseInsensitiveStringMap();
        for (const relation of relations) {
            this.addRelation(relation);
        }
    }
    get count() {
        return this._count;
    }
    /**
     * Gets the relation for the specified name. If role is null and the relation is self-referencing, it will throw.
     * Returns null if there are no loaded relations.
     * @param relationName - The name of the relation
     * @param role - The role of the relation
     * @returns A relation or null.
     */
    getRelation(relationName, role) {
        guard_1.default.stringNotNullOrEmpty(relationName);
        const container = this._relations[relationName];
        if (!container) {
            return null;
        }
        return container.getRelation(role);
    }
    /**
     * Gets a list of all loaded relations.
     */
    getRelations() {
        const relations = [];
        for (const container of Object.values(this._relations)) {
            if (container.isSelfRelation) {
                Array.prototype.push.apply(relations, container.getRelations());
            }
            else {
                relations.push(container.getRelation());
            }
        }
        return relations;
    }
    /**
     * Lazy loads a relation if it is not loaded yet, adds it to the loaded relations and returns it.
     * If the relation does not exist, null will be returned.
     * @param relationName - The name of the relation
     * @param role - The role of the relation
     * @returns A promise resolving to the relation or null.
     */
    loadRelationAsync(relationName, role) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(relationName);
            lazy_loading_manager_1.LazyLoadingManager.ensureLazyLoadingIsPossible(this._entity);
            let relation = this.getRelation(relationName, role);
            if (relation != null) {
                return relation;
            }
            relation = yield this.fetchRelationAsync(relationName, role);
            if (relation != null) {
                this.addRelation(relation);
            }
            return relation;
        });
    }
    /**
     * Loads the specified relations.
     * It will only load if it is actually missing relations and does not overwrite existing relations.
     * @param relationLoadOption - Option specifying which relations to load
     * @returns True when something was loaded.
     */
    loadRelationsAsync(relationLoadOption) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(relationLoadOption);
            lazy_loading_manager_1.LazyLoadingManager.ensureLazyLoadingIsPossible(this._entity);
            if (!this.hasMissingRelations(relationLoadOption)) {
                return false;
            }
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, property_load_option_1.PropertyLoadOption.None, relationLoadOption);
            const tempEntity = yield this._client.entities.getAsync(this._entity.id, loadConfig);
            this.importMissingRelations(tempEntity);
            return true;
        });
    }
    /**
     * Checks if the entity is missing relations that are specified in the {@link IRelationLoadOption}.
     * @param relationLoadOption - Option specifying which relations to load
     * @returns Boolean indicating if something is missing.
     */
    hasMissingRelations(relationLoadOption) {
        if (relationLoadOption == null ||
            relationLoadOption.loadOption === load_options_1.LoadOption.None ||
            relationLoadOption.relations == null ||
            relationLoadOption.relations.length === 0) {
            return false;
        }
        if (relationLoadOption.loadOption === load_options_1.LoadOption.All) {
            // We don't have any info about the definition here. (Same logic as in the C# SDK)
            return true;
        }
        return relationLoadOption.relations.some(requestedRelation => !this.exists(requestedRelation.name, requestedRelation.role));
    }
    /**
     * Checks if the specified relation is loaded. If role is null, any loaded role will return true.
     * @param relationName - The name of the relation
     * @param role - The role of the relation
     * @returns Boolean indicating if the specified relation exists.
     */
    exists(relationName, role) {
        guard_1.default.stringNotNullOrEmpty(relationName);
        let exists = false;
        const container = this._relations[relationName];
        if (container) {
            if (role == null) {
                exists = container.any();
            }
            else {
                exists = container.relationExists(role);
            }
        }
        return exists;
    }
    /**
     * Imports missing relations from the entity.
     * @param tempEntity - An entity
     */
    importMissingRelations(tempEntity) {
        guard_1.default.notNullOrUndefined(tempEntity);
        for (const relation of tempEntity.relations) {
            if (!this.exists(relation.name, relation.role)) {
                this.addRelation(relation);
            }
        }
    }
    /**
     * Fetches the relation from the server.
     * @param relationName - The name of the relation
     * @param role - The role of the relation
     */
    fetchRelationAsync(relationName, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const relationLoadOption = new relation_load_option_1.RelationLoadOption([new relation_specification_1.RelationSpecification(relationName, role)]);
            const loadConfig = new entity_load_configuration_1.EntityLoadConfiguration(new culture_load_option_1.CultureLoadOption([...this._entity.cultures]), property_load_option_1.PropertyLoadOption.None, relationLoadOption);
            const tempEntity = yield this._client.entities.getAsync(this._entity.id, loadConfig);
            if (tempEntity == null) {
                return null;
            }
            const relation = tempEntity.getRelation(relationName, role);
            return relation;
        });
    }
    /**
     * Adds the relation to the loaded relations and updates the count (when the relation doesn't exist yet).
     * @param relation - Relation to add
     */
    addRelation(relation) {
        let container = this._relations[relation.name];
        if (!container) {
            container = new relation_container_1.RelationContainer(relation.name);
            this._relations[relation.name] = container;
        }
        if (container.relationExists(relation.role)) {
            return;
        }
        container.setRelation(relation);
        this._count++;
    }
}
exports.RelationManager = RelationManager;

},{"../../base-types":50,"../../guard":224,"../querying/culture-load-option":140,"../querying/entity-load-configuration":147,"../querying/load-options":172,"../querying/property-load-option":177,"../querying/relation-load-option":185,"../querying/relation-specification":186,"./lazy-loading-manager":93,"./relation-container":119}],122:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationRole = void 0;
/**
 * Role of a relation.
 */
var RelationRole;
(function (RelationRole) {
    /**
     * Parent.
     */
    RelationRole[RelationRole["Parent"] = 0] = "Parent";
    /**
     * Child.
     */
    RelationRole[RelationRole["Child"] = 1] = "Child";
})(RelationRole = exports.RelationRole || (exports.RelationRole = {}));

},{}],123:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildRelationBase = exports.RelationBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const entity_load_configuration_1 = require("../querying/entity-load-configuration");
const member_1 = require("./member");
const member_definition_type_1 = require("./member-definition-type");
const relation_role_1 = require("./relation-role");
class RelationBase extends member_1.MemberBase {
    constructor(name, properties = null, client) {
        super(name, member_definition_type_1.MemberDefinitionType.Relation);
        this.client = client;
        this.properties = properties == null ? {} : properties;
    }
    setIdentifiersAsync(identifiers) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.arrayNoneNullOrEmptyString(identifiers);
            guard_1.default.notNullOrUndefined(this.client);
            const entities = yield this.client.entities.getManyAsync(identifiers, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            this.setIds((_a = entities === null || entities === void 0 ? void 0 : entities.filter(x => x.id !== null).map(x => x.id)) !== null && _a !== void 0 ? _a : []);
        });
    }
    getTypeName() {
        return relation_role_1.RelationRole[this.role];
    }
    static isChildRelation(r) {
        return r.role === relation_role_1.RelationRole.Child;
    }
    static isChildToOneParentRelation(r) {
        return r.role === relation_role_1.RelationRole.Child && !r.isMultiValue;
    }
    static isChildToManyParentsRelation(r) {
        return r.role === relation_role_1.RelationRole.Child && r.isMultiValue;
    }
    static isParentRelation(r) {
        return r.role === relation_role_1.RelationRole.Parent;
    }
    static isParentToOneChildRelation(r) {
        return r.role === relation_role_1.RelationRole.Parent && !r.isMultiValue;
    }
    static isParentToManyChildrenRelation(r) {
        return r.role === relation_role_1.RelationRole.Parent && r.isMultiValue;
    }
}
exports.RelationBase = RelationBase;
class ChildRelationBase extends RelationBase {
    constructor(name, properties, client) {
        super(name, properties, client);
        this.inheritsSecurity = true;
    }
}
exports.ChildRelationBase = ChildRelationBase;

},{"../../guard":224,"../querying/entity-load-configuration":147,"./member":98,"./member-definition-type":95,"./relation-role":122}],124:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildToManyParentsRelation = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../../dirty-value-calculator"));
const guard_1 = __importDefault(require("../../../guard"));
const entity_load_configuration_1 = require("../../querying/entity-load-configuration");
const relation_1 = require("../relation");
const relation_role_1 = require("../relation-role");
class ChildToManyParentsRelation extends relation_1.ChildRelationBase {
    constructor(name, properties = null, client) {
        super(name, properties, client);
        this._parents = [];
        this.role = relation_role_1.RelationRole.Child;
        this.isMultiValue = true;
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        else {
            return this._dirtyValueCalculator.isDirty(this._parents);
        }
    }
    get parents() {
        return this._parents.slice();
    }
    getIds() {
        return this._parents.slice();
    }
    setIds(ids) {
        guard_1.default.validIds(ids);
        this._parents.splice(0, this._parents.length);
        this._parents.push(...ids);
    }
    clear() {
        this._parents.splice(0, this._parents.length);
    }
    add(id) {
        guard_1.default.validId(id);
        if (!this._parents.includes(id)) {
            this._parents.push(id);
        }
    }
    addRange(ids) {
        guard_1.default.validIds(ids);
        ids.forEach(id => {
            if (!this._parents.includes(id)) {
                this._parents.push(id);
            }
        });
    }
    addAsync(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.stringNotNullOrEmpty(identifier);
            const entity = yield this.client.entities.getAsync(identifier, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            if (entity && entity.id) {
                this.add(entity.id);
            }
        });
    }
    addRangeAsync(identifiers) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.arrayNoneNullOrEmptyString(identifiers);
            const entities = yield this.client.entities.getManyAsync(identifiers, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            if (entities) {
                this.addRange(entities.filter(x => x.id !== null).map(x => x.id));
            }
        });
    }
    startTracking() {
        if (this.isTracking)
            return;
        this.isTracking = true;
        this._dirtyValueCalculator = new dirty_value_calculator_1.default();
        this._dirtyValueCalculator.setOriginalValue(this._parents);
    }
    markClean() {
        if (this.isTracking) {
            this._dirtyValueCalculator.setOriginalValue(this._parents);
        }
    }
    getParentProperties(id) {
        return this.properties[id] == null ? {} : this.properties[id];
    }
}
exports.ChildToManyParentsRelation = ChildToManyParentsRelation;

},{"../../../dirty-value-calculator":203,"../../../guard":224,"../../querying/entity-load-configuration":147,"../relation":123,"../relation-role":122}],125:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildToOneParentRelation = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../../dirty-value-calculator"));
const guard_1 = __importDefault(require("../../../guard"));
const entity_load_configuration_1 = require("../../querying/entity-load-configuration");
const relation_1 = require("../relation");
const relation_role_1 = require("../relation-role");
class ChildToOneParentRelation extends relation_1.ChildRelationBase {
    constructor(name, properties = null, client) {
        super(name, properties, client);
        this._parent = null;
        this.role = relation_role_1.RelationRole.Child;
        this.isMultiValue = false;
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        else {
            return this._dirtyValueCalculator.isDirty(this._parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(id) {
        guard_1.default.validIdOrNull(id);
        this._parent = id;
    }
    getIds() {
        if (this._parent !== 0 && this._parent !== null) {
            return [this._parent];
        }
        else {
            return [];
        }
    }
    setIds(ids) {
        guard_1.default.arrayMaxOne(ids);
        if (ids.length > 0) {
            guard_1.default.validId(ids[0]);
            this._parent = ids[0];
        }
        else {
            this._parent = null;
        }
    }
    clear() {
        this._parent = null;
    }
    getId() {
        return this._parent;
    }
    setId(id) {
        guard_1.default.validIdOrNull(id);
        this._parent = id;
    }
    setIdentifierAsync(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.stringNotNullOrEmpty(identifier);
            if (identifier) {
                const entity = yield this.client.entities.getAsync(identifier, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
                if (entity && entity.id) {
                    this.setId(entity.id);
                    return;
                }
            }
            this.setId(null);
        });
    }
    startTracking() {
        if (this.isTracking)
            return;
        this.isTracking = true;
        this._dirtyValueCalculator = new dirty_value_calculator_1.default();
        this._dirtyValueCalculator.setOriginalValue(this._parent);
    }
    markClean() {
        if (this.isTracking) {
            this._dirtyValueCalculator.setOriginalValue(this._parent);
        }
    }
    getParentProperties() {
        if (this._parent == null) {
            return {};
        }
        return this.properties[this._parent] == null ? {} : this.properties[this._parent];
    }
}
exports.ChildToOneParentRelation = ChildToOneParentRelation;

},{"../../../dirty-value-calculator":203,"../../../guard":224,"../../querying/entity-load-configuration":147,"../relation":123,"../relation-role":122}],126:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParentToManyChildrenRelation = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../../dirty-value-calculator"));
const guard_1 = __importDefault(require("../../../guard"));
const entity_load_configuration_1 = require("../../querying/entity-load-configuration");
const relation_1 = require("../relation");
const relation_role_1 = require("../relation-role");
class ParentToManyChildrenRelation extends relation_1.RelationBase {
    constructor(name, properties = null, client) {
        super(name, properties, client);
        this._children = [];
        this.role = relation_role_1.RelationRole.Parent;
        this.isMultiValue = true;
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        else {
            return this._dirtyValueCalculator.isDirty(this._children);
        }
    }
    get children() {
        return this._children.slice();
    }
    getIds() {
        return this._children.slice();
    }
    setIds(ids) {
        guard_1.default.validIds(ids);
        this._children.splice(0, this._children.length);
        this._children.push(...ids);
    }
    clear() {
        this._children.splice(0, this._children.length);
    }
    add(id) {
        guard_1.default.validId(id);
        if (!this._children.includes(id)) {
            this._children.push(id);
        }
    }
    addRange(ids) {
        guard_1.default.validIds(ids);
        ids.forEach(id => {
            if (!this._children.includes(id)) {
                this._children.push(id);
            }
        });
    }
    addAsync(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.stringNotNullOrEmpty(identifier);
            const entity = yield this.client.entities.getAsync(identifier, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            if (entity && entity.id) {
                this.add(entity.id);
            }
        });
    }
    addRangeAsync(identifiers) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.arrayNoneNullOrEmptyString(identifiers);
            const entities = yield this.client.entities.getManyAsync(identifiers, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
            if (entities) {
                this.addRange(entities.filter(x => x.id !== null).map(x => x.id));
            }
        });
    }
    startTracking() {
        if (this.isTracking)
            return;
        this.isTracking = true;
        this._dirtyValueCalculator = new dirty_value_calculator_1.default();
        this._dirtyValueCalculator.setOriginalValue(this._children);
    }
    markClean() {
        if (this.isTracking) {
            this._dirtyValueCalculator.setOriginalValue(this._children);
        }
    }
    getChildProperties(id) {
        return this.properties[id] == null ? {} : this.properties[id];
    }
}
exports.ParentToManyChildrenRelation = ParentToManyChildrenRelation;

},{"../../../dirty-value-calculator":203,"../../../guard":224,"../../querying/entity-load-configuration":147,"../relation":123,"../relation-role":122}],127:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParentToOneChildRelation = void 0;
const dirty_value_calculator_1 = __importDefault(require("../../../dirty-value-calculator"));
const guard_1 = __importDefault(require("../../../guard"));
const entity_load_configuration_1 = require("../../querying/entity-load-configuration");
const relation_1 = require("../relation");
const relation_role_1 = require("../relation-role");
class ParentToOneChildRelation extends relation_1.RelationBase {
    constructor(name, properties = null, client) {
        super(name, properties, client);
        this._child = null;
        this.role = relation_role_1.RelationRole.Parent;
        this.isMultiValue = false;
    }
    get child() {
        return this._child;
    }
    set child(id) {
        guard_1.default.validIdOrNull(id);
        this._child = id;
    }
    get isDirty() {
        if (!this.isTracking) {
            return false;
        }
        else {
            return this._dirtyValueCalculator.isDirty(this._child);
        }
    }
    getIds() {
        if (this._child !== 0 && this._child !== null) {
            return [this._child];
        }
        else {
            return [];
        }
    }
    setIds(ids) {
        guard_1.default.arrayMaxOne(ids);
        if (ids.length > 0) {
            guard_1.default.validId(ids[0]);
            this._child = ids[0];
        }
        else {
            this._child = null;
        }
    }
    setIdentifierAsync(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(this.client);
            guard_1.default.stringNotNullOrEmpty(identifier);
            if (identifier) {
                const entity = yield this.client.entities.getAsync(identifier, entity_load_configuration_1.EntityLoadConfiguration.Minimal);
                if (entity && entity.id) {
                    this.setId(entity.id);
                    return;
                }
            }
            this.setId(null);
        });
    }
    clear() {
        this._child = null;
    }
    getId() {
        return this._child;
    }
    setId(id) {
        guard_1.default.validIdOrNull(id);
        this._child = id;
    }
    startTracking() {
        if (this.isTracking)
            return;
        this.isTracking = true;
        this._dirtyValueCalculator = new dirty_value_calculator_1.default();
        this._dirtyValueCalculator.setOriginalValue(this._child);
    }
    markClean() {
        if (this.isTracking) {
            this._dirtyValueCalculator.setOriginalValue(this._child);
        }
    }
    getChildProperties() {
        if (this._child == null) {
            return {};
        }
        return this.properties[this._child] == null ? {} : this.properties[this._child];
    }
}
exports.ParentToOneChildRelation = ParentToOneChildRelation;

},{"../../../dirty-value-calculator":203,"../../../guard":224,"../../querying/entity-load-configuration":147,"../relation":123,"../relation-role":122}],128:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rendition = void 0;
class Rendition {
    constructor(name, items) {
        this.name = name;
        this.items = items;
    }
    static createRendition(name, items) {
        return new Rendition(name, items);
    }
}
exports.Rendition = Rendition;

},{}],129:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

},{}],130:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringContentType = void 0;
/**
 * Types of string content.
 */
var StringContentType;
(function (StringContentType) {
    /**
     * Content represents a single line string.
     */
    StringContentType["SingleLine"] = "SingleLine";
    /**
     * Content represents multiple lines of string.
     */
    StringContentType["MultiLine"] = "MultiLine";
    /**
     * Content represents a HTML code.
     */
    StringContentType["Html"] = "Html";
    /**
     * Content represents programming syntax, scripts, data formats like JSON...
     */
    StringContentType["Code"] = "Code";
})(StringContentType = exports.StringContentType || (exports.StringContentType = {}));

},{}],131:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
const constants_1 = require("../../constants");
const final_life_cycle_status_mapper_1 = require("../../mappers/final-life-cycle-status-mapper");
const entity_1 = require("../base/entity");
const culture_load_option_1 = require("../querying/culture-load-option");
const entity_load_configuration_1 = require("../querying/entity-load-configuration");
const property_load_option_1 = require("../querying/property-load-option");
const relation_load_option_1 = require("../querying/relation-load-option");
class Asset extends entity_1.Entity {
    get title() {
        return this.getPropertyValue(constants_1.DEFINITIONS["Asset"].title);
    }
    set title(value) {
        this.setPropertyValue(constants_1.DEFINITIONS["Asset"].title, value);
    }
    get fileName() {
        return this.getPropertyValue(constants_1.DEFINITIONS["Asset"].fileName);
    }
    set fileName(value) {
        this.setPropertyValue(constants_1.DEFINITIONS["Asset"].fileName, value);
    }
    getDescription(culture) {
        return this.getPropertyValue(constants_1.DEFINITIONS["Asset"].description, culture);
    }
    setDescription(culture, description) {
        return this.setPropertyValue(constants_1.DEFINITIONS["Asset"].description, description, culture);
    }
    getFinalLifeCycleStatusAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const relation = this.getRelation(constants_1.DEFINITIONS["Asset"].finalLifeCycleStatusToAsset);
            if (relation == null || relation.parent == null) {
                return null;
            }
            const loadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration(culture_load_option_1.CultureLoadOption.None, new property_load_option_1.PropertyLoadOption(constants_1.DEFINITIONS["FinalLifeCycleStatus"].statusValue), relation_load_option_1.RelationLoadOption.None);
            const parent = yield this._client.entities.getAsync(relation.parent, loadConfiguration);
            if (parent == null) {
                return null;
            }
            const statusString = parent.getPropertyValue(constants_1.DEFINITIONS["FinalLifeCycleStatus"].statusValue);
            const status = final_life_cycle_status_mapper_1.FinalLifeCycleStatusMapper.fromString(statusString);
            return status;
        });
    }
    loadTypedMembersAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const propertyLoadOption = new property_load_option_1.PropertyLoadOption([
                constants_1.DEFINITIONS["Asset"].title,
                constants_1.DEFINITIONS["Asset"].fileName,
                constants_1.DEFINITIONS["Asset"].description,
            ]);
            const relationLoadOption = new relation_load_option_1.RelationLoadOption([constants_1.DEFINITIONS["Asset"].finalLifeCycleStatusToAsset]);
            yield this.loadMembersAsync(propertyLoadOption, relationLoadOption);
        });
    }
}
exports.Asset = Asset;

},{"../../constants":82,"../../mappers/final-life-cycle-status-mapper":237,"../base/entity":90,"../querying/culture-load-option":140,"../querying/entity-load-configuration":147,"../querying/property-load-option":177,"../querying/relation-load-option":185}],132:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinalLifeCycleStatus = void 0;
var FinalLifeCycleStatus;
(function (FinalLifeCycleStatus) {
    FinalLifeCycleStatus[FinalLifeCycleStatus["Created"] = 0] = "Created";
    FinalLifeCycleStatus[FinalLifeCycleStatus["UnderReview"] = 1] = "UnderReview";
    FinalLifeCycleStatus[FinalLifeCycleStatus["Approved"] = 2] = "Approved";
    FinalLifeCycleStatus[FinalLifeCycleStatus["Rejected"] = 3] = "Rejected";
    FinalLifeCycleStatus[FinalLifeCycleStatus["Archived"] = 4] = "Archived";
})(FinalLifeCycleStatus = exports.FinalLifeCycleStatus || (exports.FinalLifeCycleStatus = {}));

},{}],133:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Condition = void 0;
class Condition {
    constructor() {
        this.entityIds = [];
        this.directEntityIds = [];
    }
}
exports.Condition = Condition;

},{}],134:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberPolicy = void 0;
/**
 * A member policy.
 */
class MemberPolicy {
    constructor(init) {
        Object.assign(this, init);
    }
}
exports.MemberPolicy = MemberPolicy;

},{}],135:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = void 0;
class Policy {
    constructor() {
        this.rules = [];
        this.memberSecurity = [];
        this.memberGroupSecurity = [];
    }
}
exports.Policy = Policy;

},{}],136:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleType = void 0;
/**
 * Type of rule.
 */
var RuleType;
(function (RuleType) {
    RuleType[RuleType["Regular"] = 0] = "Regular";
    RuleType[RuleType["BuiltIn"] = 1] = "BuiltIn";
})(RuleType = exports.RuleType || (exports.RuleType = {}));

},{}],137:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
/**
 * {@inheritDoc}
 */
class Rule {
    constructor(init) {
        this._identifier = null;
        Object.assign(this, init);
    }
    get identifier() {
        return this._identifier;
    }
    setIdentifier(guid) {
        this._identifier = guid;
    }
}
exports.Rule = Rule;

},{}],138:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserGroupPolicy = void 0;
const policy_1 = require("./policy");
class UserGroupPolicy extends policy_1.Policy {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
    getRelatedId() {
        return this.userGroupId;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    static isUserGroupPolicy(obj) {
        return obj.hasOwnProperty("userGroupId") && typeof obj.userGroupId === "number";
    }
}
exports.UserGroupPolicy = UserGroupPolicy;

},{"./policy":135}],139:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPolicy = void 0;
const policy_1 = require("./policy");
class UserPolicy extends policy_1.Policy {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
    getRelatedId() {
        return this.userId;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    static isUserPolicy(obj) {
        return obj.hasOwnProperty("userId") && typeof obj.userId === "number";
    }
}
exports.UserPolicy = UserPolicy;

},{"./policy":135}],140:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CultureLoadOption_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CultureLoadOption = void 0;
const ta_json_1 = require("ta-json");
const load_options_1 = require("./load-options");
let CultureLoadOption = CultureLoadOption_1 = class CultureLoadOption {
    constructor(param) {
        var _a;
        this.loadOption = load_options_1.LoadOption.None;
        this.cultures = [];
        if (param == null) {
            return;
        }
        else if (param instanceof CultureLoadOption_1) {
            this.cultures = [...param.cultures];
            this.loadOption = param.loadOption;
        }
        else if (param instanceof Array) {
            this.cultures = [...param];
            this.loadOption = this.cultures.length ? load_options_1.LoadOption.Custom : load_options_1.LoadOption.None;
        }
        else if (typeof param === "object") {
            this.cultures = [...((_a = param.cultures) !== null && _a !== void 0 ? _a : [])];
            this.loadOption = param.loadOption != null ? param.loadOption : load_options_1.LoadOption.Custom;
        }
        else {
            this.loadOption = param;
        }
    }
    deepClone() {
        return new CultureLoadOption_1({ cultures: [...this.cultures], loadOption: this.loadOption });
    }
};
/**
 * Load no cultures.
 */
CultureLoadOption.None = new CultureLoadOption_1(load_options_1.LoadOption.None);
/**
 * Load the default culture.
 */
CultureLoadOption.Default = new CultureLoadOption_1(load_options_1.LoadOption.Default);
/**
 * Load all cultures.
 */
CultureLoadOption.All = new CultureLoadOption_1(load_options_1.LoadOption.All);
__decorate([
    (0, ta_json_1.JsonProperty)("load_option"),
    __metadata("design:type", Number)
], CultureLoadOption.prototype, "loadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cultures"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], CultureLoadOption.prototype, "cultures", void 0);
CultureLoadOption = CultureLoadOption_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], CultureLoadOption);
exports.CultureLoadOption = CultureLoadOption;

},{"./load-options":172,"ta-json":424}],141:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionIdIterator = void 0;
const guard_1 = __importDefault(require("../../guard"));
const skip_take_iterator_base_1 = require("./skip-take-iterator-base");
class EntityDefinitionIdIterator extends skip_take_iterator_base_1.SkipTakeIteratorBase {
    constructor(client, param) {
        super(param);
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    getResultAsync(skip, take) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.entityDefinitions.getRangeIdsAsync(skip, take);
        });
    }
}
exports.EntityDefinitionIdIterator = EntityDefinitionIdIterator;

},{"../../guard":224,"./skip-take-iterator-base":187}],142:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionIdQueryResult = void 0;
const guard_1 = __importDefault(require("../../guard"));
const entity_definition_id_iterator_1 = require("./entity-definition-id-iterator");
const entity_query_result_1 = require("./entity-query-result");
class EntityDefinitionIdQueryResult extends entity_query_result_1.QueryResultBase {
    constructor(client, items, totalItems, offset) {
        super(totalItems, offset);
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(items);
        this._client = client;
        this.items = items;
    }
    createIterator() {
        return new entity_definition_id_iterator_1.EntityDefinitionIdIterator(this._client, this);
    }
}
exports.EntityDefinitionIdQueryResult = EntityDefinitionIdQueryResult;

},{"../../guard":224,"./entity-definition-id-iterator":141,"./entity-query-result":148}],143:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionIterator = void 0;
const guard_1 = __importDefault(require("../../guard"));
const skip_take_iterator_base_1 = require("./skip-take-iterator-base");
class EntityDefinitionIterator extends skip_take_iterator_base_1.SkipTakeIteratorBase {
    constructor(client, param) {
        super(param);
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    getResultAsync(skip, take) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._client.entityDefinitions.getRangeAsync(skip, take);
        });
    }
}
exports.EntityDefinitionIterator = EntityDefinitionIterator;

},{"../../guard":224,"./skip-take-iterator-base":187}],144:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionQueryResult = void 0;
const guard_1 = __importDefault(require("../../guard"));
const entity_definition_iterator_1 = require("./entity-definition-iterator");
const entity_query_result_1 = require("./entity-query-result");
class EntityDefinitionQueryResult extends entity_query_result_1.QueryResultBase {
    constructor(client, items, totalItems, offset) {
        super(totalItems, offset);
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(items);
        this._client = client;
        this.items = items;
    }
    createIterator() {
        return new entity_definition_iterator_1.EntityDefinitionIterator(this._client, this);
    }
}
exports.EntityDefinitionQueryResult = EntityDefinitionQueryResult;

},{"../../guard":224,"./entity-definition-iterator":143,"./entity-query-result":148}],145:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityIterator = void 0;
const guard_1 = __importDefault(require("../../guard"));
const loading_query_iterator_1 = require("./loading-query-iterator");
class EntityIterator extends loading_query_iterator_1.LoadingQueryIteratorBase {
    constructor(client, query, loadConfiguration, result) {
        super(query, loadConfiguration, result);
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    getResultAsync(query, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._client.querying.queryAsync(query, loadConfiguration);
        });
    }
}
exports.EntityIterator = EntityIterator;

},{"../../guard":224,"./loading-query-iterator":173}],146:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityLoadConfigurationBuilder = void 0;
const guard_1 = __importDefault(require("../../guard"));
const culture_load_option_1 = require("./culture-load-option");
const entity_load_configuration_1 = require("./entity-load-configuration");
const load_options_1 = require("./load-options");
const property_load_option_1 = require("./property-load-option");
const relation_load_option_1 = require("./relation-load-option");
const relation_specification_1 = require("./relation-specification");
class EntityLoadConfigurationBuilder {
    constructor(entityLoadConfiguration) {
        this._entityLoadConfiguration = new entity_load_configuration_1.EntityLoadConfiguration();
        if (entityLoadConfiguration)
            this._entityLoadConfiguration = entityLoadConfiguration.deepClone();
    }
    inCultures(option) {
        guard_1.default.notNullOrUndefined(option);
        if (option instanceof Array) {
            this._entityLoadConfiguration.cultureLoadOption =
                this._entityLoadConfiguration.cultureLoadOption || new culture_load_option_1.CultureLoadOption();
            this._entityLoadConfiguration.cultureLoadOption.loadOption = load_options_1.LoadOption.Custom;
            this._entityLoadConfiguration.cultureLoadOption.cultures = [
                ...new Set((this._entityLoadConfiguration.cultureLoadOption.cultures || []).concat(option)),
            ];
        }
        else {
            this._entityLoadConfiguration.cultureLoadOption =
                this._entityLoadConfiguration.cultureLoadOption || new culture_load_option_1.CultureLoadOption();
            this._entityLoadConfiguration.cultureLoadOption.loadOption = option;
        }
        return this;
    }
    inCulture(culture) {
        guard_1.default.notUndefined(culture);
        guard_1.default.stringNotNullOrEmpty(culture);
        return this.inCultures([culture]);
    }
    withProperties(option) {
        guard_1.default.notNullOrUndefined(option);
        if (option instanceof Array) {
            this._entityLoadConfiguration.propertyLoadOption =
                this._entityLoadConfiguration.propertyLoadOption || new property_load_option_1.PropertyLoadOption();
            this._entityLoadConfiguration.propertyLoadOption.loadOption = load_options_1.LoadOption.Custom;
            this._entityLoadConfiguration.propertyLoadOption.properties = [
                ...new Set((this._entityLoadConfiguration.propertyLoadOption.properties || []).concat(option)),
            ];
        }
        else {
            this._entityLoadConfiguration.propertyLoadOption =
                this._entityLoadConfiguration.propertyLoadOption || new property_load_option_1.PropertyLoadOption();
            this._entityLoadConfiguration.propertyLoadOption.loadOption = option;
        }
        return this;
    }
    withProperty(property) {
        guard_1.default.notUndefined(property);
        guard_1.default.stringNotNullOrEmpty(property);
        return this.withProperties([property]);
    }
    withRelations(option) {
        guard_1.default.notNullOrUndefined(option);
        if (option instanceof Array) {
            let relationSpecifications = option.map(relation => {
                return typeof relation === "string" ? new relation_specification_1.RelationSpecification(relation) : relation;
            });
            this._entityLoadConfiguration.relationLoadOption =
                this._entityLoadConfiguration.relationLoadOption || new relation_load_option_1.RelationLoadOption();
            this._entityLoadConfiguration.relationLoadOption.loadOption = load_options_1.LoadOption.Custom;
            relationSpecifications = relationSpecifications.filter(value => {
                return (this._entityLoadConfiguration.relationLoadOption.relations.findIndex(relationValue => {
                    if (typeof value === "string") {
                        return relationValue.name === value;
                    }
                    else {
                        return relationValue.deepEquals(value);
                    }
                }) === -1);
            });
            this._entityLoadConfiguration.relationLoadOption.relations = (this._entityLoadConfiguration.relationLoadOption.relations || []).concat(relationSpecifications);
        }
        else {
            this._entityLoadConfiguration.relationLoadOption =
                this._entityLoadConfiguration.relationLoadOption || new relation_load_option_1.RelationLoadOption();
            this._entityLoadConfiguration.relationLoadOption.loadOption = option;
        }
        return this;
    }
    withRelation(relation, role) {
        guard_1.default.notUndefined(relation);
        guard_1.default.stringNotNullOrEmpty(relation);
        return this.withRelations([new relation_specification_1.RelationSpecification(relation, role)]);
    }
    build() {
        return this._entityLoadConfiguration.deepClone();
    }
}
exports.EntityLoadConfigurationBuilder = EntityLoadConfigurationBuilder;

},{"../../guard":224,"./culture-load-option":140,"./entity-load-configuration":147,"./load-options":172,"./property-load-option":177,"./relation-load-option":185,"./relation-specification":186}],147:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EntityLoadConfiguration_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityLoadConfiguration = void 0;
const ta_json_1 = require("ta-json");
const culture_load_option_1 = require("./culture-load-option");
const entity_load_configuration_builder_1 = require("./entity-load-configuration-builder");
const property_load_option_1 = require("./property-load-option");
const relation_load_option_1 = require("./relation-load-option");
let EntityLoadConfiguration = EntityLoadConfiguration_1 = class EntityLoadConfiguration {
    constructor(cultureLoadOption, propertyLoadOption, relationLoadOption) {
        if (cultureLoadOption)
            this.cultureLoadOption = cultureLoadOption;
        if (propertyLoadOption)
            this.propertyLoadOption = propertyLoadOption;
        if (relationLoadOption)
            this.relationLoadOption = relationLoadOption;
    }
    builder() {
        return new entity_load_configuration_builder_1.EntityLoadConfigurationBuilder(this);
    }
    deepClone() {
        return new EntityLoadConfiguration_1(this.cultureLoadOption && this.cultureLoadOption.deepClone(), this.propertyLoadOption && this.propertyLoadOption.deepClone(), this.relationLoadOption && this.relationLoadOption.deepClone());
    }
};
/**
 * Only load system properties.
 */
EntityLoadConfiguration.Minimal = new EntityLoadConfiguration_1(culture_load_option_1.CultureLoadOption.None, property_load_option_1.PropertyLoadOption.None, relation_load_option_1.RelationLoadOption.None);
/**
 * Gets the entities in default culture with all properties and no relations.
 */
EntityLoadConfiguration.Default = new EntityLoadConfiguration_1(culture_load_option_1.CultureLoadOption.Default, property_load_option_1.PropertyLoadOption.All, relation_load_option_1.RelationLoadOption.None);
/**
 * Get the entities in default culture with all properties and relations.
 */
EntityLoadConfiguration.DefaultCultureFull = new EntityLoadConfiguration_1(culture_load_option_1.CultureLoadOption.Default, property_load_option_1.PropertyLoadOption.All, relation_load_option_1.RelationLoadOption.All);
/**
 * Get the entity in all installed cultures with all properties and relations.
 */
EntityLoadConfiguration.Full = new EntityLoadConfiguration_1(culture_load_option_1.CultureLoadOption.All, property_load_option_1.PropertyLoadOption.All, relation_load_option_1.RelationLoadOption.All);
__decorate([
    (0, ta_json_1.JsonProperty)("culture_option"),
    __metadata("design:type", Object)
], EntityLoadConfiguration.prototype, "cultureLoadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("property_option"),
    __metadata("design:type", Object)
], EntityLoadConfiguration.prototype, "propertyLoadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation_option"),
    __metadata("design:type", Object)
], EntityLoadConfiguration.prototype, "relationLoadOption", void 0);
EntityLoadConfiguration = EntityLoadConfiguration_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object, Object, Object])
], EntityLoadConfiguration);
exports.EntityLoadConfiguration = EntityLoadConfiguration;

},{"./culture-load-option":140,"./entity-load-configuration-builder":146,"./property-load-option":177,"./relation-load-option":185,"ta-json":424}],148:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityQueryResult = exports.QueryResultBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const entity_iterator_1 = require("./entity-iterator");
class QueryResultBase {
    constructor(totalItems, offset) {
        guard_1.default.notNegative(totalItems);
        guard_1.default.notNegative(offset);
        this.totalNumberOfResults = totalItems;
        this.offset = offset;
    }
}
exports.QueryResultBase = QueryResultBase;
class EntityQueryResult extends QueryResultBase {
    constructor(client, query, loadConfiguration, entities, totalItems, offset) {
        super(totalItems, offset);
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(query);
        guard_1.default.notNullOrUndefined(entities);
        this._client = client;
        this._query = query;
        this._loadConfiguration = loadConfiguration;
        this.items = [...entities];
    }
    createIterator() {
        return new entity_iterator_1.EntityIterator(this._client, this._query, this._loadConfiguration, this);
    }
}
exports.EntityQueryResult = EntityQueryResult;

},{"../../guard":224,"./entity-iterator":145}],149:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComparisonOperator = void 0;
var ComparisonOperator;
(function (ComparisonOperator) {
    ComparisonOperator[ComparisonOperator["Equals"] = 0] = "Equals";
    ComparisonOperator[ComparisonOperator["NotEquals"] = 1] = "NotEquals";
    ComparisonOperator[ComparisonOperator["Gt"] = 2] = "Gt";
    ComparisonOperator[ComparisonOperator["Lt"] = 3] = "Lt";
    ComparisonOperator[ComparisonOperator["Lte"] = 4] = "Lte";
    ComparisonOperator[ComparisonOperator["Gte"] = 5] = "Gte";
    ComparisonOperator[ComparisonOperator["Contains"] = 6] = "Contains";
    ComparisonOperator[ComparisonOperator["StartsWith"] = 7] = "StartsWith";
    ComparisonOperator[ComparisonOperator["EndsWith"] = 8] = "EndsWith";
})(ComparisonOperator = exports.ComparisonOperator || (exports.ComparisonOperator = {}));

},{}],150:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeFilterOperator = void 0;
var CompositeFilterOperator;
(function (CompositeFilterOperator) {
    CompositeFilterOperator[CompositeFilterOperator["And"] = 0] = "And";
    CompositeFilterOperator[CompositeFilterOperator["Or"] = 1] = "Or";
})(CompositeFilterOperator = exports.CompositeFilterOperator || (exports.CompositeFilterOperator = {}));

},{}],151:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const composite_filter_operator_1 = require("./composite-filter-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Combines multiple queries using a specified operator (e.g. AND or OR).
 */
let CompositeQueryFilter = class CompositeQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Composite;
        /**
         * The child-queries to combine.
         */
        this.children = [];
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], CompositeQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], CompositeQueryFilter.prototype, "combineMethod", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("children"),
    (0, ta_json_1.JsonElementType)(query_filter_1.QueryFilter),
    __metadata("design:type", Array)
], CompositeQueryFilter.prototype, "children", void 0);
CompositeQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Composite),
    __metadata("design:paramtypes", [Object])
], CompositeQueryFilter);
exports.CompositeQueryFilter = CompositeQueryFilter;

},{"./composite-filter-operator":150,"./filter-type":156,"./query-filter":165,"ta-json":424}],152:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatedByQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const user_query_filter_1 = require("./user-query-filter");
let CreatedByQueryFilter = class CreatedByQueryFilter extends user_query_filter_1.UserQueryFilter {
    constructor() {
        super(...arguments);
        this.type = filter_type_1.FilterType.CreatedBy;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], CreatedByQueryFilter.prototype, "type", void 0);
CreatedByQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.CreatedBy)
], CreatedByQueryFilter);
exports.CreatedByQueryFilter = CreatedByQueryFilter;

},{"./filter-type":156,"./user-query-filter":169,"ta-json":424}],153:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreatedOnQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities with "Created on" date set to specified value.
 */
let CreatedOnQueryFilter = class CreatedOnQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.CreatedOn;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], CreatedOnQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], CreatedOnQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    (0, ta_json_1.JsonConverter)(ta_json_1.DateConverter),
    __metadata("design:type", Date)
], CreatedOnQueryFilter.prototype, "value", void 0);
CreatedOnQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.CreatedOn),
    __metadata("design:paramtypes", [Object])
], CreatedOnQueryFilter);
exports.CreatedOnQueryFilter = CreatedOnQueryFilter;

},{"./comparison-operator":149,"./filter-type":156,"./query-filter":165,"ta-json":424}],154:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefinitionQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities of specified definition(s).
 */
let DefinitionQueryFilter = class DefinitionQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Definition;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], DefinitionQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], DefinitionQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Object)
], DefinitionQueryFilter.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ids"),
    (0, ta_json_1.JsonElementType)(Number),
    __metadata("design:type", Object)
], DefinitionQueryFilter.prototype, "ids", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", Object)
], DefinitionQueryFilter.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("names"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Object)
], DefinitionQueryFilter.prototype, "names", void 0);
DefinitionQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Definition),
    __metadata("design:paramtypes", [Object])
], DefinitionQueryFilter);
exports.DefinitionQueryFilter = DefinitionQueryFilter;

},{"./comparison-operator":149,"./filter-type":156,"./query-filter":165,"ta-json":424}],155:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterDataType = void 0;
var FilterDataType;
(function (FilterDataType) {
    FilterDataType[FilterDataType["None"] = 0] = "None";
    FilterDataType[FilterDataType["String"] = 1] = "String";
    FilterDataType[FilterDataType["Int"] = 2] = "Int";
    FilterDataType[FilterDataType["Long"] = 3] = "Long";
    FilterDataType[FilterDataType["Decimal"] = 4] = "Decimal";
    FilterDataType[FilterDataType["Float"] = 5] = "Float";
    FilterDataType[FilterDataType["DateTime"] = 6] = "DateTime";
    FilterDataType[FilterDataType["DateTimeOffset"] = 7] = "DateTimeOffset";
    FilterDataType[FilterDataType["Bool"] = 8] = "Bool";
})(FilterDataType = exports.FilterDataType || (exports.FilterDataType = {}));

},{}],156:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterType = void 0;
/**
 * Types of filter.
 */
var FilterType;
(function (FilterType) {
    FilterType[FilterType["Composite"] = 0] = "Composite";
    FilterType[FilterType["Not"] = 1] = "Not";
    FilterType[FilterType["Property"] = 2] = "Property";
    FilterType[FilterType["Relation"] = 3] = "Relation";
    FilterType[FilterType["CreatedBy"] = 4] = "CreatedBy";
    FilterType[FilterType["ModifiedBy"] = 5] = "ModifiedBy";
    FilterType[FilterType["SecuredAncestors"] = 6] = "SecuredAncestors";
    FilterType[FilterType["Id"] = 7] = "Id";
    FilterType[FilterType["Identifier"] = 8] = "Identifier";
    FilterType[FilterType["Definition"] = 9] = "Definition";
    FilterType[FilterType["Modules"] = 10] = "Modules";
    FilterType[FilterType["CreatedOn"] = 11] = "CreatedOn";
    FilterType[FilterType["ModifiedOn"] = 12] = "ModifiedOn";
})(FilterType = exports.FilterType || (exports.FilterType = {}));

},{}],157:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities with specific id(s).
 */
let IdQueryFilter = class IdQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Id;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], IdQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], IdQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Object)
], IdQueryFilter.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(Number),
    __metadata("design:type", Object)
], IdQueryFilter.prototype, "values", void 0);
IdQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Id),
    __metadata("design:paramtypes", [Object])
], IdQueryFilter);
exports.IdQueryFilter = IdQueryFilter;

},{"./comparison-operator":149,"./filter-type":156,"./query-filter":165,"ta-json":424}],158:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentifierQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities with specific identifier(s).
 */
let IdentifierQueryFilter = class IdentifierQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Identifier;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], IdentifierQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], IdentifierQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Object)
], IdentifierQueryFilter.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Object)
], IdentifierQueryFilter.prototype, "values", void 0);
IdentifierQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Identifier),
    __metadata("design:paramtypes", [Object])
], IdentifierQueryFilter);
exports.IdentifierQueryFilter = IdentifierQueryFilter;

},{"./comparison-operator":149,"./filter-type":156,"./query-filter":165,"ta-json":424}],159:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./comparison-operator"), exports);
__exportStar(require("./composite-filter-operator"), exports);
__exportStar(require("./composite-query-filter"), exports);
__exportStar(require("./createdby-query-filter"), exports);
__exportStar(require("./createdon-query-filter"), exports);
__exportStar(require("./definition-query-filter"), exports);
__exportStar(require("./filter-data-type"), exports);
__exportStar(require("./filter-type"), exports);
__exportStar(require("./id-query-filter"), exports);
__exportStar(require("./identifier-query-filter"), exports);
__exportStar(require("./modifiedby-query-filter"), exports);
__exportStar(require("./modifiedon-query-filter"), exports);
__exportStar(require("./modules-query-filter"), exports);
__exportStar(require("./not-query-filter"), exports);
__exportStar(require("./property-query-filter"), exports);
__exportStar(require("./query-filter"), exports);
__exportStar(require("./relation-connection-type"), exports);
__exportStar(require("./relation-query-filter"), exports);
__exportStar(require("./secured-ancestors-query-filter"), exports);
__exportStar(require("./user-query-filter"), exports);

},{"./comparison-operator":149,"./composite-filter-operator":150,"./composite-query-filter":151,"./createdby-query-filter":152,"./createdon-query-filter":153,"./definition-query-filter":154,"./filter-data-type":155,"./filter-type":156,"./id-query-filter":157,"./identifier-query-filter":158,"./modifiedby-query-filter":160,"./modifiedon-query-filter":161,"./modules-query-filter":162,"./not-query-filter":163,"./property-query-filter":164,"./query-filter":165,"./relation-connection-type":166,"./relation-query-filter":167,"./secured-ancestors-query-filter":168,"./user-query-filter":169}],160:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifiedByQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const user_query_filter_1 = require("./user-query-filter");
let ModifiedByQueryFilter = class ModifiedByQueryFilter extends user_query_filter_1.UserQueryFilter {
    constructor() {
        super(...arguments);
        this.type = filter_type_1.FilterType.ModifiedBy;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], ModifiedByQueryFilter.prototype, "type", void 0);
ModifiedByQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.ModifiedBy)
], ModifiedByQueryFilter);
exports.ModifiedByQueryFilter = ModifiedByQueryFilter;

},{"./filter-type":156,"./user-query-filter":169,"ta-json":424}],161:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifiedOnQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities with "Modified on" date set to specified value.
 */
let ModifiedOnQueryFilter = class ModifiedOnQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.ModifiedOn;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], ModifiedOnQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], ModifiedOnQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    (0, ta_json_1.JsonConverter)(ta_json_1.DateConverter),
    __metadata("design:type", Date)
], ModifiedOnQueryFilter.prototype, "value", void 0);
ModifiedOnQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.ModifiedOn),
    __metadata("design:paramtypes", [Object])
], ModifiedOnQueryFilter);
exports.ModifiedOnQueryFilter = ModifiedOnQueryFilter;

},{"./comparison-operator":149,"./filter-type":156,"./query-filter":165,"ta-json":424}],162:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModulesQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities that belong to one or more specified modules.
 */
let ModulesQueryFilter = class ModulesQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Modules;
        /**
         * Modules to filter on.
         */
        this.modules = [];
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], ModulesQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modules"),
    __metadata("design:type", Array)
], ModulesQueryFilter.prototype, "modules", void 0);
ModulesQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Modules),
    __metadata("design:paramtypes", [Object])
], ModulesQueryFilter);
exports.ModulesQueryFilter = ModulesQueryFilter;

},{"./filter-type":156,"./query-filter":165,"ta-json":424}],163:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Inverts another query.
 */
let NotQueryFilter = class NotQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Not;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], NotQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("Child"),
    __metadata("design:type", query_filter_1.QueryFilter)
], NotQueryFilter.prototype, "child", void 0);
NotQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Not),
    __metadata("design:paramtypes", [Object])
], NotQueryFilter);
exports.NotQueryFilter = NotQueryFilter;

},{"./filter-type":156,"./query-filter":165,"ta-json":424}],164:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const filter_data_type_1 = require("./filter-data-type");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities with a property set to value(s).
 */
let PropertyQueryFilter = class PropertyQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Property;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], PropertyQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], PropertyQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("property"),
    __metadata("design:type", String)
], PropertyQueryFilter.prototype, "property", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("culture"),
    __metadata("design:type", String)
], PropertyQueryFilter.prototype, "culture", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data_type"),
    __metadata("design:type", Number)
], PropertyQueryFilter.prototype, "dataType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Object)
], PropertyQueryFilter.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(Object) //? VALIDATE
    ,
    __metadata("design:type", Object)
], PropertyQueryFilter.prototype, "values", void 0);
PropertyQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Property),
    __metadata("design:paramtypes", [Object])
], PropertyQueryFilter);
exports.PropertyQueryFilter = PropertyQueryFilter;

},{"./comparison-operator":149,"./filter-data-type":155,"./filter-type":156,"./query-filter":165,"ta-json":424}],165:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
/**
 * Base class for query-filters.
 */
let QueryFilter = class QueryFilter {
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], QueryFilter.prototype, "type", void 0);
QueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorProperty)("type")
], QueryFilter);
exports.QueryFilter = QueryFilter;

},{"./filter-type":156,"ta-json":424}],166:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationConnectionType = void 0;
/**
 * Types of relation connection.
 */
var RelationConnectionType;
(function (RelationConnectionType) {
    /**
     * Both direct and indirect ancestors.
     * e.g. asset -\> product -\> campaign: the ancestors of asset contain both products and campaigns.
     */
    RelationConnectionType[RelationConnectionType["All"] = 0] = "All";
    /**
     * Only direct ancestors.
     * e.g. asset -\> product -\> campaign: the ancestors of asset are limited to products.
     */
    RelationConnectionType[RelationConnectionType["Direct"] = 1] = "Direct";
})(RelationConnectionType = exports.RelationConnectionType || (exports.RelationConnectionType = {}));

},{}],167:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
/**
 * Filters on entities that have a relation to a specified entity.
 */
let RelationQueryFilter = class RelationQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.Relation;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], RelationQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation"),
    __metadata("design:type", String)
], RelationQueryFilter.prototype, "relation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_id"),
    __metadata("design:type", Object)
], RelationQueryFilter.prototype, "parentId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_ids"),
    (0, ta_json_1.JsonElementType)(Number),
    __metadata("design:type", Object)
], RelationQueryFilter.prototype, "parentIds", void 0);
RelationQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.Relation),
    __metadata("design:paramtypes", [Object])
], RelationQueryFilter);
exports.RelationQueryFilter = RelationQueryFilter;

},{"./filter-type":156,"./query-filter":165,"ta-json":424}],168:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecuredAncestorsQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const filter_type_1 = require("./filter-type");
const query_filter_1 = require("./query-filter");
const relation_connection_type_1 = require("./relation-connection-type");
/**
 * Filters on entities that have one or more specified secured ancestors.
 */
let SecuredAncestorsQueryFilter = class SecuredAncestorsQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        this.type = filter_type_1.FilterType.SecuredAncestors;
        /**
         * Which ancestors to take into account (e.g. direct or direct+indirect).
         */
        this.connectionType = relation_connection_type_1.RelationConnectionType.All;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", Number)
], SecuredAncestorsQueryFilter.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("connection_type"),
    __metadata("design:type", Number)
], SecuredAncestorsQueryFilter.prototype, "connectionType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Object)
], SecuredAncestorsQueryFilter.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ids"),
    (0, ta_json_1.JsonElementType)(Number),
    __metadata("design:type", Object)
], SecuredAncestorsQueryFilter.prototype, "ids", void 0);
SecuredAncestorsQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(filter_type_1.FilterType.SecuredAncestors),
    __metadata("design:paramtypes", [Object])
], SecuredAncestorsQueryFilter);
exports.SecuredAncestorsQueryFilter = SecuredAncestorsQueryFilter;

},{"./filter-type":156,"./query-filter":165,"./relation-connection-type":166,"ta-json":424}],169:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserQueryFilter = void 0;
const ta_json_1 = require("ta-json");
const comparison_operator_1 = require("./comparison-operator");
const query_filter_1 = require("./query-filter");
const relation_connection_type_1 = require("./relation-connection-type");
/**
 * Base class for queries on user fields.
 */
let UserQueryFilter = class UserQueryFilter extends query_filter_1.QueryFilter {
    constructor(init) {
        super();
        /**
         * Which ancestors to take into account (e.g. direct or direct+indirect).
         */
        this.connectionType = relation_connection_type_1.RelationConnectionType.All;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], UserQueryFilter.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("connection_type"),
    __metadata("design:type", Number)
], UserQueryFilter.prototype, "connectionType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Object)
], UserQueryFilter.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ids"),
    (0, ta_json_1.JsonElementType)(Number),
    __metadata("design:type", Object)
], UserQueryFilter.prototype, "ids", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("username"),
    __metadata("design:type", Object)
], UserQueryFilter.prototype, "username", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("usernames"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Object)
], UserQueryFilter.prototype, "usernames", void 0);
UserQueryFilter = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorProperty)("type"),
    __metadata("design:paramtypes", [Object])
], UserQueryFilter);
exports.UserQueryFilter = UserQueryFilter;

},{"./comparison-operator":149,"./query-filter":165,"./relation-connection-type":166,"ta-json":424}],170:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityIdIterator = void 0;
const guard_1 = __importDefault(require("../../guard"));
const query_iterator_1 = require("./query-iterator");
class EntityIdIterator extends query_iterator_1.QueryIteratorBase {
    constructor(client, query, result) {
        super(query, result);
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    getResultAsync(query) {
        return this._client.querying.queryIdsAsync(query);
    }
}
exports.EntityIdIterator = EntityIdIterator;

},{"../../guard":224,"./query-iterator":178}],171:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityIdQueryResult = void 0;
const guard_1 = __importDefault(require("../../guard"));
const entity_query_result_1 = require("./entity-query-result");
const id_iterator_1 = require("./id-iterator");
class EntityIdQueryResult extends entity_query_result_1.QueryResultBase {
    constructor(client, query, ids, totalItems, offset) {
        super(totalItems, offset);
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(query);
        guard_1.default.notNullOrUndefined(ids);
        this._client = client;
        this._query = query;
        this.items = ids;
    }
    createIterator() {
        return new id_iterator_1.EntityIdIterator(this._client, this._query, this);
    }
}
exports.EntityIdQueryResult = EntityIdQueryResult;

},{"../../guard":224,"./entity-query-result":148,"./id-iterator":170}],172:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadOption = void 0;
var LoadOption;
(function (LoadOption) {
    LoadOption[LoadOption["None"] = 0] = "None";
    LoadOption[LoadOption["Default"] = 1] = "Default";
    LoadOption[LoadOption["Custom"] = 2] = "Custom";
    LoadOption[LoadOption["All"] = 3] = "All";
})(LoadOption = exports.LoadOption || (exports.LoadOption = {}));

},{}],173:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingQueryIteratorBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const query_result_paging_manager_1 = require("./query-result-paging-manager");
class LoadingQueryIteratorBase {
    constructor(query, loadConfiguration, result) {
        guard_1.default.notNullOrUndefined(query);
        guard_1.default.notNullOrUndefined(loadConfiguration);
        //TODO: Make a deep clone?
        this._query = query;
        this._loadConfiguration = loadConfiguration;
        if (result != null) {
            this.current = result;
        }
    }
    canMovePrevious() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMovePrevious(this.current);
    }
    canMoveNext() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMoveNext(this.current);
    }
    movePreviousAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMovePrevious())
                return false;
            this._query.skip = query_result_paging_manager_1.QueryResultPagingManager.getOffsetPreviousPage(this.current);
            this.current = yield this.getResultAsync(this._query, this._loadConfiguration);
            return true;
        });
    }
    moveNextAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMoveNext())
                return false;
            this._query.skip = query_result_paging_manager_1.QueryResultPagingManager.getOffsetNextPage(this.current);
            this.current = yield this.getResultAsync(this._query, this._loadConfiguration);
            return true;
        });
    }
    reset() {
        this.current = null;
    }
}
exports.LoadingQueryIteratorBase = LoadingQueryIteratorBase;

},{"../../guard":224,"./query-result-paging-manager":181}],174:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberLoadOption = void 0;
var MemberLoadOption;
(function (MemberLoadOption) {
    /**
     * Restricts getting members to members that are already loaded.
     */
    MemberLoadOption[MemberLoadOption["LocalOnly"] = 0] = "LocalOnly";
    /**
     * Allows members to be lazy loaded when needed.
     * For performance reasons, this should be used wisely.
     */
    MemberLoadOption[MemberLoadOption["LazyLoading"] = 1] = "LazyLoading";
})(MemberLoadOption = exports.MemberLoadOption || (exports.MemberLoadOption = {}));

},{}],175:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinimalSchema = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
const property_data_1 = require("./property-data");
const relation_data_1 = require("./relation-data");
let MinimalSchema = class MinimalSchema {
    constructor(name) {
        if (name != null) {
            guard_1.default.stringNotNullOrEmpty(name);
            this.definitionName = name;
        }
        this.properties = [];
        this.relations = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definition_name"),
    __metadata("design:type", String)
], MinimalSchema.prototype, "definitionName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("properties"),
    (0, ta_json_1.JsonElementType)(property_data_1.PropertyData),
    __metadata("design:type", Array)
], MinimalSchema.prototype, "properties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relations"),
    (0, ta_json_1.JsonElementType)(relation_data_1.RelationData),
    __metadata("design:type", Array)
], MinimalSchema.prototype, "relations", void 0);
MinimalSchema = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String])
], MinimalSchema);
exports.MinimalSchema = MinimalSchema;

},{"../../guard":224,"./property-data":176,"./relation-data":184,"ta-json":424}],176:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyData = void 0;
const ta_json_1 = require("ta-json");
let PropertyData = class PropertyData {
    constructor(init) {
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], PropertyData.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("multilingual"),
    __metadata("design:type", Boolean)
], PropertyData.prototype, "isMultilingual", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("multivalue"),
    __metadata("design:type", Boolean)
], PropertyData.prototype, "isMultiValue", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("datasource"),
    __metadata("design:type", Boolean)
], PropertyData.prototype, "hasDataSource", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], PropertyData.prototype, "dataType", void 0);
PropertyData = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], PropertyData);
exports.PropertyData = PropertyData;

},{"ta-json":424}],177:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var PropertyLoadOption_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyLoadOption = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
const load_options_1 = require("./load-options");
let PropertyLoadOption = PropertyLoadOption_1 = class PropertyLoadOption {
    constructor(param) {
        this.loadOption = load_options_1.LoadOption.None;
        this.properties = [];
        if (param == null) {
            return;
        }
        else if (param instanceof PropertyLoadOption_1) {
            this.loadOption = param.loadOption;
            this.properties = [...param.properties];
        }
        else if (typeof param === "string") {
            guard_1.default.stringNotNullOrEmpty(param);
            this.loadOption = load_options_1.LoadOption.Custom;
            this.properties = [param];
        }
        else if (param instanceof Array) {
            guard_1.default.arrayNotEmpty(param);
            this.loadOption = load_options_1.LoadOption.Custom;
            this.properties = [...param];
        }
        else {
            this.loadOption = param;
        }
    }
    deepClone() {
        return ta_json_1.JSON.deserialize(ta_json_1.JSON.serialize(this), PropertyLoadOption_1);
    }
};
/**
 * Load no properties.
 */
PropertyLoadOption.None = new PropertyLoadOption_1(load_options_1.LoadOption.None);
/**
 * Load all properties.
 */
PropertyLoadOption.All = new PropertyLoadOption_1(load_options_1.LoadOption.All);
__decorate([
    (0, ta_json_1.JsonProperty)("load_option"),
    __metadata("design:type", Number)
], PropertyLoadOption.prototype, "loadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("properties"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], PropertyLoadOption.prototype, "properties", void 0);
PropertyLoadOption = PropertyLoadOption_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], PropertyLoadOption);
exports.PropertyLoadOption = PropertyLoadOption;

},{"../../guard":224,"./load-options":172,"ta-json":424}],178:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryIteratorBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const query_result_paging_manager_1 = require("./query-result-paging-manager");
class QueryIteratorBase {
    constructor(query, result) {
        guard_1.default.notNullOrUndefined(query);
        this._query = query; //TODO deep copy
        if (result != null) {
            this.current = result;
        }
    }
    canMoveNext() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMoveNext(this.current);
    }
    canMovePrevious() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMovePrevious(this.current);
    }
    moveNextAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMoveNext())
                return false;
            this._query.skip = query_result_paging_manager_1.QueryResultPagingManager.getOffsetNextPage(this.current);
            this.current = yield this.getResultAsync(this._query);
            return true;
        });
    }
    movePreviousAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMovePrevious())
                return false;
            this._query.skip = query_result_paging_manager_1.QueryResultPagingManager.getOffsetPreviousPage(this.current);
            this.current = yield this.getResultAsync(this._query);
            return true;
        });
    }
    reset() {
        this.current = null;
    }
}
exports.QueryIteratorBase = QueryIteratorBase;

},{"../../guard":224,"./query-result-paging-manager":181}],179:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var QueryLoadConfiguration_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryLoadConfiguration = void 0;
const ta_json_1 = require("ta-json");
const culture_load_option_1 = require("./culture-load-option");
const property_load_option_1 = require("./property-load-option");
const relation_load_option_1 = require("./relation-load-option");
let QueryLoadConfiguration = QueryLoadConfiguration_1 = class QueryLoadConfiguration {
    //#endregion
    constructor(init) {
        this.loadEntities = false;
        Object.assign(this, init);
        if (init != null && init.loadEntities == null) {
            this.loadEntities = true;
        }
    }
    deepClone() {
        const result = new QueryLoadConfiguration_1();
        result.loadEntities = this.loadEntities;
        result.cultureLoadOption = this.cultureLoadOption && this.cultureLoadOption.deepClone();
        result.propertyLoadOption = this.propertyLoadOption && this.propertyLoadOption.deepClone();
        result.relationLoadOption = this.relationLoadOption && this.relationLoadOption.deepClone();
        return result;
    }
};
//#region Configurations
QueryLoadConfiguration.Ids = new QueryLoadConfiguration_1({
    cultureLoadOption: culture_load_option_1.CultureLoadOption.None,
    propertyLoadOption: property_load_option_1.PropertyLoadOption.None,
    relationLoadOption: relation_load_option_1.RelationLoadOption.None,
    loadEntities: false,
});
QueryLoadConfiguration.Minimal = new QueryLoadConfiguration_1({
    cultureLoadOption: culture_load_option_1.CultureLoadOption.None,
    propertyLoadOption: property_load_option_1.PropertyLoadOption.None,
    relationLoadOption: relation_load_option_1.RelationLoadOption.None,
});
QueryLoadConfiguration.Default = new QueryLoadConfiguration_1({
    cultureLoadOption: culture_load_option_1.CultureLoadOption.Default,
    propertyLoadOption: property_load_option_1.PropertyLoadOption.All,
    relationLoadOption: relation_load_option_1.RelationLoadOption.None,
});
QueryLoadConfiguration.DefaultCultureFull = new QueryLoadConfiguration_1({
    cultureLoadOption: culture_load_option_1.CultureLoadOption.Default,
    propertyLoadOption: property_load_option_1.PropertyLoadOption.All,
    relationLoadOption: relation_load_option_1.RelationLoadOption.All,
});
QueryLoadConfiguration.Full = new QueryLoadConfiguration_1({
    cultureLoadOption: culture_load_option_1.CultureLoadOption.All,
    propertyLoadOption: property_load_option_1.PropertyLoadOption.All,
    relationLoadOption: relation_load_option_1.RelationLoadOption.All,
});
__decorate([
    (0, ta_json_1.JsonProperty)("load_entities"),
    __metadata("design:type", Boolean)
], QueryLoadConfiguration.prototype, "loadEntities", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("culture_option"),
    (0, ta_json_1.JsonType)(culture_load_option_1.CultureLoadOption),
    __metadata("design:type", Object)
], QueryLoadConfiguration.prototype, "cultureLoadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("property_option"),
    (0, ta_json_1.JsonType)(property_load_option_1.PropertyLoadOption),
    __metadata("design:type", Object)
], QueryLoadConfiguration.prototype, "propertyLoadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation_option"),
    (0, ta_json_1.JsonType)(relation_load_option_1.RelationLoadOption),
    __metadata("design:type", Object)
], QueryLoadConfiguration.prototype, "relationLoadOption", void 0);
QueryLoadConfiguration = QueryLoadConfiguration_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], QueryLoadConfiguration);
exports.QueryLoadConfiguration = QueryLoadConfiguration;

},{"./culture-load-option":140,"./property-load-option":177,"./relation-load-option":185,"ta-json":424}],180:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryRequest = void 0;
const ta_json_1 = require("ta-json");
const query_loading_resource_1 = require("../../models/query-loading-resource");
const query_1 = require("./query");
let QueryRequest = class QueryRequest extends query_loading_resource_1.QueryLoadingResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("Query"),
    __metadata("design:type", query_1.Query)
], QueryRequest.prototype, "query", void 0);
QueryRequest = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], QueryRequest);
exports.QueryRequest = QueryRequest;

},{"../../models/query-loading-resource":290,"./query":183,"ta-json":424}],181:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryResultPagingManager = void 0;
const defaults_1 = require("../../constants/defaults");
class QueryResultPagingManager {
    static canMovePrevious(queryResult) {
        return !!queryResult && queryResult.offset > 0;
    }
    static canMoveNext(queryResult) {
        return (!queryResult || QueryResultPagingManager.getOffsetNextPage(queryResult) < queryResult.totalNumberOfResults);
    }
    static getOffsetPreviousPage(queryResult) {
        return Math.max(queryResult != null ? queryResult.offset - queryResult.items.length : 0, 0);
    }
    static getOffsetNextPage(queryResult) {
        return Math.max(queryResult != null ? queryResult.offset + queryResult.items.length : 0, 0);
    }
    static getIterationPageSize(queryResult) {
        return !queryResult || queryResult.items.length === 0 ? defaults_1.ITERATING.pageSize : queryResult.items.length;
    }
}
exports.QueryResultPagingManager = QueryResultPagingManager;

},{"../../constants/defaults":80}],182:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuerySortOrder = void 0;
/**
 * Sorting order.
 */
var QuerySortOrder;
(function (QuerySortOrder) {
    /**
     * Descending.
     */
    QuerySortOrder[QuerySortOrder["Desc"] = 0] = "Desc";
    /**
     * Ascending.
     */
    QuerySortOrder[QuerySortOrder["Asc"] = 1] = "Asc";
})(QuerySortOrder = exports.QuerySortOrder || (exports.QuerySortOrder = {}));

},{}],183:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = void 0;
const ta_json_1 = require("ta-json");
const query_loading_resource_1 = require("../../models/query-loading-resource");
const query_filter_1 = require("./filters/query-filter");
const sorting_1 = require("./sorting");
let Query = class Query extends query_loading_resource_1.QueryLoadingResource {
    constructor(init) {
        super();
        /**
         * The number of items to skip. If not specified, no items will be skipped.
         */
        this.skip = 0;
        /**
         * The number of items to take. If not specified, the underlying implementation will use a default value.
         */
        this.take = 50;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("filter"),
    __metadata("design:type", query_filter_1.QueryFilter)
], Query.prototype, "filter", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("skip"),
    __metadata("design:type", Number)
], Query.prototype, "skip", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("take"),
    __metadata("design:type", Number)
], Query.prototype, "take", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("sorting"),
    (0, ta_json_1.JsonElementType)(sorting_1.Sorting),
    __metadata("design:type", Array)
], Query.prototype, "sorting", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("scroll_time"),
    __metadata("design:type", Date)
], Query.prototype, "scrollTime", void 0);
Query = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], Query);
exports.Query = Query;

},{"../../models/query-loading-resource":290,"./filters/query-filter":165,"./sorting":189,"ta-json":424}],184:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationData = void 0;
const ta_json_1 = require("ta-json");
const minimal_schema_relation_cardinality_converter_1 = require("../../converters/minimal-schema-relation-cardinality-converter");
const base_1 = require("../base");
let RelationData = class RelationData {
    constructor(init) {
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], RelationData.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cardinality"),
    (0, ta_json_1.JsonConverter)(minimal_schema_relation_cardinality_converter_1.MinimalSchemaRelationCardinalityConverter),
    __metadata("design:type", Number)
], RelationData.prototype, "cardinality", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("role"),
    __metadata("design:type", Number)
], RelationData.prototype, "role", void 0);
RelationData = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RelationData);
exports.RelationData = RelationData;

},{"../../converters/minimal-schema-relation-cardinality-converter":197,"../base":91,"ta-json":424}],185:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var RelationLoadOption_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationLoadOption = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
const type_guards_1 = require("../../type-guards");
const load_options_1 = require("./load-options");
const relation_specification_1 = require("./relation-specification");
let RelationLoadOption = RelationLoadOption_1 = class RelationLoadOption {
    constructor(param) {
        this.loadOption = load_options_1.LoadOption.None;
        this.relations = [];
        if (param == null) {
            return;
        }
        else if (param instanceof RelationLoadOption_1) {
            this.loadOption = param.loadOption;
            this.relations = [...param.relations];
        }
        else if (param instanceof Array) {
            guard_1.default.arrayNotEmpty(param);
            this.loadOption = load_options_1.LoadOption.Custom;
            if (type_guards_1.TypeGuards.isStringArray(param)) {
                this.relations = param.map((relationName) => {
                    return new relation_specification_1.RelationSpecification(relationName);
                });
            }
            else {
                this.relations = [...param];
            }
        }
        else {
            this.loadOption = param;
        }
    }
    deepClone() {
        return ta_json_1.JSON.deserialize(ta_json_1.JSON.serialize(this), RelationLoadOption_1);
    }
};
/**
 * Load no relations.
 */
RelationLoadOption.None = new RelationLoadOption_1(load_options_1.LoadOption.None);
/**
 * Load all relations.
 */
RelationLoadOption.All = new RelationLoadOption_1(load_options_1.LoadOption.All);
__decorate([
    (0, ta_json_1.JsonProperty)("load_option"),
    __metadata("design:type", Number)
], RelationLoadOption.prototype, "loadOption", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relations"),
    (0, ta_json_1.JsonElementType)(relation_specification_1.RelationSpecification),
    __metadata("design:type", Array)
], RelationLoadOption.prototype, "relations", void 0);
RelationLoadOption = RelationLoadOption_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RelationLoadOption);
exports.RelationLoadOption = RelationLoadOption;

},{"../../guard":224,"../../type-guards":322,"./load-options":172,"./relation-specification":186,"ta-json":424}],186:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var RelationSpecification_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationSpecification = void 0;
const ta_json_1 = require("ta-json");
let RelationSpecification = RelationSpecification_1 = class RelationSpecification {
    constructor(name, role) {
        this.role = null;
        this.name = name;
        this.role = role !== null && role !== void 0 ? role : null;
    }
    deepClone() {
        return new RelationSpecification_1(this.name, this.role);
    }
    deepEquals(other) {
        if (!other)
            return false;
        return other.name === this.name && ((!other.role && !this.role) || other.role === this.role);
    }
    onDeserialized() {
        var _a;
        this.role = (_a = this.role) !== null && _a !== void 0 ? _a : null;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], RelationSpecification.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("role"),
    __metadata("design:type", Object)
], RelationSpecification.prototype, "role", void 0);
__decorate([
    (0, ta_json_1.OnDeserialized)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], RelationSpecification.prototype, "onDeserialized", null);
RelationSpecification = RelationSpecification_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Object])
], RelationSpecification);
exports.RelationSpecification = RelationSpecification;

},{"ta-json":424}],187:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkipTakeIteratorBase = void 0;
const guard_1 = __importDefault(require("../../guard"));
const query_result_paging_manager_1 = require("./query-result-paging-manager");
class SkipTakeIteratorBase {
    constructor(param) {
        if (typeof param === "number") {
            guard_1.default.greaterThan(param, 0);
            this._pageSize = param;
        }
        else {
            guard_1.default.notNullOrUndefined(param);
            this._pageSize = query_result_paging_manager_1.QueryResultPagingManager.getIterationPageSize(param);
            this.current = param;
        }
    }
    canMoveNext() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMoveNext(this.current);
    }
    canMovePrevious() {
        return query_result_paging_manager_1.QueryResultPagingManager.canMovePrevious(this.current);
    }
    moveNextAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMoveNext()) {
                return false;
            }
            const offset = query_result_paging_manager_1.QueryResultPagingManager.getOffsetNextPage(this.current);
            this.current = yield this.getResultAsync(offset, this._pageSize);
            return true;
        });
    }
    movePreviousAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.canMovePrevious()) {
                return false;
            }
            const offset = query_result_paging_manager_1.QueryResultPagingManager.getOffsetPreviousPage(this.current);
            this.current = yield this.getResultAsync(offset, this._pageSize);
            return true;
        });
    }
    reset() {
        this.current = null;
    }
}
exports.SkipTakeIteratorBase = SkipTakeIteratorBase;

},{"../../guard":224,"./query-result-paging-manager":181}],188:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SortFieldType = void 0;
/**
 * Type of sorting field.
 */
var SortFieldType;
(function (SortFieldType) {
    /**
     * The field is a property.
     */
    SortFieldType[SortFieldType["Property"] = 0] = "Property";
    /**
     * It's a system field (e.g. CreatedOn, CreatedBy, DefinitionName...).
     */
    SortFieldType[SortFieldType["System"] = 1] = "System";
})(SortFieldType = exports.SortFieldType || (exports.SortFieldType = {}));

},{}],189:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sorting = void 0;
const ta_json_1 = require("ta-json");
const query_sort_order_1 = require("./query-sort-order");
const sort_field_type_1 = require("./sort-field-type");
/**
 * Indicates how to sort the result of a query.
 */
let Sorting = class Sorting {
    constructor(init) {
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("field_type"),
    __metadata("design:type", Number)
], Sorting.prototype, "fieldType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("field"),
    __metadata("design:type", String)
], Sorting.prototype, "field", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("culture"),
    __metadata("design:type", String)
], Sorting.prototype, "culture", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("order"),
    __metadata("design:type", Number)
], Sorting.prototype, "order", void 0);
Sorting = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], Sorting);
exports.Sorting = Sorting;

},{"./query-sort-order":182,"./sort-field-type":188,"ta-json":424}],190:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatedEntityRelationsConverter = void 0;
const relation_resource_converter_1 = require("./relation-resource-converter");
class AggregatedEntityRelationsConverter {
    /**
     * Serializes a string map to {@link PageComponentResource} map.
     *
     * @param value - The map of strings to {@link RelationResource}s
     * @returns A JSON value object.
     */
    serialize(value) {
        const result = {};
        const relationResourceConverter = new relation_resource_converter_1.RelationResourceConverter();
        Object.keys(value).forEach(relationName => {
            const relationResource = value[relationName];
            result[relationName] = relationResourceConverter.serialize(relationResource);
        });
        return result;
    }
    /**
     * Deserializes a JSON object into a string to {@link RelationResource} map.
     *
     * @param value - A JSON object
     * @returns A mapping of strings to {@link RelationResource}s.
     */
    deserialize(value) {
        if (!value) {
            return {};
        }
        const result = {};
        const relationResourceConverter = new relation_resource_converter_1.RelationResourceConverter();
        Object.keys(value).forEach(relationName => {
            const relationResourceData = value[relationName];
            result[relationName] = relationResourceConverter.deserialize(relationResourceData);
        });
        return result;
    }
}
exports.AggregatedEntityRelationsConverter = AggregatedEntityRelationsConverter;

},{"./relation-resource-converter":201}],191:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllFacetValuesChildrenConverter = void 0;
const ta_json_1 = require("ta-json");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const facet_response_resource_1 = require("../models/search/facet-response-resource");
class AllFacetValuesChildrenConverter {
    /**
     * Serializes a mapping of strings to array of FacetResponseResource into a JSON object.
     *
     * @param value - A mapping of strings to array of FacetResponseResource
     *
     * @returns The serialized value.
     */
    serialize(children) {
        const result = Object.keys(children).reduce((serialized, key) => {
            var _a;
            const entries = (_a = children[key]) === null || _a === void 0 ? void 0 : _a.map(entry => ta_json_1.TaJson.serialize(entry));
            return Object.assign(Object.assign({}, serialized), { [key]: entries });
        }, {});
        return result;
    }
    /**
     * Deserializes a JSON object into a mapping of strings to array of FacetResponseResource.
     *
     * @param value - The serialized value
     *
     * @returns A mapping of strings to array of FacetResponseResource.
     */
    deserialize(value) {
        if (!value) {
            return {};
        }
        else if (typeof value !== "object") {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'JSON object', but value was of type '${typeof value}'.`);
        }
        const result = Object.keys(value).reduce((current, key) => {
            var _a;
            const entries = (_a = value[key]) === null || _a === void 0 ? void 0 : _a.map(entry => ta_json_1.TaJson.deserialize(entry, facet_response_resource_1.FacetResponseResource));
            return Object.assign(Object.assign({}, current), { [key]: entries });
        }, {});
        return result;
    }
}
exports.AllFacetValuesChildrenConverter = AllFacetValuesChildrenConverter;

},{"../errors/invalid-operation-error":210,"../models/search/facet-response-resource":301,"ta-json":424}],192:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResourceConverter = void 0;
const api_resource_1 = require("../api/api-resource");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const not_implemented_error_1 = require("../errors/not-implemented-error");
const link_1 = __importDefault(require("../link"));
class ApiResourceConverter {
    /**
     * Not implemented.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    serialize(value) {
        throw new not_implemented_error_1.NotImplementedError("Serialization of an API resource is not implemented.");
    }
    /**
     * Deserializes a JSON object into an ApiResource instance.
     *
     * @param value - A JSON object
     *
     * @returns An ApiResource instance.
     */
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "object" || value instanceof Array) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'object', but value was of type '${typeof value}'.`);
        }
        return Object.keys(value).reduce((apiResource, routeName) => {
            // We will use the Link type purely to be able to access the correct properties and avoid using any.
            const route = value[routeName];
            // We skip empty entries or entries that don't have an href property.
            if (route == null || !route.href) {
                return apiResource;
            }
            // Create proper instances for the route link.
            apiResource[routeName] = new link_1.default(route.href, route.title, route.templated);
            return apiResource;
        }, new api_resource_1.ApiResource());
    }
}
exports.ApiResourceConverter = ApiResourceConverter;

},{"../api/api-resource":43,"../errors/invalid-operation-error":210,"../errors/not-implemented-error":212,"../link":228}],193:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateConverter = void 0;
class DateConverter {
    /**
     * Serializes a date object into its ISO string.
     */
    serialize(property) {
        return property.toISOString();
    }
    /**
     * Deserializes a string value into a date object.
     */
    deserialize(value) {
        return new Date(value);
    }
}
exports.DateConverter = DateConverter;

},{}],194:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileVersionConverter = void 0;
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const fileversion_1 = require("../fileversion");
class FileVersionConverter {
    isFileVersion(arg) {
        return arg.major !== undefined;
    }
    /**
     * Serializes a FileVersion into a string.
     *
     * @param version - A FileVersion
     *
     * @returns A string.
     */
    serialize(version) {
        if (!version) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't serialize falsy value.");
        }
        else if (!this.isFileVersion(version)) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'FileVersion', but value was of type '${typeof version}'.`);
        }
        return version.toString();
    }
    /**
     * Deserializes a string into a FileVersion instance.
     *
     * @param value - A string
     *
     * @returns A FileVersion instance or null.
     */
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "string") {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'string', but value was of type '${typeof value}'.`);
        }
        return fileversion_1.FileVersion.parse(value);
    }
}
exports.FileVersionConverter = FileVersionConverter;

},{"../errors/invalid-operation-error":210,"../fileversion":223}],195:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberConditionConverter = void 0;
const ta_json_1 = require("ta-json");
const base_1 = require("../contracts/base");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
class MemberConditionConverter {
    /**
     * Serializes a MemberCondition instance into JSON Value.
     *
     * @param value - A MemberCondition instance
     *
     * @returns An JSON Value.
     */
    serialize(value) {
        return ta_json_1.TaJson.serialize(value);
    }
    /**
     * Deserializes a JSON Value into a MemberCondition instance.
     *
     * @param value - A JSON Value
     *
     * @returns A MemberCondition instance.
     */
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "object" || value instanceof Array) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'object', but value was of type '${typeof value}'.`);
        }
        const obj = typeof value === "string" ? JSON.parse(value) : value;
        if (obj.definitionId) {
            return ta_json_1.TaJson.deserialize(value, base_1.NoAncestorMemberCondition);
        }
        else if (typeof obj.value === "string") {
            return ta_json_1.TaJson.deserialize(value, base_1.StringMemberCondition);
        }
        else if (typeof obj.value === "boolean") {
            return ta_json_1.TaJson.deserialize(value, base_1.BooleanMemberCondition);
        }
        else if (obj.entityId) {
            return ta_json_1.TaJson.deserialize(value, base_1.RelationMemberCondition);
        }
        else {
            throw new invalid_operation_error_1.InvalidOperationError("Not a known condition format");
        }
    }
}
exports.MemberConditionConverter = MemberConditionConverter;

},{"../contracts/base":91,"../errors/invalid-operation-error":210,"ta-json":424}],196:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberConditionResourceConverter = void 0;
const ta_json_1 = require("ta-json");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const member_condition_resource_1 = require("../models/member-condition-resource");
class MemberConditionResourceConverter {
    /**
     * Serializes a MemberConditionResource instance into JSON Value.
     *
     * @param value - A MemberConditionResource instance
     *
     * @returns An JSON Value.
     */
    serialize(value) {
        return ta_json_1.TaJson.serialize(value);
    }
    /**
     * Deserializes a JSON Value into a MemberConditionResource instance.
     *
     * @param value - A JSON Value
     *
     * @returns A MemberConditionResource instance.
     */
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "object" || value instanceof Array) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'object', but value was of type '${typeof value}'.`);
        }
        const obj = typeof value === "string" ? JSON.parse(value) : value;
        if (obj.definition) {
            return ta_json_1.TaJson.deserialize(value, member_condition_resource_1.NoAncestorMemberConditionResource);
        }
        else if (typeof obj.value === "string") {
            return ta_json_1.TaJson.deserialize(value, member_condition_resource_1.StringMemberConditionResource);
        }
        else if (typeof obj.value === "boolean") {
            return ta_json_1.TaJson.deserialize(value, member_condition_resource_1.BooleanMemberConditionResource);
        }
        else if (this.isLink(obj.value)) {
            return ta_json_1.TaJson.deserialize(value, member_condition_resource_1.RelationMemberConditionResource);
        }
        else {
            throw new invalid_operation_error_1.InvalidOperationError("Not a known condition format");
        }
    }
    isLink(arg) {
        return arg.href !== undefined;
    }
}
exports.MemberConditionResourceConverter = MemberConditionResourceConverter;

},{"../errors/invalid-operation-error":210,"../models/member-condition-resource":266,"ta-json":424}],197:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinimalSchemaRelationCardinalityConverter = void 0;
const base_1 = require("../contracts/base");
var Cardinality;
(function (Cardinality) {
    Cardinality[Cardinality["OneToOne"] = 0] = "OneToOne";
    Cardinality[Cardinality["OneToMany"] = 1] = "OneToMany";
    Cardinality[Cardinality["ManyToMany"] = 2] = "ManyToMany";
})(Cardinality || (Cardinality = {}));
class MinimalSchemaRelationCardinalityConverter {
    serialize(value) {
        switch (value) {
            case base_1.RelationCardinality.ManyToMany:
                return Cardinality.ManyToMany;
            case base_1.RelationCardinality.OneToMany:
                return Cardinality.OneToMany;
            case base_1.RelationCardinality.OneToOne:
                return Cardinality.OneToOne;
        }
    }
    deserialize(value) {
        switch (value) {
            case Cardinality.ManyToMany:
                return base_1.RelationCardinality.ManyToMany;
            case Cardinality.OneToMany:
                return base_1.RelationCardinality.OneToMany;
            case Cardinality.OneToOne:
                return base_1.RelationCardinality.OneToOne;
        }
    }
}
exports.MinimalSchemaRelationCardinalityConverter = MinimalSchemaRelationCardinalityConverter;

},{"../contracts/base":91}],198:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageResourceMenusConverter = void 0;
const ta_json_1 = require("ta-json");
const menu_item_1 = require("../models/pages/menu-item");
class PageResourceMenusConverter {
    /**
     * Serializes a string map of arrays of {@link MenuItem}s.
     *
     * @param value - The map of strings to arrays of {@link MenuItem}s
     * @returns A JSON value object.
     */
    serialize(value) {
        const result = {};
        Object.keys(value).forEach(menuName => {
            const menu = value[menuName];
            result[menuName] = menu.map(menuItem => {
                return ta_json_1.TaJson.serialize(menuItem);
            });
        });
        return result;
    }
    /**
     * Deserializes a JSON object into a string map of arrays of {@link MenuItem}s.
     *
     * @param value - A JSON object
     * @returns A mapping of strings to arrays of {@link MenuItem}s.
     */
    deserialize(value) {
        if (!value) {
            return {};
        }
        const result = {};
        Object.keys(value).forEach(menuName => {
            const menu = value[menuName];
            if (Array.isArray(menu)) {
                result[menuName] = menu.map(menuItem => {
                    return ta_json_1.TaJson.deserialize(menuItem, menu_item_1.MenuItem);
                });
            }
        });
        return result;
    }
}
exports.PageResourceMenusConverter = PageResourceMenusConverter;

},{"../models/pages/menu-item":276,"ta-json":424}],199:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageResourceZonesConverter = void 0;
const ta_json_1 = require("ta-json");
const page_component_resource_1 = require("../models/pages/page-component-resource");
class PageResourceZonesConverter {
    /**
     * Serializes a string map of arrays of {@link PageComponentResource}s.
     *
     * @param value - The map of strings to arrays of {@link PageComponentResource}s
     * @returns A JSON value object.
     */
    serialize(value) {
        const result = {};
        Object.keys(value).forEach(zoneName => {
            const zone = value[zoneName];
            result[zoneName] = zone.map(pageComponentResource => {
                return ta_json_1.TaJson.serialize(pageComponentResource);
            });
        });
        return result;
    }
    /**
     * Deserializes a JSON object into a string map of arrays of {@link PageComponentResource}s.
     *
     * @param value - A JSON object
     * @returns A mapping of strings to arrays of {@link PageComponentResource}s.
     */
    deserialize(value) {
        if (!value) {
            return {};
        }
        const result = {};
        Object.keys(value).forEach(zoneName => {
            const zone = value[zoneName];
            if (Array.isArray(zone)) {
                result[zoneName] = zone.map(pageComponentResource => {
                    return ta_json_1.TaJson.deserialize(pageComponentResource, page_component_resource_1.PageComponentResource);
                });
            }
        });
        return result;
    }
}
exports.PageResourceZonesConverter = PageResourceZonesConverter;

},{"../models/pages/page-component-resource":277,"ta-json":424}],200:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMapResourceConverter = void 0;
const ta_json_1 = require("ta-json");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const link_1 = __importDefault(require("../link"));
const relation_resource_1 = require("../models/relation-resource");
class RelationMapResourceConverter {
    serialize(value) {
        return ta_json_1.TaJson.serialize(value);
    }
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "object" || value instanceof Array) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'JSON', but value was of type '${typeof value}'.`);
        }
        let obj = null;
        typeof value === "string" ? (obj = JSON.parse(value)) : (obj = JSON.parse(JSON.stringify(value)));
        try {
            return Object.keys(obj).reduce((map, relationName) => {
                const resource = obj[relationName];
                map[relationName] = resource.href
                    ? ta_json_1.TaJson.deserialize(resource, link_1.default)
                    : ta_json_1.TaJson.deserialize(resource, relation_resource_1.RelationResource);
                return map;
            }, {});
        }
        catch (ex) {
            throw new invalid_operation_error_1.InvalidOperationError(`Couldn't deserialize this JsonValue - ${ex}.`);
        }
    }
}
exports.RelationMapResourceConverter = RelationMapResourceConverter;

},{"../errors/invalid-operation-error":210,"../link":228,"../models/relation-resource":295,"ta-json":424}],201:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationResourceConverter = void 0;
const ta_json_1 = require("ta-json");
const invalid_operation_error_1 = require("../errors/invalid-operation-error");
const link_1 = __importDefault(require("../link"));
const relation_resource_1 = require("../models/relation-resource");
class RelationResourceConverter {
    /**
     * Serializes a RelationResource or a Link into a JsonValue.
     *
     * @param value - A RelationResource or a Link
     *
     * @returns A Json Value.
     */
    serialize(value) {
        return ta_json_1.TaJson.serialize(value);
    }
    /**
     * Deserializes a JsonValue into a RelationResource or a Link.
     *
     * @param value - A Json Value
     *
     * @returns A RelationResource or a Link.
     */
    deserialize(value) {
        if (!value) {
            throw new invalid_operation_error_1.InvalidOperationError("Can't deserialize falsy value.");
        }
        else if (typeof value !== "object" || value instanceof Array) {
            throw new invalid_operation_error_1.InvalidOperationError(`Expected a value of type 'JSON', but value was of type '${typeof value}'.`);
        }
        const obj = typeof value === "string" ? JSON.parse(value) : JSON.parse(JSON.stringify(value));
        if (obj.href) {
            return ta_json_1.TaJson.deserialize(obj, link_1.default);
        }
        else if (this.isRelationResource(obj)) {
            return ta_json_1.TaJson.deserialize(value, relation_resource_1.RelationResource);
        }
        else {
            throw new invalid_operation_error_1.InvalidOperationError("Not a known format");
        }
    }
    isRelationResource(arg) {
        return arg.self !== undefined;
    }
}
exports.RelationResourceConverter = RelationResourceConverter;

},{"../errors/invalid-operation-error":210,"../link":228,"../models/relation-resource":295,"ta-json":424}],202:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvariantCulture = void 0;
const CONSTANTS = {
    Invariant: "Invariant",
};
exports.InvariantCulture = CONSTANTS.Invariant;

},{}],203:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DirtyValueCalculator {
    setOriginalValue(value) {
        this._originalHashValue = this.computeHash(value);
    }
    isDirty(currentValue) {
        return this.computeHash(currentValue) !== this._originalHashValue;
    }
    computeHash(value) {
        return this.getStringHash(`${typeof value}_${JSON.stringify(value)}`);
    }
    getStringHash(str) {
        let hash1 = 5381;
        let hash2 = 52711;
        let i = str.length;
        while (i--) {
            const char = str.charCodeAt(i);
            hash1 = (hash1 * 33) ^ char;
            hash2 = (hash2 * 33) ^ char;
        }
        return ((hash1 >>> 0) << 12) + (hash2 >>> 0);
    }
}
exports.default = DirtyValueCalculator;

},{}],204:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityLink = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("./link"));
let EntityLink = class EntityLink extends link_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("properties"),
    __metadata("design:type", Object)
], EntityLink.prototype, "properties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("renditions"),
    __metadata("design:type", Object)
], EntityLink.prototype, "renditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityLink.prototype, "permissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", String)
], EntityLink.prototype, "identifier", void 0);
EntityLink = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityLink);
exports.EntityLink = EntityLink;

},{"./link":228,"ta-json":424}],205:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ErrorMessages {
}
exports.default = ErrorMessages;
ErrorMessages.ContentHubClient = Object.freeze({
    IncompatibleVersionsPre3_0: "The JavaScript SDK version and server version are incompatible. The Web SDK is only supported in M 3.0 and later.",
    IncompatibleMinimumVersion: "The JavaScript SDK version ({0}) and server version ({1}) are incompatible. Server requires SDK version of minimum '{2}'.",
    IncompatibleVersion: "The JavaScript SDK version ({0}) and server version ({1}) are incompatible because the SDK is newer than the server. " +
        "Please use an older version of the SDK.",
    NotSupportedFeature: "This feature is not supported in Content Hub version '{0}'. It was introduced in version '{1}'.",
});
ErrorMessages.QueryingClient = Object.freeze({
    MultipleResultsWhenOneExpected: "Server returned multiple entities, when only one was expected.",
    MultipleResults: "Query returned multiple results.",
});
ErrorMessages.EntitiesClient = Object.freeze({
    UnableToExtractEntityIdFromHeader: "Unable to extract entity id from location header.",
    UnableToExtractLocationHeaderFromResponse: "Unable to extract location header from response.",
});
ErrorMessages.PoliciesClient = Object.freeze({
    RelatedIdCannotBeNull: "The id of the entity this policy relates to cannot be null.",
});
ErrorMessages.CultureLoader = Object.freeze({
    CouldNotFindCultures: "Could not find any cultures.",
});
ErrorMessages.NoPermissionsOnNewEntity = "Cannot load permissions on an entity that has not been persisted yet.";
ErrorMessages.UnknownMemberCondition = "MemberCondition '{0}' is not supported.";
ErrorMessages.UnsupportedMemberDefinition = "MemberDefinition with name '{0}' and type '{1}' is not supported.";
ErrorMessages.NoRoleSpecifiedForSelfRelation = "Relation with name '{0}' is self-relation, but had no role specified";
// Entity
ErrorMessages.Entity = Object.freeze({
    CannotLazyLoad: "Cannot do any lazy loading on an entity that has not been persisted yet.",
    CultureRequired: "Culture is required for culture sensitive properties.",
    CultureNotSupported: "Culture insensitive properties do not support cultures.",
    SelfReferencingRelation: "Relation '{0}' is self referencing and multiple relation instances match. Specify the relation role.",
    RelationNameMustMatch: "Relation names do not match.",
    NoPermissionsOnNewEntity: "Cannot load permissions on an entity that has not been persisted yet.",
    PropertyNotFound: "Property with name '{0}' does not exist or is not loaded on entity with id '{1}' and definition '{2}'.",
    PropertyDoesNotExist: "Property with name '{0}' does not exist on definition '{1}'.",
    RelationNotFound: "Relation with name '{0}' does not exist or is not loaded on entity with id '{1}' and definition '{2}'.",
    RelationDoesNotExist: "Relation with name '{0}' does not exist on definition '{1}'.",
    MultipleRelationsFound: "Found multiple relations with the same name and role.",
    SetIdentifierOnExistingEntity: "Cannot set identifier on an existing entity.",
});
ErrorMessages.EntityFactory = Object.freeze({
    DefinitionDoesNotExist: "Definition with name '{0}' does not exist.",
});
ErrorMessages.PropertyFactory = Object.freeze({
    MustBeCultureSensitive: "Property with name '{0}' must be culture sensitive.",
    CannotBeCultureSensitive: "Property with name '{0}' can't be culture sensitive.",
});
// Relation mapper
ErrorMessages.UnsupportedRelation = "A relation with cardinality '{0}' and role '{1}' is not supported.";
// Option list
ErrorMessages.UnknownOptionListType = "Option list type with name '{0}' is not supported.";
ErrorMessages.FinalLifeCycleStatusMapper = Object.freeze({
    UnknownStatus: "LifeCycleStatus '{0}' is not supported.",
});
ErrorMessages.RelationRoleMapper = Object.freeze({
    UnknownRole: "Role '{0}' is not supported.",
});

},{}],206:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentError = void 0;
class ArgumentError extends Error {
    constructor(message) {
        super(message);
        this.name = "ArgumentError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.ArgumentError = ArgumentError;

},{}],207:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationError = void 0;
class AuthenticationError extends Error {
    constructor(message, internalError) {
        super(message);
        this.name = "AuthenticationError";
        Object.setPrototypeOf(this, new.target.prototype);
        this.internalError = internalError;
    }
}
exports.AuthenticationError = AuthenticationError;

},{}],208:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForbiddenError = void 0;
class ForbiddenError extends Error {
    constructor(message) {
        super(message);
        this.name = "ForbiddenError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.ForbiddenError = ForbiddenError;

},{}],209:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalError = void 0;
class InternalError extends Error {
    constructor(message) {
        super(message);
        this.name = "InternalError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.InternalError = InternalError;

},{}],210:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidOperationError = void 0;
class InvalidOperationError extends Error {
    constructor(message) {
        super(message);
        this.name = "InvalidOperationError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.InvalidOperationError = InvalidOperationError;

},{}],211:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotFoundError = void 0;
class NotFoundError extends Error {
    constructor(message, response) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
        this.response = response;
    }
}
exports.NotFoundError = NotFoundError;

},{}],212:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotImplementedError = void 0;
class NotImplementedError extends Error {
    constructor(message) {
        super(message);
        this.name = "NotImplementedError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.NotImplementedError = NotImplementedError;

},{}],213:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotLoadedError = void 0;
class NotLoadedError extends Error {
    constructor(message) {
        super(message);
        this.name = "NotLoadedError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.NotLoadedError = NotLoadedError;

},{}],214:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotSupportedError = void 0;
class NotSupportedError extends Error {
    constructor(message) {
        super(message);
        this.name = "NotSupportedError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.NotSupportedError = NotSupportedError;

},{}],215:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaError = void 0;
class SchemaError extends Error {
    constructor(message) {
        super(message);
        this.name = "SchemaError";
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.SchemaError = SchemaError;

},{}],216:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = void 0;
class ValidationError extends Error {
    constructor(message, ...failures) {
        super(message);
        this.name = "ValidationError";
        Object.setPrototypeOf(this, new.target.prototype);
        this.failures = [...(failures !== null && failures !== void 0 ? failures : [])];
    }
}
exports.ValidationError = ValidationError;

},{}],217:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationFailure = void 0;
class ValidationFailure {
    constructor(message, source) {
        this.message = message !== null && message !== void 0 ? message : null;
        this.source = source !== null && source !== void 0 ? source : null;
    }
    toString() {
        var _a, _b;
        return `${(_a = this.source) !== null && _a !== void 0 ? _a : "No source was specified"}: ${(_b = this.message) !== null && _b !== void 0 ? _b : "No message was specified"}`;
    }
}
exports.ValidationFailure = ValidationFailure;

},{}],218:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebApiError = void 0;
class WebApiError extends Error {
    constructor(message, statusCode, responseMessage) {
        super(message);
        this.name = "WebApiError";
        Object.setPrototypeOf(this, new.target.prototype);
        this.statusCode = statusCode;
        this.responseMessage = responseMessage;
    }
}
exports.WebApiError = WebApiError;

},{}],219:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityFactory = exports.EntityFactoryBase = void 0;
const string_format_1 = __importDefault(require("string-format"));
const entity_construction_args_1 = require("../contracts/base/entity-construction-args");
const culture_load_option_1 = require("../contracts/querying/culture-load-option");
const error_messages_1 = __importDefault(require("../error-messages"));
const argument_error_1 = require("../errors/argument-error");
const guard_1 = __importDefault(require("../guard"));
const load_options_mapper_1 = require("../mappers/load-options-mapper");
const property_factory_1 = require("./property-factory");
class EntityFactoryBase {
    constructor(client, relationFactory, cultureLoader, entityCreator) {
        guard_1.default.notNullOrUndefined(client);
        guard_1.default.notNullOrUndefined(relationFactory);
        guard_1.default.notNullOrUndefined(cultureLoader);
        guard_1.default.notNullOrUndefined(entityCreator);
        this._client = client;
        this._relationFactory = relationFactory;
        this._cultureLoader = cultureLoader;
        this._entityCreator = entityCreator;
    }
    createAsync(param, cultureLoadOption = culture_load_option_1.CultureLoadOption.Default) {
        return __awaiter(this, void 0, void 0, function* () {
            let definition;
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                definition = yield this.getEntityDefinitionAsync(param);
            }
            else {
                guard_1.default.notNullOrUndefined(param);
                definition = param;
            }
            const cultures = yield load_options_mapper_1.LoadOptionsMapper.mapCultureLoadOptionsAsync(cultureLoadOption, this._cultureLoader);
            const properties = property_factory_1.PropertyFactory.createProperties(definition.getPropertyDefinitions(), cultures);
            const relations = this._relationFactory.createRelations(definition.getRelationDefinitions());
            const args = new entity_construction_args_1.EntityConstructionArgs(definition.name, {
                cultures: cultures,
                properties: properties,
                relations: relations,
            });
            const entity = this._entityCreator.createTypedEntity(args);
            entity.startTracking();
            return entity;
        });
    }
    getEntityDefinitionAsync(definitionName) {
        return __awaiter(this, void 0, void 0, function* () {
            const definition = yield this._client.entityDefinitions.getCachedAsync(definitionName);
            if (definition == null) {
                const errorMessage = (0, string_format_1.default)(error_messages_1.default.EntityFactory.DefinitionDoesNotExist, definitionName);
                throw new argument_error_1.ArgumentError(errorMessage);
            }
            return definition;
        });
    }
}
exports.EntityFactoryBase = EntityFactoryBase;
class EntityFactory extends EntityFactoryBase {
    constructor(client, relationFactory, cultureLoader, entityCreator) {
        super(client, relationFactory, cultureLoader, entityCreator);
    }
}
exports.EntityFactory = EntityFactory;

},{"../contracts/base/entity-construction-args":88,"../contracts/querying/culture-load-option":140,"../error-messages":205,"../errors/argument-error":206,"../guard":224,"../mappers/load-options-mapper":238,"./property-factory":221,"string-format":404}],220:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionListFactory = void 0;
const flat_option_list_1 = __importDefault(require("../contracts/base/option-lists/flat-option-list"));
const hierarchical_option_list_1 = __importDefault(require("../contracts/base/option-lists/hierarchical-option-list"));
const guard_1 = __importDefault(require("../guard"));
class OptionListFactory {
    createFlatOptionList(name, labels) {
        guard_1.default.stringNotNullOrEmpty(name);
        const optionList = new flat_option_list_1.default(name, labels);
        return optionList;
    }
    createHierarchicalOptionList(name, labels) {
        guard_1.default.stringNotNullOrEmpty(name);
        const optionList = new hierarchical_option_list_1.default(name, labels);
        return optionList;
    }
}
exports.OptionListFactory = OptionListFactory;

},{"../contracts/base/option-lists/flat-option-list":100,"../contracts/base/option-lists/hierarchical-option-list":101,"../guard":224}],221:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyFactory = void 0;
const string_format_1 = __importDefault(require("string-format"));
const base_1 = require("../contracts/base");
const culture_insensitive_property_1 = require("../contracts/base/culture-insensitive-property");
const culture_sensitive_property_1 = require("../contracts/base/culture-sensitive-property");
const error_messages_1 = __importDefault(require("../error-messages"));
const argument_error_1 = require("../errors/argument-error");
const guard_1 = __importDefault(require("../guard"));
class PropertyFactory {
    static createProperties(definitions, cultures) {
        if (definitions == null || definitions.length === 0) {
            return [];
        }
        const list = [];
        for (const definition of definitions) {
            if (definition.isMultiLanguage && cultures != undefined && cultures.length > 0) {
                const property = this.createCultureSensitiveProperty(definition, cultures);
                list.push(property);
            }
            else {
                const property = this.createCultureInsensitiveProperty(definition);
                list.push(property);
            }
        }
        return list;
    }
    static createCultureSensitiveProperty(definition, cultures) {
        guard_1.default.notNullOrUndefined(definition);
        guard_1.default.notNullOrUndefined(cultures);
        guard_1.default.arrayNotEmpty(cultures);
        guard_1.default.arrayNoneNullOrInvariantCulture(cultures);
        if (!definition.isMultiLanguage) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.PropertyFactory.MustBeCultureSensitive);
            throw new argument_error_1.ArgumentError(errorMessage);
        }
        const property = new culture_sensitive_property_1.CultureSensitiveProperty(definition.name, new base_1.TypeInfo(definition.dataType, definition.isMultiValue), cultures);
        return property;
    }
    static createCultureInsensitiveProperty(definition) {
        guard_1.default.notNullOrUndefined(definition);
        if (definition.isMultiLanguage) {
            const errorMessage = (0, string_format_1.default)(error_messages_1.default.PropertyFactory.CannotBeCultureSensitive, definition.name);
            throw new argument_error_1.ArgumentError(errorMessage);
        }
        const property = new culture_insensitive_property_1.CultureInsensitiveProperty(definition.name, new base_1.TypeInfo(definition.dataType, definition.isMultiValue));
        return property;
    }
}
exports.PropertyFactory = PropertyFactory;

},{"../contracts/base":91,"../contracts/base/culture-insensitive-property":84,"../contracts/base/culture-sensitive-property":85,"../error-messages":205,"../errors/argument-error":206,"../guard":224,"string-format":404}],222:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationFactory = void 0;
const relation_cardinality_1 = require("../contracts/base/relation-cardinality");
const relation_role_1 = require("../contracts/base/relation-role");
const child_to_many_parents_relation_1 = require("../contracts/base/relations/child-to-many-parents-relation");
const child_to_one_parent_relation_1 = require("../contracts/base/relations/child-to-one-parent-relation");
const parent_to_many_children_relation_1 = require("../contracts/base/relations/parent-to-many-children-relation");
const parent_to_one_child_relation_1 = require("../contracts/base/relations/parent-to-one-child-relation");
const guard_1 = __importDefault(require("../guard"));
class RelationFactory {
    constructor(client) {
        this._client = client;
    }
    createChildToManyParentsRelation(definition) {
        const relation = new child_to_many_parents_relation_1.ChildToManyParentsRelation(definition.name, null, this._client);
        return relation;
    }
    createChildToOneParentRelation(definition) {
        const relation = new child_to_one_parent_relation_1.ChildToOneParentRelation(definition.name, null, this._client);
        return relation;
    }
    createParentToManyChildrenRelation(definition) {
        const relation = new parent_to_many_children_relation_1.ParentToManyChildrenRelation(definition.name, null, this._client);
        return relation;
    }
    createParentToOneChildRelation(definition) {
        const relation = new parent_to_one_child_relation_1.ParentToOneChildRelation(definition.name, null, this._client);
        return relation;
    }
    createRelation(definition) {
        guard_1.default.notNullOrUndefined(definition);
        let result = null;
        if (definition.role === relation_role_1.RelationRole.Parent) {
            if (definition.cardinality === relation_cardinality_1.RelationCardinality.ManyToMany ||
                definition.cardinality === relation_cardinality_1.RelationCardinality.OneToMany) {
                result = this.createParentToManyChildrenRelation(definition);
            }
            else if (definition.cardinality === relation_cardinality_1.RelationCardinality.OneToOne) {
                result = this.createParentToOneChildRelation(definition);
            }
        }
        else if (definition.role === relation_role_1.RelationRole.Child) {
            if (definition.cardinality === relation_cardinality_1.RelationCardinality.ManyToMany) {
                result = this.createChildToManyParentsRelation(definition);
            }
            else if (definition.cardinality === relation_cardinality_1.RelationCardinality.OneToOne ||
                definition.cardinality === relation_cardinality_1.RelationCardinality.OneToMany) {
                result = this.createChildToOneParentRelation(definition);
            }
        }
        if (result === null) {
            throw `Relation with name '${definition.name}', cardinality '${definition.cardinality}' and role '${definition.role}' not supported.`; //TODO
        }
        return result;
    }
    createRelations(definitions) {
        if (!definitions || !definitions.length) {
            return [];
        }
        const list = definitions.map(definition => {
            return this.createRelation(definition);
        });
        return list;
    }
}
exports.RelationFactory = RelationFactory;

},{"../contracts/base/relation-cardinality":118,"../contracts/base/relation-role":122,"../contracts/base/relations/child-to-many-parents-relation":124,"../contracts/base/relations/child-to-one-parent-relation":125,"../contracts/base/relations/parent-to-many-children-relation":126,"../contracts/base/relations/parent-to-one-child-relation":127,"../guard":224}],223:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileVersion = void 0;
const guard_1 = __importDefault(require("./guard"));
/**
 * Represents the file version of an assembly
 */
class FileVersion {
    constructor(major, minor, patch = 0, revision = 0) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.revision = revision;
    }
    /**
     * Parses a file version string (format: `<major>.<minor>.<patch>.<revision>`) to an instance.
     *
     * @remarks
     * Throws an error when parsing fails.
     *
     * @param fileVersion - The file version string to parse
     * @returns A file version instance.
     */
    static parse(fileVersion) {
        guard_1.default.stringNotNullOrEmpty(fileVersion);
        try {
            if (!/^(\d+\.){3}\d+$/.test(fileVersion)) {
                throw 0;
            }
            const parts = fileVersion.split(".");
            if (parts.length !== 4)
                throw 0;
            const major = parseInt(parts[0]);
            const minor = parseInt(parts[1]);
            const patch = parseInt(parts[2]);
            const revision = parseInt(parts[3]);
            if (isNaN(major + minor + patch + revision))
                throw 0;
            return new FileVersion(major, minor, patch, revision);
        }
        catch (ex) {
            throw "Invalid version format. (Format: <major>.<minor>.<patch>.<revision>)";
        }
    }
    /**
     * Tries to parse a file version string (see {@link FileVersion.parse}) and returns `null` or the specified default
     * value when it fails.
     *
     * @param fileVersion - The file version string to parse
     * @param defaultValue - The value to return when parsing fails
     * @returns A file version instance or `null`.
     */
    static tryParse(fileVersion, defaultValue = null) {
        try {
            return FileVersion.parse(fileVersion);
        }
        catch (ex) {
            return defaultValue;
        }
    }
    /**
     * Compares if the current instance is smaller than the specified version.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns A boolean with the result.
     */
    smallerThan(otherVersion) {
        return this.compareTo(otherVersion) === -1;
    }
    /**
     * Compares if the current instance is smaller or equal than the specified version.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns A boolean with the result.
     */
    smallerThanOrEqual(otherVersion) {
        return this.compareTo(otherVersion) !== 1;
    }
    /**
     * Compares if the current instance is greater than the specified version.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns A boolean with the result.
     */
    greaterThan(otherVersion) {
        return this.compareTo(otherVersion) === 1;
    }
    /**
     * Compares if the current instance is greater or equal than the specified version.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns A boolean with the result.
     */
    greaterThanOrEqual(otherVersion) {
        return this.compareTo(otherVersion) !== -1;
    }
    /**
     * Compares if the current instance equals (by values) the specified file.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns A boolean with the result.
     */
    equals(otherVersion) {
        return this.compareTo(otherVersion) === 0;
    }
    /**
     * Compare the current instance with the specified file.
     *
     * @param otherVersion - The version to compare the current instance to
     * @returns 0 when the versions are equal,.
     *          1 when the current instance is greater,
     *          -1 when the current instance is smaller
     */
    compareTo(otherVersion) {
        if (otherVersion == null) {
            return 1;
        }
        else if (this.major !== otherVersion.major) {
            return this.major < otherVersion.major ? -1 : 1;
        }
        else if (this.minor !== otherVersion.minor) {
            return this.minor < otherVersion.minor ? -1 : 1;
        }
        else if (this.patch !== otherVersion.patch) {
            return this.patch < otherVersion.patch ? -1 : 1;
        }
        else if (this.revision !== otherVersion.revision) {
            return this.revision < otherVersion.revision ? -1 : 1;
        }
        return 0;
    }
    /**
     * Gets the file version string representation for this instance.
     */
    toString() {
        if (isNaN(this.major + this.minor + this.patch + this.revision))
            return "";
        return `${this.major}.${this.minor}.${this.patch}.${this.revision}`;
    }
}
exports.FileVersion = FileVersion;

},{"./guard":224}],224:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ow_1 = __importDefault(require("ow"));
const culture_info_1 = require("./culture-info");
class Guard {
    static notNull(value, valueName) {
        if (value === null)
            throw `${valueName ? valueName : "Value"} should not be null.`;
    }
    static notUndefined(value, valueName) {
        if (value === undefined)
            throw `${valueName ? valueName : "Value"} should not be undefined.`;
    }
    static notNullOrUndefined(value, valueName) {
        if (value === null || value === undefined)
            throw Error(`${valueName ? valueName : "Value"} should not be null or undefined. Value is ${value === null ? "null" : "undefined"}.`);
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    static parsableInteger(value, valueName) {
        const parsedValue = parseInt(value);
        if (isNaN(parsedValue) || parsedValue.toString() !== value.toString()) {
            throw Error(`${valueName ? valueName : `Value '${value}'`} can not be parsed to an integer.`);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    static parsableFloat(value, valueName) {
        const parsedValue = parseFloat(value);
        if (isNaN(parsedValue) || parsedValue.toString() !== value.toString()) {
            throw Error(`${valueName ? valueName : `Value '${value}'`} can not be parsed to a float/decimal.`);
        }
    }
    static arrayNoneNullOrUndefined(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(item => item == null)) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should not contain null or undefined.`);
        }
    }
    static arrayNoneNullOrEmptyString(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(item => item == null || (typeof item === "string" && (item.length === 0 || item.trim().length === 0)))) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should not contain null, undefined or empty string.`);
        }
    }
    static arrayNoneNullOrInvariantCulture(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(culture => culture == null || culture === culture_info_1.InvariantCulture)) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should not contain null, undefined or '${culture_info_1.InvariantCulture}'.`);
        }
    }
    static isStringArray(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(value => typeof value !== "string")) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should only contain values of type string.`);
        }
    }
    static isIntegerArray(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(value => typeof value !== "number" || !Number.isInteger(value))) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should only contain values of type number.`);
        }
    }
    static isNumberArray(value, valueName, isOptional = false) {
        if (!isOptional) {
            Guard.notNullOrUndefined(value);
        }
        else if (value == null) {
            return;
        }
        if (!Array.isArray(value)) {
            throw Error(`Value ${valueName ? ` '${valueName}' ` : ""}is not an array.`);
        }
        else if (value.some(value => typeof value !== "number")) {
            throw Error(`Array ${valueName ? ` '${valueName}' ` : ""}should only contain values of type number.`);
        }
    }
}
exports.default = Guard;
// Values
Guard.isString = ow_1.default.create(ow_1.default.string);
Guard.isInteger = ow_1.default.create(ow_1.default.number.integer);
// Arrays
Guard.arrayNotEmpty = ow_1.default.create(ow_1.default.array.nonEmpty);
Guard.arrayMaxOne = ow_1.default.create(ow_1.default.array.maxLength(1));
// Strings
Guard.stringNotNullOrEmpty = ow_1.default.create(ow_1.default.string.nonEmpty.validate(value => ({
    validator: value.trim().length > 0,
    message: label => `Expected ${label} not to be an empty or all whitespace string ('${value}').`,
})));
// Ids
Guard.validId = ow_1.default.create(ow_1.default.number.integer.not.infinite.greaterThan(0));
Guard.validIdOrNull = ow_1.default.create(ow_1.default.any(ow_1.default.null, ow_1.default.number.integer.not.infinite.greaterThan(0)));
Guard.validIds = ow_1.default.create(ow_1.default.any(ow_1.default.array.empty, ow_1.default.array.ofType(ow_1.default.number.integer.not.infinite.greaterThan(0))));
// Cultures
Guard.notInvariantCulture = ow_1.default.create(ow_1.default.string.nonEmpty.not.equals(culture_info_1.InvariantCulture));
// Numbers
Guard.notNegative = ow_1.default.create(ow_1.default.number.not.negative);
Guard.greaterThan = (number, minValue) => ow_1.default.create(ow_1.default.number.greaterThan(minValue))(number);
Guard.greaterThanOrEqual = (number, minValue) => ow_1.default.create(ow_1.default.number.greaterThanOrEqual(minValue))(number);
Guard.lessThan = (number, maxValue) => ow_1.default.create(ow_1.default.number.lessThan(maxValue))(number);
Guard.lessThanOrEqual = (number, maxValue) => ow_1.default.create(ow_1.default.number.lessThanOrEqual(maxValue))(number);
Guard.isNumber = ow_1.default.create(ow_1.default.number);

},{"./culture-info":202,"ow":372}],225:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMethod = void 0;
var HttpMethod;
(function (HttpMethod) {
    HttpMethod[HttpMethod["DELETE"] = 0] = "DELETE";
    HttpMethod[HttpMethod["GET"] = 1] = "GET";
    HttpMethod[HttpMethod["HEAD"] = 2] = "HEAD";
    HttpMethod[HttpMethod["OPTIONS"] = 3] = "OPTIONS";
    HttpMethod[HttpMethod["PATCH"] = 4] = "PATCH";
    HttpMethod[HttpMethod["POST"] = 5] = "POST";
    HttpMethod[HttpMethod["PUT"] = 6] = "PUT";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));

},{}],226:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
__exportStar(require("./api/api-routes-dictionary"), exports);
__exportStar(require("./base-types"), exports);
__exportStar(require("./culture-info"), exports);
__exportStar(require("./dirty-value-calculator"), exports);
__exportStar(require("./entity-link"), exports);
__exportStar(require("./error-messages"), exports);
__exportStar(require("./fileversion"), exports);
__exportStar(require("./guard"), exports);
__exportStar(require("./link-helper"), exports);
__exportStar(require("./link"), exports);

},{"./api/api-routes-dictionary":44,"./base-types":50,"./culture-info":202,"./dirty-value-calculator":203,"./entity-link":204,"./error-messages":205,"./fileversion":223,"./guard":224,"./link":228,"./link-helper":227}],227:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkHelper = void 0;
const URITemplate_1 = __importDefault(require("urijs/src/URITemplate"));
const constants_1 = require("./constants");
const api_1 = require("./constants/api");
const argument_error_1 = require("./errors/argument-error");
const guard_1 = __importDefault(require("./guard"));
const link_1 = __importDefault(require("./link"));
const type_guards_1 = require("./type-guards");
class LinkHelper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    //#region DataSources
    nameFromDataSourceAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (link == null)
                return null;
            const variable = yield this.getVariableValueAsync(link, api_1.DATA_SOURCE_BY_NAME.templateName, api_1.DATA_SOURCE_BY_NAME.name);
            return variable || null;
        });
    }
    dataSourceToLinkAsync(name) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            return yield this.bindAsync(api_1.DATA_SOURCE_BY_NAME.templateName, { [api_1.DATA_SOURCE_BY_NAME.name]: name });
        });
    }
    dataSourcesLinkAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.DATA_SOURCES.templateName];
        });
    }
    //#endregion
    //#region Definitions
    nameFromDefinitionAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!link)
                return null;
            const variable = yield this.getVariableValueAsync(link, api_1.ENTITY_DEFINITION_BY_NAME.templateName, api_1.ENTITY_DEFINITION_BY_NAME.name);
            return variable || null;
        });
    }
    namesFromDefinitionsAsync(links) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!links)
                return [];
            const result = [];
            yield Promise.all(links.map((link) => __awaiter(this, void 0, void 0, function* () {
                result.push(yield this.nameFromDefinitionAsync(link));
            })));
            return result;
        });
    }
    definitionToLinkAsync(param, includeConditionalMembers, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                const variables = {
                    [api_1.ENTITY_DEFINITION_BY_NAME.name]: param,
                };
                if (includeConditionalMembers != null) {
                    variables[api_1.ENTITY_DEFINITION_BY_NAME.includeConditionalMembers] = includeConditionalMembers.toString();
                }
                if (loadPermissions != null) {
                    variables[api_1.ENTITY_DEFINITION_BY_NAME.loadPermissions] = loadPermissions.toString();
                }
                return yield this.bindAsync(api_1.ENTITY_DEFINITION_BY_NAME.templateName, variables);
            }
            else {
                guard_1.default.validId(param);
                const variables = {
                    [api_1.ENTITY_DEFINITION_BY_ID.id]: param.toString(),
                };
                if (includeConditionalMembers != null) {
                    variables[api_1.ENTITY_DEFINITION_BY_ID.includeConditionalMembers] = includeConditionalMembers.toString();
                }
                if (loadPermissions != null) {
                    variables[api_1.ENTITY_DEFINITION_BY_ID.loadPermissions] = loadPermissions.toString();
                }
                return yield this.bindAsync(api_1.ENTITY_DEFINITION_BY_ID.templateName, variables);
            }
        });
    }
    definitionToLinkV2Async(name, includeConditionalMembers, loadPermissions) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(name);
            const variables = {
                [api_1.ENTITY_DEFINITION_BY_NAME_V2.name]: name,
            };
            if (includeConditionalMembers != null) {
                variables[api_1.ENTITY_DEFINITION_BY_NAME_V2.includeConditionalMembers] = includeConditionalMembers.toString();
            }
            if (loadPermissions != null) {
                variables[api_1.ENTITY_DEFINITION_BY_NAME_V2.loadPermissions] = loadPermissions.toString();
            }
            return yield this.bindAsync(api_1.ENTITY_DEFINITION_BY_NAME_V2.templateName, variables);
        });
    }
    definitionsToLinkAsync(values, skip, take, includeConditionalMembers, viewMode, loadPermissions, excludeTaxonomyDefinitions, excludeSystemOwnedDefinitions) {
        return __awaiter(this, arguments, void 0, function* () {
            const variables = LinkHelper.applyEntityDefinitionVariables({
                skip,
                take,
                includeConditionalMembers,
                viewMode,
                loadPermissions,
                excludeTaxonomyDefinitions,
                excludeSystemOwnedDefinitions,
            });
            if (values == null && arguments.length === 1) {
                throw new argument_error_1.ArgumentError("Missing function arguments.");
            }
            if (values) {
                guard_1.default.arrayNotEmpty(values);
                if (type_guards_1.TypeGuards.isStringArray(values)) {
                    variables[api_1.ENTITY_DEFINITIONS.definitionsToLoadByName] = values.join();
                }
                else {
                    variables[api_1.ENTITY_DEFINITIONS.definitionsToLoadById] = values.join();
                }
            }
            return yield this.bindAsync(api_1.ENTITY_DEFINITIONS.templateName, variables);
        });
    }
    definitionsLinkAsync(skip, take, includeConditionalMembers, viewMode, loadPermissions, excludeTaxonomyDefinitions, excludeSystemOwnedDefinitions) {
        return __awaiter(this, void 0, void 0, function* () {
            const variables = LinkHelper.applyEntityDefinitionVariables({
                skip,
                take,
                includeConditionalMembers,
                viewMode,
                loadPermissions,
                excludeTaxonomyDefinitions,
                excludeSystemOwnedDefinitions,
            });
            return yield this.bindAsync(api_1.ENTITY_DEFINITIONS.templateName, variables);
        });
    }
    //#endregion
    //#region Entities
    idFromEntityAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!link)
                return null;
            const variable = yield this.getVariableValueAsync(link, api_1.ENTITY_BY_ID.templateName, api_1.ENTITY_BY_ID.id);
            if (!variable)
                return null;
            guard_1.default.parsableInteger(variable);
            return parseInt(variable);
        });
    }
    idsFromEntitiesAsync(links) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!links || links.length === 0)
                return [];
            const list = [];
            for (const link of links) {
                const id = yield this.idFromEntityAsync(link);
                if (id != null && id !== 0) {
                    list.push(id);
                }
            }
            return list;
        });
    }
    entityToLinkAsync(param, culture) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(param);
            if (typeof param === "string") {
                guard_1.default.stringNotNullOrEmpty(param);
                return yield this.bindAsync(api_1.ENTITY_BY_IDENTIFIER.templateName, {
                    [api_1.ENTITY_BY_IDENTIFIER.identifier]: param,
                });
            }
            else {
                const variables = {
                    [api_1.ENTITY_BY_ID.id]: param.toString(),
                };
                if (culture != null) {
                    variables[api_1.ENTITY_BY_ID.culture] = culture;
                }
                return yield this.bindAsync(api_1.ENTITY_BY_ID.templateName, variables);
            }
        });
    }
    relationToLinkAsync(id, name) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(id);
            const variables = {
                [api_1.ENTITY_RELATION_BY_NAME.id]: id.toString(),
            };
            if (name != null) {
                variables[api_1.ENTITY_RELATION_BY_NAME.name] = name;
            }
            return yield this.bindAsync(api_1.ENTITY_RELATION_BY_NAME.templateName, variables);
        });
    }
    entitiesToLinksAsync(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!ids || ids.length === 0)
                return [];
            guard_1.default.validIds(ids);
            const list = [];
            for (const id of ids) {
                const link = yield this.entityToLinkAsync(id);
                if (link) {
                    list.push(link);
                }
            }
            return list;
        });
    }
    identifierFromEntityAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!link)
                return null;
            return yield this.getVariableValueAsync(link, api_1.ENTITY_BY_IDENTIFIER.templateName, api_1.ENTITY_BY_IDENTIFIER.identifier);
        });
    }
    entitiesLinkAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.ENTITIES.templateName];
        });
    }
    permissionsForEntityToLinkAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            return yield this.bindAsync(api_1.PERMISSIONS_FOR_ENTITY.templateName, api_1.PERMISSIONS_FOR_ENTITY.id, id.toString());
        });
    }
    explainUserPermissionsForEntityToLinkAsync(id, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            guard_1.default.validId(userId);
            const variables = {
                [api_1.EXPLAIN_USER_PERMISSIONS_FOR_ENTITY.id]: id.toString(),
                [api_1.EXPLAIN_USER_PERMISSIONS_FOR_ENTITY.userId]: userId.toString(),
            };
            return yield this.bindAsync(api_1.EXPLAIN_USER_PERMISSIONS_FOR_ENTITY.templateName, variables);
        });
    }
    copyEntityToLinkAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            return yield this.bindAsync(api_1.COPY_ENTITY.templateName, api_1.COPY_ENTITY.id, id.toString());
        });
    }
    //#endregion
    //#region Passwords
    setUserPasswordToLinkAsync(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(userId);
            return yield this.bindAsync(api_1.SET_USER_PASSWORD.templateName, api_1.SET_USER_PASSWORD.userId, userId.toString());
        });
    }
    resetPasswordToLinkAsync(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(userId);
            return yield this.bindAsync(api_1.RESET_PASSWORD.templateName, api_1.RESET_PASSWORD.userId, userId.toString());
        });
    }
    //#endregion
    //#region Policy
    policyToLinkAsync(id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(id);
            return yield this.bindAsync(constants_1.API.POLICY_BY_ID.templateName, constants_1.API.POLICY_BY_ID.id, id.toString());
        });
    }
    idFromPolicyAsync(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (link == null) {
                return null;
            }
            const variable = yield this.getVariableValueAsync(link, constants_1.API.POLICY_BY_ID.templateName, constants_1.API.POLICY_BY_ID.id);
            guard_1.default.parsableInteger(variable);
            return parseInt(variable);
        });
    }
    //#endregion
    //#region Commands
    commandToLinkAsync(namespace, command) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(namespace);
            guard_1.default.stringNotNullOrEmpty(command);
            const variables = {
                [constants_1.API.COMMANDS.folder]: namespace,
                [constants_1.API.COMMANDS.command]: command,
            };
            const res = yield this.bindAsync(constants_1.API.COMMANDS.templateName, variables);
            return res;
        });
    }
    //#endregion
    //#region Mails
    sendConfirmationMailToLinkAsync(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.validId(userId);
            return yield this.bindAsync(api_1.SEND_CONFIRMATION_MAIL.templateName, api_1.SEND_CONFIRMATION_MAIL.userId, userId.toString());
        });
    }
    sendNotificationToLinkAsync(notificationType) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(notificationType);
            const task = yield this.bindAsync(api_1.SEND_NOTIFICATION.templateName, api_1.SEND_NOTIFICATION.type, notificationType);
            return task;
        });
    }
    //#endregion
    //#region Aggregates
    aggregateToLinkAsync(aggregateName, entityId, culture, { loadPermissions, loadOptionLists = true, loadSettings = true, loadEntities = true, loadDefinitions = true } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(aggregateName);
            guard_1.default.validId(entityId);
            const variables = {
                [constants_1.API.AGGREGATES.name]: aggregateName,
                [constants_1.API.AGGREGATES.id]: entityId.toString(),
                [constants_1.API.AGGREGATES.loadOptionLists]: loadOptionLists.toString(),
                [constants_1.API.AGGREGATES.loadSettings]: loadSettings.toString(),
                [constants_1.API.AGGREGATES.loadDefinitions]: loadDefinitions.toString(),
                [constants_1.API.AGGREGATES.loadEntities]: loadEntities.toString(),
            };
            if (culture) {
                variables[constants_1.API.AGGREGATES.culture] = culture;
            }
            if (loadPermissions != undefined) {
                variables[constants_1.API.AGGREGATES.loadPermissions] = loadPermissions.toString();
            }
            const aggregateLink = yield this.bindAsync(api_1.AGGREGATES.templateName, variables);
            return aggregateLink;
        });
    }
    //#endregion
    //#region PageResource
    pageResourceToLinkAsync(page, culture, entityId) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.stringNotNullOrEmpty(culture);
            guard_1.default.notNullOrUndefined(page);
            const variables = {
                [constants_1.API.PAGE_BY_IDENTIFIER.culture]: culture,
            };
            if (entityId) {
                variables[constants_1.API.PAGE_BY_IDENTIFIER.entityId] = entityId.toString();
            }
            let templateName = "";
            if (typeof page === "string") {
                guard_1.default.stringNotNullOrEmpty(page);
                variables[constants_1.API.PAGE_BY_IDENTIFIER.identifier] = page;
                templateName = constants_1.API.PAGE_BY_IDENTIFIER.templateName;
            }
            else {
                guard_1.default.validId(page);
                variables[constants_1.API.PAGE_BY_ID.id] = page.toString();
                templateName = constants_1.API.PAGE_BY_ID.templateName;
            }
            const pageLink = yield this.bindAsync(templateName, variables);
            return pageLink;
        });
    }
    //#endregion
    //#region Search
    searchLinkAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.SEARCH.templateName];
        });
    }
    allFacetsAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.ALL_FACETS.templateName];
        });
    }
    //#endregion
    // #region Search
    settingByNameLink(categoryName, settingName) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.bindAsync(api_1.SETTING.templateName, {
                [api_1.SETTING.category]: categoryName,
                [api_1.SETTING.name]: settingName,
            });
        });
    }
    //#endregion
    //#region Upload
    createUploadToLinkAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.UPLOAD.templateName];
        });
    }
    finalizeUploadToLinkAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            return routes[api_1.UPLOAD_FINALIZE.templateName];
        });
    }
    //#endregion
    getVariableValueAsync(link, templateName, variable) {
        return __awaiter(this, void 0, void 0, function* () {
            const routes = yield this._client.api.getApiRoutesAsync();
            const value = link.getVariableValue(routes[templateName], variable);
            return value;
        });
    }
    bindAsync(templateName, value, argument) {
        return __awaiter(this, void 0, void 0, function* () {
            let values = {};
            if (typeof value === "string") {
                guard_1.default.stringNotNullOrEmpty(value);
                guard_1.default.notNullOrUndefined(argument);
                values[value] = argument;
            }
            else {
                values = value;
            }
            const routes = yield this._client.api.getApiRoutesAsync();
            const link = routes[templateName];
            if (!link.templated) {
                return new link_1.default(link.href);
            }
            else {
                const template = new URITemplate_1.default(link.href);
                return new link_1.default(template.expand(values));
            }
        });
    }
    static applyEntityDefinitionVariables({ skip, take, filter, definitionsToLoad, definitionsToLoadByName, definitionsToLoadById, viewMode, loadPermissions, includeConditionalMembers, excludeTaxonomyDefinitions, excludeSystemOwnedDefinitions, }) {
        const variables = {};
        if (skip != null && skip !== 0) {
            variables[api_1.ENTITY_DEFINITIONS.skip] = skip.toString();
        }
        if (take != null) {
            variables[api_1.ENTITY_DEFINITIONS.take] = take.toString();
        }
        if (includeConditionalMembers != null) {
            variables[api_1.ENTITY_DEFINITIONS.includeConditionalMembers] = includeConditionalMembers.toString();
        }
        if (viewMode != null) {
            variables[api_1.ENTITY_DEFINITIONS.viewMode] = viewMode;
        }
        if (loadPermissions != null) {
            variables[api_1.ENTITY_DEFINITIONS.loadPermissions] = loadPermissions.toString();
        }
        if (filter != null) {
            variables[api_1.ENTITY_DEFINITIONS.filter] = filter;
        }
        if (definitionsToLoad != null) {
            variables[api_1.ENTITY_DEFINITIONS.definitionsToLoad] = definitionsToLoad.toString();
        }
        if (definitionsToLoadByName != null) {
            variables[api_1.ENTITY_DEFINITIONS.definitionsToLoadByName] = definitionsToLoadByName.toString();
        }
        if (definitionsToLoadById != null) {
            variables[api_1.ENTITY_DEFINITIONS.definitionsToLoadById] = definitionsToLoadById.toString();
        }
        if (excludeTaxonomyDefinitions != null) {
            variables[api_1.ENTITY_DEFINITIONS.excludeTaxonomyDefinitions] = excludeTaxonomyDefinitions.toString();
        }
        if (excludeSystemOwnedDefinitions != null) {
            variables[api_1.ENTITY_DEFINITIONS.excludeSystemOwnedDefinitions] = excludeSystemOwnedDefinitions.toString();
        }
        return variables;
    }
}
exports.LinkHelper = LinkHelper;

},{"./constants":82,"./constants/api":79,"./errors/argument-error":206,"./guard":224,"./link":228,"./type-guards":322,"urijs/src/URITemplate":432}],228:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var Link_1;
Object.defineProperty(exports, "__esModule", { value: true });
const urijs_1 = __importDefault(require("urijs"));
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("./guard"));
let Link = Link_1 = class Link {
    constructor(uri, title, templated) {
        this.templated = false;
        if (typeof uri === "string") {
            this.href = uri;
        }
        else {
            this.href = uri.href();
        }
        if (title) {
            this.title = title;
        }
        this.templated = !!templated;
    }
    getVariableValue(template, variable) {
        guard_1.default.notNullOrUndefined(template);
        guard_1.default.stringNotNullOrEmpty(variable);
        guard_1.default.stringNotNullOrEmpty(this.href);
        const templateUri = new urijs_1.default(template.href);
        const currentUri = new urijs_1.default(this.href);
        const index = templateUri
            .path()
            .split("/")
            .findIndex(item => item.startsWith(`{${variable}}`));
        if (index) {
            return decodeURIComponent(currentUri.path().split("/")[index]);
        }
        let queryRegexStr = `\?|,${variable.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")},|$`;
        let queryRegex = new RegExp(queryRegexStr);
        if (queryRegex.test(templateUri.query())) {
            queryRegexStr = `(?:^|&)${variable.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")}=([^#&]+)(?:[#&]?|$)`;
            queryRegex = new RegExp(queryRegexStr);
            const matches = queryRegex.exec(currentUri.query());
            if (matches) {
                return decodeURIComponent(matches[1]);
            }
        }
        throw `Variable '${variable}' not found in template '${template.href}'.`;
    }
    static copyFrom(source) {
        return new Link_1(source.href, source.title, source.templated);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("href"),
    __metadata("design:type", String)
], Link.prototype, "href", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("title"),
    __metadata("design:type", String)
], Link.prototype, "title", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("templated"),
    __metadata("design:type", Boolean)
], Link.prototype, "templated", void 0);
Link = Link_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object, String, Boolean])
], Link);
exports.default = Link;

},{"./guard":224,"ta-json":424,"urijs":431}],229:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = void 0;
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Info"] = 1] = "Info";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));

},{}],230:[function(require,module,exports){
"use strict";
/* istanbul ignore file */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const log_level_1 = require("./log-level");
class LoggerBase {
    constructor() {
        this.minimumLogLevel = log_level_1.LogLevel.Info;
    }
    get isDebugEnabled() {
        return this.minimumLogLevel <= log_level_1.LogLevel.Debug;
    }
    get isInfoEnabled() {
        return this.minimumLogLevel <= log_level_1.LogLevel.Info;
    }
    get isWarnEnabled() {
        return this.minimumLogLevel <= log_level_1.LogLevel.Warn;
    }
    get isErrorEnabled() {
        return this.minimumLogLevel <= log_level_1.LogLevel.Error;
    }
    debug(message) {
        if (this.isDebugEnabled) {
            this.handleDebugMessage(typeof message === "function" ? message() : message);
        }
    }
    debugAsync(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isDebugEnabled) {
                const msg = yield message();
                this.handleDebugMessage(msg);
            }
        });
    }
    info(message) {
        if (this.isInfoEnabled) {
            this.handleInfoMessage(typeof message === "function" ? message() : message);
        }
    }
    infoAsync(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isInfoEnabled) {
                const msg = yield message();
                this.handleInfoMessage(msg);
            }
        });
    }
    warn(message) {
        if (this.isWarnEnabled) {
            this.handleWarnMessage(typeof message === "function" ? message() : message);
        }
    }
    warnAsync(message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isWarnEnabled) {
                const msg = yield message();
                this.handleWarnMessage(msg);
            }
        });
    }
    error(message, error) {
        if (this.isErrorEnabled) {
            this.handleErrorMessage(typeof message === "function" ? message() : message, error);
        }
    }
    errorAsync(message, error) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isErrorEnabled) {
                const msg = yield message();
                this.handleErrorMessage(msg, error);
            }
        });
    }
    handleDebugMessage(message) {
        //TODO Fire event?
        this.logDebug(message);
    }
    handleInfoMessage(message) {
        //TODO Fire event?
        this.logInfo(message);
    }
    handleWarnMessage(message) {
        //TODO Fire event?
        this.logWarn(message);
    }
    handleErrorMessage(message, error) {
        //TODO Fire event?
        this.logError(message, error);
    }
}
exports.default = LoggerBase;

},{"./log-level":229}],231:[function(require,module,exports){
"use strict";
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable @typescript-eslint/no-unused-vars */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_base_1 = __importDefault(require("./logger-base"));
class NullLogger extends logger_base_1.default {
    logDebug(message) { }
    logInfo(message) { }
    logWarn(message) { }
    logError(message, error) { }
}
exports.default = NullLogger;

},{"./logger-base":230}],232:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiResourceMapper = void 0;
const api_info_1 = require("../api/api-info");
const api_routes_dictionary_1 = require("../api/api-routes-dictionary");
class ApiResourceMapper {
    static map(resource) {
        const apiRoutes = new api_routes_dictionary_1.ApiRoutesDictionary();
        for (const [key, value] of Object.entries(resource.routes)) {
            apiRoutes[key] = value;
        }
        const apiInfo = new api_info_1.ApiInfo(resource.fileVersion, resource.minimumSdkVersion, apiRoutes);
        return apiInfo;
    }
}
exports.ApiResourceMapper = ApiResourceMapper;

},{"../api/api-info":42,"../api/api-routes-dictionary":44}],233:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionMapper = void 0;
const condition_1 = require("../contracts/policies/condition");
const condition_resource_1 = require("../models/policies/condition-resource");
class ConditionMapper {
    /**
     * Map condition resources to conditions.
     * @param client - An instance of an extended Content Hub client
     * @param conditionResources - A collection of resources to map
     * @returns An array of conditions.
     */
    static mapToConditionsAsync(client, conditionResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (conditionResources == null || conditionResources.length === 0) {
                return [];
            }
            const list = [];
            for (const conditionResource of conditionResources) {
                const condition = yield this.mapToConditionAsync(client, conditionResource);
                if (condition != null) {
                    list.push(condition);
                }
            }
            return list;
        });
    }
    /**
     * Map a condition resource to a condition instance.
     * @param client - An instance of an extended Content Hub client
     * @param conditionResource - A condition resource
     * @returns A condition or null.
     */
    static mapToConditionAsync(client, conditionResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (conditionResource == null) {
                return null;
            }
            const condition = new condition_1.Condition();
            condition.directEntityIds = yield this.mapIdAsync(client, conditionResource.directEntities);
            condition.entityIds = yield this.mapIdAsync(client, conditionResource.entities);
            return condition;
        });
    }
    /**
     * Map condition instances to condition resources.
     * @param client - An instance of an extended Content Hub client
     * @param conditions - A collection of conditions
     * @returns An array of condition resources.
     */
    static mapToConditionResourcesAsync(client, conditions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (conditions == null || conditions.length === 0) {
                return [];
            }
            const resources = [];
            for (const condition of conditions) {
                const conditionResource = yield this.mapToConditionResourceAsync(client, condition);
                if (conditionResource != null) {
                    resources.push(conditionResource);
                }
            }
            return resources;
        });
    }
    /**
     * Map a condition to a condition resource.
     * @param client - An instance of an extended Content Hub client
     * @param condition - A condition instance
     * @returns A condition resource or null.
     */
    static mapToConditionResourceAsync(client, condition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (condition == null) {
                return null;
            }
            const conditionResource = new condition_resource_1.ConditionResource();
            conditionResource.directEntities = yield this.mapEntityLinksAsync(client, condition.directEntityIds);
            conditionResource.entities = yield this.mapEntityLinksAsync(client, condition.entityIds);
            return conditionResource;
        });
    }
    //#region Private methods
    static mapIdAsync(client, idLinks) {
        return __awaiter(this, void 0, void 0, function* () {
            if (idLinks == null) {
                return [];
            }
            const list = yield client.linkHelper.idsFromEntitiesAsync(idLinks);
            return list;
        });
    }
    static mapEntityLinksAsync(client, entityLinks) {
        return __awaiter(this, void 0, void 0, function* () {
            if (entityLinks == null) {
                return [];
            }
            const list = yield client.linkHelper.entitiesToLinksAsync(entityLinks);
            return list;
        });
    }
}
exports.ConditionMapper = ConditionMapper;

},{"../contracts/policies/condition":133,"../models/policies/condition-resource":284}],234:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityCopyOptionsMapper = void 0;
const entity_copy_options_resource_1 = require("../models/entity-copy-options-resource");
const property_copy_option_resource_1 = require("../models/property-copy-option-resource");
const relation_copy_option_resource_1 = require("../models/relation-copy-option-resource");
class EntityCopyOptionsMapper {
    static map(copyOptions) {
        const resource = new entity_copy_options_resource_1.EntityCopyOptionsResource();
        resource.copyProfileId = copyOptions.copyProfileId;
        resource.copyProfileIdentifier = copyOptions.copyProfileIdentifier;
        resource.destinationEntityId = copyOptions.destinationEntityId;
        this.mapOptions(resource, copyOptions);
        return resource;
    }
    static mapOptions(optionsResource, copyOptions) {
        if (copyOptions.relationCopyOptions != null) {
            const relationOptions = [];
            copyOptions.relationCopyOptions.forEach(copyOption => {
                const relationResource = new relation_copy_option_resource_1.RelationCopyOptionResource(copyOption.name, copyOption.method.toString(), null);
                if (copyOption.relatedCopyOptions != null) {
                    const innerOption = new entity_copy_options_resource_1.EntityCopyOptionsResource();
                    this.mapOptions(innerOption, copyOption.relatedCopyOptions);
                    relationResource.relatedCopyOptions = innerOption;
                }
                relationOptions.push(relationResource);
            });
            optionsResource.relationCopyOptions = relationOptions;
        }
        if (copyOptions.propertyCopyOptions == null) {
            return;
        }
        const propertiesOptions = [];
        copyOptions.propertyCopyOptions.forEach(copyOption => {
            const propertyResource = new property_copy_option_resource_1.PropertyCopyOptionResource(copyOption.name, copyOption.method.toString(), copyOption.newValue);
            propertiesOptions.push(propertyResource);
        });
        optionsResource.propertyCopyOptions = propertiesOptions;
    }
}
exports.EntityCopyOptionsMapper = EntityCopyOptionsMapper;

},{"../models/entity-copy-options-resource":260,"../models/property-copy-option-resource":288,"../models/relation-copy-option-resource":292}],235:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionMapper = void 0;
const ta_json_1 = require("ta-json");
const base_1 = require("../contracts/base");
const guard_1 = __importDefault(require("../guard"));
const entity_definition_resource_1 = require("../models/entity-definition-resource");
const member_group_mapper_1 = require("./member-group-mapper");
class EntityDefinitionMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client, "client");
        this._client = client;
        this._memberGroupMapper = new member_group_mapper_1.MemberGroupMapper(client);
    }
    //#region To SDK
    mapEntityDefinitionsAsync(resources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resources)
                return [];
            if (!(resources instanceof Array)) {
                resources = resources.items;
            }
            if (resources.length === 0)
                return [];
            const list = [];
            for (const resource of resources) {
                const entityDefinition = yield this.mapEntityDefinitionAsync(resource);
                if (entityDefinition != null) {
                    list.push(entityDefinition);
                }
            }
            return list;
        });
    }
    mapEntityDefinitionAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resource)
                return null;
            const _a = ta_json_1.TaJson.deserialize(ta_json_1.TaJson.serialize(resource), entity_definition_resource_1.EntityDefinitionResource), { 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            entities, 
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            relatedPaths, createdBy, modifiedBy, permissions, memberGroups, labels } = _a, definitionData = __rest(_a, ["entities", "relatedPaths", "createdBy", "modifiedBy", "permissions", "memberGroups", "labels"]);
            const definition = new base_1.EntityDefinition(Object.assign(Object.assign({}, definitionData), { createdBy: (yield this._client.linkHelper.idFromEntityAsync(createdBy)) || undefined, modifiedBy: (yield this._client.linkHelper.idFromEntityAsync(modifiedBy)) || undefined, memberGroups: yield this._memberGroupMapper.mapMemberGroupsAsync(memberGroups), labels: JSON.parse(JSON.stringify(labels)), permissions }));
            return definition;
        });
    }
    //#endregion
    //#region To API resource
    mapEntityDefinitionResourceAsync(definition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (definition == null)
                return null;
            const memberGroups = yield this._memberGroupMapper.mapMemberGroupResourcesAsync(definition.memberGroups);
            return new entity_definition_resource_1.EntityDefinitionResource({
                name: definition.name,
                id: definition.id || 0,
                displayTemplate: definition.displayTemplate,
                isManualSortingAllowed: definition.isManualSortingAllowed,
                isSystemOwned: definition.isSystemOwned,
                isTaxonomyItemDefinition: definition.isTaxonomyItemDefinition,
                isPathEnabledDefinition: definition.isPathEnabledDefinition,
                memberGroups: memberGroups,
                labels: JSON.parse(JSON.stringify(definition.labels)),
            });
        });
    }
}
exports.EntityDefinitionMapper = EntityDefinitionMapper;

},{"../contracts/base":91,"../guard":224,"../models/entity-definition-resource":262,"./member-group-mapper":242,"ta-json":424}],236:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityMapper = void 0;
const entity_1 = require("../contracts/base/entity");
const entity_construction_args_1 = require("../contracts/base/entity-construction-args");
const guard_1 = __importDefault(require("../guard"));
const entity_resource_1 = require("../models/entity-resource");
const property_mapper_1 = require("./property-mapper");
const related_path_mapper_1 = require("./related-path-mapper");
const relation_mapper_1 = require("./relation-mapper");
const rendition_mapper_1 = require("./rendition-mapper");
const typed_entity_creator_1 = require("./typed-entity-creator");
class EntityMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
        this._propertyMapper = new property_mapper_1.PropertyMapper(client);
        this._relationMapper = new relation_mapper_1.RelationMapper(client);
        this._renditionMapper = new rendition_mapper_1.RenditionMapper(client);
        this._relatedPathMapper = new related_path_mapper_1.RelatedPathMapper();
        this._creator = new typed_entity_creator_1.TypedEntityCreator(client);
    }
    mapEntityAsync(resource, schema) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(resource);
            // The minimal schema is optional, but we should at least have a definition name.
            const definitionName = (_a = schema === null || schema === void 0 ? void 0 : schema.definitionName) !== null && _a !== void 0 ? _a : (yield this._client.linkHelper.nameFromDefinitionAsync(resource.entityDefinition));
            guard_1.default.notNullOrUndefined(definitionName);
            guard_1.default.stringNotNullOrEmpty(definitionName);
            const cultures = new Set(resource.cultures || []); //? Revisit usage of set
            const properties = yield this._propertyMapper.mapPropertiesAsync(resource, [...cultures], schema);
            const relations = yield this._relationMapper.mapRelationsAsync(resource, schema);
            const renditions = this._renditionMapper.mapRenditions(resource.id, resource); //TODO: Extract extension data?
            const relatedPaths = this._relatedPathMapper.mapRelatedPaths(resource);
            const args = new entity_construction_args_1.EntityConstructionArgs(definitionName, {
                id: resource.id || 0,
                identifier: resource.identifier,
                cultures: [...cultures],
                properties: properties,
                relations: relations,
                renditions: renditions,
                relatedPaths: relatedPaths,
            });
            const entity = new entity_1.Entity(this._client, args);
            yield this.mapBasePropertiesToSdkEntityAsync(resource, entity);
            entity.startTracking();
            //TODO: Extension data
            return entity;
        });
    }
    mapEntitiesAsync(collection, schemas) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(collection, "collection");
            guard_1.default.notNullOrUndefined(schemas, "schemas");
            const list = [];
            for (const resource of collection) {
                if (resource == null)
                    continue;
                const definitionName = (yield this._client.linkHelper.nameFromDefinitionAsync(resource.entityDefinition));
                if (!schemas[definitionName]) {
                    throw Error(`Cannot map entity, missing minimal schema for definition '${definitionName}'.`);
                }
                const schema = schemas[definitionName];
                const entity = yield this.mapEntityAsync(resource, schema);
                list.push(entity);
            }
            return list;
        });
    }
    toResourceAsync(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(entity);
            const properties = property_mapper_1.PropertyMapper.mapToPropertyResources(entity);
            const relations = yield this._relationMapper.mapToRelationResourcesAsync(entity);
            const renditions = this._renditionMapper.mapToResource(entity.renditions);
            const resource = yield this.createEntityResourceAsync(entity, properties, relations, renditions);
            return resource;
        });
    }
    mapDirtiesToResourceAsync(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(entity);
            const properties = property_mapper_1.PropertyMapper.mapDirtyProperties(entity);
            const relations = yield this._relationMapper.mapDirtyRelationsAsync(entity);
            const renditions = this._renditionMapper.mapToResource(entity.renditions);
            const resource = yield this.createEntityResourceAsync(entity, properties, relations, renditions);
            return resource;
        });
    }
    createEntityResourceAsync(entity, properties, relations, renditions) {
        return __awaiter(this, void 0, void 0, function* () {
            const definitionLink = yield this._client.linkHelper.definitionToLinkAsync(entity.definitionName);
            const entityLink = entity.id ? yield this._client.linkHelper.entityToLinkAsync(entity.id) : undefined;
            const createdBy = entity.createdBy
                ? yield this._client.linkHelper.entityToLinkAsync(entity.createdBy)
                : undefined;
            const lockedBy = entity.lockedBy ? yield this._client.linkHelper.entityToLinkAsync(entity.lockedBy) : undefined;
            const modifiedBy = entity.modifiedBy
                ? yield this._client.linkHelper.entityToLinkAsync(entity.modifiedBy)
                : undefined;
            const relatedPaths = this._relatedPathMapper.mapToResource(entity);
            const resource = new entity_resource_1.EntityResource({
                entityDefinition: definitionLink,
                id: entity.id || 0,
                identifier: entity.identifier,
                cultures: entity.cultures.map(x => x),
                isRootTaxonomyItem: entity.isRootTaxonomyItem,
                isPathRoot: entity.isPathRoot,
                inheritsSecurity: entity.inheritsSecurity,
                isSystemOwned: entity.isSystemOwned,
                properties: properties,
                relations: relations,
                renditions: renditions,
                isCurrentUserDefault: entity.isCurrentUserDefault,
                languageSupportedOotb: entity.languageSupportedOotb,
                hasPublicLink: entity.hasPublicLink,
                savedSelectionPageName: entity.savedSelectionPageName,
                gatewayLinks: entity.gatewayLinks,
                publicLink: entity.publicLink,
                publicCollectionLink: entity.publicCollectionLink,
                isEnabled: entity.isEnabled,
                modules: entity.modules,
                roles: entity.roles,
                permissions: entity.permissions,
                path: entity.path,
                relatedPaths: relatedPaths,
                lockedOn: entity.lockedOn,
                lockedBy: lockedBy,
                createdOn: entity.createdOn,
                createdBy: createdBy,
                modifiedOn: entity.modifiedOn,
                modifiedBy: modifiedBy,
                version: entity.version,
                self: entityLink,
                combinedPublishStatus: entity.combinedPublishStatus,
                combinedPublishStatusDetails: entity.combinedPublishStatusDetails,
            });
            return resource;
        });
    }
    mapBasePropertiesToSdkEntityAsync(resource, entity) {
        return __awaiter(this, void 0, void 0, function* () {
            const createdBy = resource.createdBy && (yield this._client.linkHelper.idFromEntityAsync(resource.createdBy));
            const lockedBy = resource.lockedBy ? yield this._client.linkHelper.idFromEntityAsync(resource.lockedBy) : null;
            const modifiedBy = resource.modifiedBy && (yield this._client.linkHelper.idFromEntityAsync(resource.modifiedBy));
            //? Create deep copies
            entity.inheritsSecurity = resource.inheritsSecurity;
            entity.isSystemOwned = resource.isSystemOwned;
            entity.lockedOn = resource.lockedOn || null;
            entity.lockedBy = lockedBy;
            entity.createdOn = resource.createdOn;
            entity.createdBy = createdBy || undefined;
            entity.modifiedOn = resource.modifiedOn;
            entity.modifiedBy = modifiedBy || undefined;
            entity.version = resource.version;
            entity.isPathRoot = resource.isPathRoot;
            entity.isRootTaxonomyItem = resource.isRootTaxonomyItem;
            entity.isCurrentUserDefault = resource.isCurrentUserDefault;
            entity.languageSupportedOotb = resource.languageSupportedOotb;
            entity.hasPublicLink = resource.hasPublicLink;
            entity.savedSelectionPageName = resource.savedSelectionPageName;
            entity.gatewayLinks = resource.gatewayLinks;
            entity.publicLink = resource.publicLink;
            entity.publicCollectionLink = resource.publicCollectionLink;
            entity.isEnabled = resource.isEnabled;
            entity.modules = resource.modules;
            entity.roles = resource.roles;
            entity.permissions = resource.permissions;
            entity.path = resource.path;
            entity.combinedPublishStatus = resource.combinedPublishStatus;
            entity.combinedPublishStatusDetails = resource.combinedPublishStatusDetails;
        });
    }
}
exports.EntityMapper = EntityMapper;

},{"../contracts/base/entity":90,"../contracts/base/entity-construction-args":88,"../guard":224,"../models/entity-resource":264,"./property-mapper":247,"./related-path-mapper":249,"./relation-mapper":251,"./rendition-mapper":253,"./typed-entity-creator":256}],237:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FinalLifeCycleStatusMapper = void 0;
const string_format_1 = __importDefault(require("string-format"));
const constants_1 = require("../constants");
const final_life_cycle_status_1 = require("../contracts/content/final-life-cycle-status");
const error_messages_1 = __importDefault(require("../error-messages"));
class FinalLifeCycleStatusMapper {
    static fromString(status) {
        if (status == null) {
            return null;
        }
        switch (status.toLowerCase()) {
            case constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.approved.toLowerCase():
                return final_life_cycle_status_1.FinalLifeCycleStatus.Approved;
            case constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.archived.toLowerCase():
                return final_life_cycle_status_1.FinalLifeCycleStatus.Archived;
            case constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.created.toLowerCase():
                return final_life_cycle_status_1.FinalLifeCycleStatus.Created;
            case constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.rejected.toLowerCase():
                return final_life_cycle_status_1.FinalLifeCycleStatus.Rejected;
            case constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.underReview.toLowerCase():
                return final_life_cycle_status_1.FinalLifeCycleStatus.UnderReview;
            default:
                throw (0, string_format_1.default)(error_messages_1.default.FinalLifeCycleStatusMapper.UnknownStatus, status);
        }
    }
    static toString(status) {
        if (status == null) {
            return null;
        }
        switch (status) {
            case final_life_cycle_status_1.FinalLifeCycleStatus.Approved:
                return constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.approved;
            case final_life_cycle_status_1.FinalLifeCycleStatus.Archived:
                return constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.archived;
            case final_life_cycle_status_1.FinalLifeCycleStatus.Created:
                return constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.created;
            case final_life_cycle_status_1.FinalLifeCycleStatus.Rejected:
                return constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.rejected;
            case final_life_cycle_status_1.FinalLifeCycleStatus.UnderReview:
                return constants_1.DEFINITIONS["FinalLifeCycleStatus"].StatusValues.underReview;
            default:
                throw (0, string_format_1.default)(error_messages_1.default.FinalLifeCycleStatusMapper.UnknownStatus, status);
        }
    }
}
exports.FinalLifeCycleStatusMapper = FinalLifeCycleStatusMapper;

},{"../constants":82,"../contracts/content/final-life-cycle-status":132,"../error-messages":205,"string-format":404}],238:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadOptionsMapper = void 0;
const entity_load_configuration_1 = require("../contracts/querying/entity-load-configuration");
const load_options_1 = require("../contracts/querying/load-options");
const query_load_configuration_1 = require("../contracts/querying/query-load-configuration");
const guard_1 = __importDefault(require("../guard"));
class LoadOptionsMapper {
    static toEntityLoadConfiguration(loadConfiguration) {
        var _a, _b, _c;
        if (loadConfiguration == null) {
            return null;
        }
        return new entity_load_configuration_1.EntityLoadConfiguration(((_a = loadConfiguration.cultureLoadOption) === null || _a === void 0 ? void 0 : _a.deepClone()) || undefined, ((_b = loadConfiguration.propertyLoadOption) === null || _b === void 0 ? void 0 : _b.deepClone()) || undefined, ((_c = loadConfiguration.relationLoadOption) === null || _c === void 0 ? void 0 : _c.deepClone()) || undefined);
    }
    static toQueryLoadConfiguration(loadConfiguration) {
        var _a, _b, _c;
        if (loadConfiguration == null) {
            return null;
        }
        return new query_load_configuration_1.QueryLoadConfiguration({
            cultureLoadOption: ((_a = loadConfiguration.cultureLoadOption) === null || _a === void 0 ? void 0 : _a.deepClone()) || undefined,
            propertyLoadOption: ((_b = loadConfiguration.propertyLoadOption) === null || _b === void 0 ? void 0 : _b.deepClone()) || undefined,
            relationLoadOption: ((_c = loadConfiguration.relationLoadOption) === null || _c === void 0 ? void 0 : _c.deepClone()) || undefined,
        });
    }
    static mapPropertyLoadOptions(options) {
        if (options == null) {
            return [];
        }
        let result = [];
        switch (options.loadOption) {
            case load_options_1.LoadOption.All:
                result = null;
                break;
            case load_options_1.LoadOption.Custom:
                if (options.properties != null) {
                    result = options.properties;
                }
                break;
        }
        return result;
    }
    static mapRelationLoadOptions(options) {
        if (options == null) {
            return [];
        }
        let result = [];
        switch (options.loadOption) {
            case load_options_1.LoadOption.All:
                result = null;
                break;
            case load_options_1.LoadOption.Custom:
                if (options.relations != null) {
                    result = options.relations.map(relationSpecification => relationSpecification.name);
                }
                break;
        }
        return result;
    }
    static mapCultureLoadOptionsAsync(options, loader) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options == null) {
                return [];
            }
            let result = [];
            switch (options.loadOption) {
                case load_options_1.LoadOption.All:
                    guard_1.default.notNullOrUndefined(loader);
                    result = yield loader.getAllCulturesCachedAsync();
                    break;
                case load_options_1.LoadOption.Default:
                    guard_1.default.notNullOrUndefined(loader);
                    if (this.defaultCultures == null) {
                        const defaultCulture = yield loader.getDefaultCultureCachedAsync();
                        this.defaultCultures = defaultCulture != null ? [defaultCulture] : [];
                    }
                    result = this.defaultCultures;
                    break;
                case load_options_1.LoadOption.Custom:
                    if (options.cultures != null) {
                        result = options.cultures;
                    }
                    break;
            }
            return result;
        });
    }
}
exports.LoadOptionsMapper = LoadOptionsMapper;

},{"../contracts/querying/entity-load-configuration":147,"../contracts/querying/load-options":172,"../contracts/querying/query-load-configuration":179,"../guard":224}],239:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MappingUtilities = void 0;
const culture_load_option_1 = require("../contracts/querying/culture-load-option");
// TODO: complete this class
class MappingUtilities {
    //#region Dates
    static toNullableDate(dateTime) {
        return dateTime !== null && dateTime !== void 0 ? dateTime : null;
    }
    //#endregion
    static culturesToLoadOption(cultures) {
        if (cultures == null || cultures.length === 0) {
            return culture_load_option_1.CultureLoadOption.None.deepClone();
        }
        return new culture_load_option_1.CultureLoadOption(cultures);
    }
}
exports.MappingUtilities = MappingUtilities;

},{"../contracts/querying/culture-load-option":140}],240:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberConditionMapper = void 0;
const string_format_1 = __importDefault(require("string-format"));
const member_condition_1 = require("../contracts/base/member-condition");
const error_messages_1 = __importDefault(require("../error-messages"));
const guard_1 = __importDefault(require("../guard"));
const member_condition_resource_1 = require("../models/member-condition-resource");
class MemberConditionMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client, "client");
        this._client = client;
    }
    //#region To SDK
    mapMemberConditionsAsync(conditionResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!conditionResources || conditionResources.length === 0)
                return [];
            const list = [];
            for (const conditionResource of conditionResources) {
                const condition = yield this.mapMemberConditionAsync(conditionResource);
                if (condition != null) {
                    list.push(condition);
                }
            }
            return list;
        });
    }
    mapMemberConditionAsync(conditionResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!conditionResource)
                return null;
            if (conditionResource instanceof member_condition_resource_1.NoAncestorMemberConditionResource) {
                const definitionId = yield this._client.linkHelper.idFromEntityAsync(conditionResource.definition);
                return new member_condition_1.NoAncestorMemberCondition(conditionResource.memberName, definitionId);
            }
            else if (conditionResource instanceof member_condition_resource_1.RelationMemberConditionResource) {
                const valueId = yield this._client.linkHelper.idFromEntityAsync(conditionResource.value);
                return new member_condition_1.RelationMemberCondition(conditionResource.memberName, valueId);
            }
            else if (conditionResource instanceof member_condition_resource_1.StringMemberConditionResource) {
                return new member_condition_1.StringMemberCondition(conditionResource.memberName, conditionResource.value);
            }
            else if (conditionResource instanceof member_condition_resource_1.BooleanMemberConditionResource) {
                return new member_condition_1.BooleanMemberCondition(conditionResource.memberName, conditionResource.value);
            }
            else {
                throw Error((0, string_format_1.default)(error_messages_1.default.UnknownMemberCondition, conditionResource.constructor.name));
            }
        });
    }
    //#endregion
    //#region To API resource
    mapMemberConditionResourcesAsync(conditions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (conditions == null || conditions.length === 0)
                return [];
            const list = [];
            for (const condition of conditions) {
                const resource = yield this.mapMemberConditionResourceAsync(condition);
                if (resource) {
                    list.push(resource);
                }
            }
            return list;
        });
    }
    mapMemberConditionResourceAsync(condition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (condition == null)
                return null;
            let resource;
            if (condition instanceof member_condition_1.NoAncestorMemberCondition) {
                const definitionName = yield this._client.entityDefinitions.getNameCachedAsync(condition.definitionId);
                const definitionLink = yield this._client.linkHelper.definitionToLinkAsync(definitionName);
                resource = new member_condition_resource_1.NoAncestorMemberConditionResource({
                    memberName: condition.memberName,
                    definition: definitionLink,
                });
            }
            else if (condition instanceof member_condition_1.StringMemberCondition) {
                resource = new member_condition_resource_1.StringMemberConditionResource({
                    memberName: condition.memberName,
                    value: condition.value,
                });
            }
            else if (condition instanceof member_condition_1.BooleanMemberCondition) {
                resource = new member_condition_resource_1.BooleanMemberConditionResource({
                    memberName: condition.memberName,
                    value: condition.value,
                });
            }
            else if (condition instanceof member_condition_1.RelationMemberCondition) {
                const definitionLink = yield this._client.linkHelper.entityToLinkAsync(condition.entityId);
                resource = new member_condition_resource_1.RelationMemberConditionResource({
                    memberName: condition.memberName,
                    value: definitionLink,
                });
            }
            else {
                throw Error((0, string_format_1.default)(error_messages_1.default.UnknownMemberCondition, condition.constructor.name));
            }
            return resource;
        });
    }
}
exports.MemberConditionMapper = MemberConditionMapper;

},{"../contracts/base/member-condition":94,"../error-messages":205,"../guard":224,"../models/member-condition-resource":266,"string-format":404}],241:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberDefinitionMapper = void 0;
const string_format_1 = __importDefault(require("string-format"));
const base_1 = require("../contracts/base");
const data_type_1 = __importDefault(require("../contracts/base/data-type"));
const error_messages_1 = __importDefault(require("../error-messages"));
const guard_1 = __importDefault(require("../guard"));
const property_definition_resource_1 = require("../models/property-definition-resource");
const relation_definition_resource_1 = require("../models/relation-definition-resource");
const member_condition_mapper_1 = require("./member-condition-mapper");
const relation_cardinality_mapper_1 = require("./relation-cardinality-mapper");
const relation_role_mapper_1 = require("./relation-role-mapper");
class MemberDefinitionMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client, "client");
        this._client = client;
        this._memberConditionMapper = new member_condition_mapper_1.MemberConditionMapper(client);
    }
    //#region To SDK
    mapMemberDefinitionsAsync(memberDefinitionResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!memberDefinitionResources || memberDefinitionResources.length === 0)
                return [];
            const list = [];
            for (const memberDefinitionResource of memberDefinitionResources) {
                const memberDefinition = yield this.mapMemberDefinitionAsync(memberDefinitionResource);
                if (memberDefinition != null) {
                    list.push(memberDefinition);
                }
            }
            return list;
        });
    }
    mapMemberDefinitionAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resource)
                return null;
            let definition;
            if (resource instanceof property_definition_resource_1.PropertyDefinitionResource) {
                definition = yield this.mapPropertyDefinitionAsync(resource);
            }
            else if (resource instanceof relation_definition_resource_1.RelationDefinitionResource) {
                definition = yield this.mapRelationDefinitionAsync(resource);
            }
            else {
                throw Error("Unknown property definition type.");
            }
            definition.conditions = yield this._memberConditionMapper.mapMemberConditionsAsync(resource.conditions);
            definition.isSecured = resource.isConditional != null ? resource.isSecured : false;
            definition.isSystemOwned = resource.isSystemOwned;
            definition.allowUpdates = resource.allowUpdates != null ? resource.allowUpdates : false;
            definition.labels = JSON.parse(JSON.stringify(resource.labels));
            definition.helpText = JSON.parse(JSON.stringify(resource.helpText));
            definition.canTriggerConditionalMembers = resource.canTriggerConditionalMembers;
            definition.canWrite = resource.canWrite;
            return definition;
        });
    }
    mapPropertyDefinitionAsync(resource) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(resource);
            const initObj = {
                boost: (_a = resource.boost) !== null && _a !== void 0 ? _a : false,
                includeInCompletion: (_b = resource.includeInCompletion) !== null && _b !== void 0 ? _b : false,
                includeInContent: (_c = resource.includeInContent) !== null && _c !== void 0 ? _c : false,
                indexed: (_d = resource.indexed) !== null && _d !== void 0 ? _d : false,
                isMultiLanguage: (_e = resource.isMultiLanguage) !== null && _e !== void 0 ? _e : false,
                isMandatory: (_f = resource.isMandatory) !== null && _f !== void 0 ? _f : false,
                isMultiValue: (_g = resource.isMultiValue) !== null && _g !== void 0 ? _g : false,
                isUnique: (_h = resource.isUnique) !== null && _h !== void 0 ? _h : false,
                canTriggerConditionalMembers: (_j = resource.canTriggerConditionalMembers) !== null && _j !== void 0 ? _j : false,
                canWrite: (_k = resource.canWrite) !== null && _k !== void 0 ? _k : false,
                ignoreOnExport: (_l = resource.ignoreOnExport) !== null && _l !== void 0 ? _l : false,
                storedInGraph: (_m = resource.storedInGraph) !== null && _m !== void 0 ? _m : false,
                conditionalValidation: resource.conditionalValidation,
            };
            switch (resource.type) {
                case data_type_1.default.Boolean:
                    return new base_1.BooleanPropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.DateTime:
                    return new base_1.DateTimePropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.DateTimeOffset:
                    return new base_1.DateTimeOffsetPropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.Decimal:
                    return new base_1.DecimalPropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.Integer:
                    return new base_1.IntegerPropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.Json:
                    const jsonPropResource = resource;
                    return new base_1.JsonPropertyDefinition(resource.name, Object.assign(Object.assign({}, initObj), { contentType: jsonPropResource.contentType }));
                case data_type_1.default.Long:
                    return new base_1.LongPropertyDefinition(resource.name, Object.assign({}, initObj));
                case data_type_1.default.String:
                    const stringPropResource = resource;
                    const dataSourceName = stringPropResource.dataSource &&
                        (yield this._client.linkHelper.nameFromDataSourceAsync(stringPropResource.dataSource));
                    return new base_1.StringPropertyDefinition(resource.name, Object.assign(Object.assign({}, initObj), { contentType: stringPropResource.contentType, validationExpression: stringPropResource.validationExpression, dataSourceName: dataSourceName }));
                default:
                    throw (0, string_format_1.default)(error_messages_1.default.UnsupportedMemberDefinition, resource.name, data_type_1.default[resource.type]);
            }
        });
    }
    mapRelationDefinitionAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(resource);
            guard_1.default.notNullOrUndefined(resource.role, "role");
            guard_1.default.notNullOrUndefined(resource.cardinality, "cardinality");
            const associatedEntityDefinitionName = yield this._client.linkHelper.nameFromDefinitionAsync(resource.associatedEntityDefinition);
            const relationDefinition = new base_1.RelationDefinition(resource.name, {
                allowNavigation: resource.allowNavigation,
                associatedEntityDefinitionName: associatedEntityDefinitionName != null ? associatedEntityDefinitionName : undefined,
                pathHierarchyScore: resource.pathHierarchyScore,
                childIsMandatory: resource.childIsMandatory != null ? resource.childIsMandatory : false,
                parentIsMandatory: resource.parentIsMandatory != null ? resource.parentIsMandatory : false,
                completionIsCopied: resource.completionIsCopied,
                contentIsCopied: resource.contentIsCopied,
                inheritsSecurity: resource.inheritsSecurity,
                isNested: resource.isNested,
                isPathHierarchyRelation: resource.isPathHierarchyRelation,
                isPathRelation: resource.isPathRelation,
                isRenditionRelation: resource.isRenditionRelation,
                isTaxonomyHierarchyRelation: resource.isTaxonomyHierarchyRelation,
                isTaxonomyRelation: resource.isTaxonomyRelation,
                associatedLabels: JSON.parse(JSON.stringify(resource.associatedLabels)),
                nestedPermissions: resource.nestedPermissions,
                cardinality: relation_cardinality_mapper_1.RelationCardinalityMapper.mapToEnumValue(resource.cardinality),
                role: relation_role_mapper_1.RelationRoleMapper.mapToEnumValue(resource.role),
                childConditionalValidation: resource.childConditionalValidation,
                parentConditionalValidation: resource.parentConditionalValidation,
            });
            if (resource.nestedProperties != null) {
                relationDefinition.nestedProperties.push(...resource.nestedProperties);
            }
            return relationDefinition;
        });
    }
    //#endregion
    //#region To API resource
    mapMemberDefinitionResourcesAsync(memberDefinitions) {
        return __awaiter(this, void 0, void 0, function* () {
            if (memberDefinitions == null || memberDefinitions.length === 0)
                return [];
            const list = [];
            for (const memberDefinition of memberDefinitions) {
                const resource = yield this.mapMemberDefinitionResourceAsync(memberDefinition);
                if (resource) {
                    list.push(resource);
                }
            }
            return list;
        });
    }
    mapMemberDefinitionResourceAsync(memberDefinition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!memberDefinition)
                return null;
            let resource;
            if (memberDefinition instanceof base_1.PropertyDefinition) {
                resource = yield this.mapPropertyDefinitionResourceAsync(memberDefinition);
            }
            else if (memberDefinition instanceof base_1.RelationDefinition) {
                resource = yield this.mapRelationDefinitionResourceAsync(memberDefinition);
            }
            else {
                throw (0, string_format_1.default)(error_messages_1.default.UnsupportedMemberDefinition, memberDefinition.name, data_type_1.default[memberDefinition.type]);
            }
            if (!resource)
                return null;
            resource.helpText = JSON.parse(JSON.stringify(memberDefinition.helpText));
            resource.labels = JSON.parse(JSON.stringify(memberDefinition.labels));
            resource.conditions = yield this._memberConditionMapper.mapMemberConditionResourcesAsync(memberDefinition.conditions);
            resource.isConditional = memberDefinition.isConditional;
            resource.isSecured = memberDefinition.isSecured;
            resource.isSystemOwned = memberDefinition.isSystemOwned;
            resource.name = memberDefinition.name;
            resource.allowUpdates = memberDefinition.allowUpdates;
            resource.canTriggerConditionalMembers = memberDefinition.canTriggerConditionalMembers;
            resource.canWrite = memberDefinition.canWrite;
            return resource;
        });
    }
    mapPropertyDefinitionResourceAsync(definition) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            if (!definition)
                return null;
            let resource;
            const initObj = {
                type: definition.type,
                name: definition.name,
                boost: definition.boost != null ? definition.boost : false,
                includeInCompletion: definition.includeInCompletion,
                includeInContent: definition.includeInContent,
                indexed: definition.indexed,
                isMandatory: definition.isMandatory,
                isUnique: definition.isUnique,
                isMultiLanguage: definition.isMultiLanguage,
                isMultiValue: definition.isMultiValue,
                canTriggerConditionalMembers: (_a = definition.canTriggerConditionalMembers) !== null && _a !== void 0 ? _a : false,
                canWrite: (_b = definition.canWrite) !== null && _b !== void 0 ? _b : false,
                ignoreOnExport: (_c = definition.ignoreOnExport) !== null && _c !== void 0 ? _c : false,
                storedInGraph: (_d = definition.storedInGraph) !== null && _d !== void 0 ? _d : false,
            };
            switch (definition.type) {
                case data_type_1.default.Boolean:
                    resource = new property_definition_resource_1.BooleanPropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.DateTime:
                    resource = new property_definition_resource_1.DateTimePropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.DateTimeOffset:
                    resource = new property_definition_resource_1.DateTimeOffsetPropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.Decimal:
                    resource = new property_definition_resource_1.DecimalPropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.Integer:
                    resource = new property_definition_resource_1.IntegerPropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.Json:
                    const jsonPropDefinition = definition;
                    resource = new property_definition_resource_1.JsonPropertyDefinitionResource(Object.assign(Object.assign({}, initObj), { contentType: jsonPropDefinition.contentType }));
                    break;
                case data_type_1.default.Long:
                    resource = new property_definition_resource_1.LongPropertyDefinitionResource(Object.assign({}, initObj));
                    break;
                case data_type_1.default.String:
                    const stringPropDefinition = definition;
                    const dataSourceLink = stringPropDefinition.dataSourceName &&
                        (yield this._client.linkHelper.dataSourceToLinkAsync(stringPropDefinition.dataSourceName));
                    resource = new property_definition_resource_1.StringPropertyDefinitionResource(Object.assign(Object.assign({}, initObj), { contentType: stringPropDefinition.contentType, validationExpression: stringPropDefinition.validationExpression, dataSource: dataSourceLink || null }));
                    break;
                default:
                    throw (0, string_format_1.default)(error_messages_1.default.UnsupportedMemberDefinition, definition.name, data_type_1.default[definition.type]);
            }
            return resource;
        });
    }
    mapRelationDefinitionResourceAsync(definition) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!definition)
                return null;
            const associatedEntityDefinitionLink = yield this._client.linkHelper.definitionToLinkAsync(definition.associatedEntityDefinitionName);
            return new relation_definition_resource_1.RelationDefinitionResource({
                associatedEntityDefinition: associatedEntityDefinitionLink,
                allowNavigation: definition.allowNavigation,
                associatedLabels: JSON.parse(JSON.stringify(definition.associatedLabels)),
                pathHierarchyScore: definition.pathHierarchyScore,
                childIsMandatory: definition.childIsMandatory,
                completionIsCopied: definition.completionIsCopied,
                contentIsCopied: definition.contentIsCopied,
                inheritsSecurity: definition.inheritsSecurity,
                isNested: definition.isNested,
                isPathHierarchyRelation: definition.isPathHierarchyRelation,
                isPathRelation: definition.isPathRelation,
                isRenditionRelation: definition.isRenditionRelation,
                isTaxonomyHierarchyRelation: definition.isTaxonomyHierarchyRelation,
                isTaxonomyRelation: definition.isTaxonomyRelation,
                nestedPermissions: definition.nestedPermissions,
                nestedProperties: JSON.parse(JSON.stringify(definition.nestedProperties)),
                parentIsMandatory: definition.parentIsMandatory,
                cardinality: relation_cardinality_mapper_1.RelationCardinalityMapper.mapToType(definition.cardinality),
                role: relation_role_mapper_1.RelationRoleMapper.mapToType(definition.role),
                childConditionalValidation: definition.childConditionalValidation,
                parentConditionalValidation: definition.parentConditionalValidation,
            });
        });
    }
}
exports.MemberDefinitionMapper = MemberDefinitionMapper;

},{"../contracts/base":91,"../contracts/base/data-type":86,"../error-messages":205,"../guard":224,"../models/property-definition-resource":289,"../models/relation-definition-resource":293,"./member-condition-mapper":240,"./relation-cardinality-mapper":250,"./relation-role-mapper":252,"string-format":404}],242:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberGroupMapper = void 0;
const member_group_1 = require("../contracts/base/member-group");
const guard_1 = __importDefault(require("../guard"));
const member_group_resource_1 = require("../models/member-group-resource");
const member_condition_mapper_1 = require("./member-condition-mapper");
const member_definition_mapper_1 = require("./member-definition-mapper");
class MemberGroupMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client, "client");
        this._client = client;
        this._memberDefinitionMapper = new member_definition_mapper_1.MemberDefinitionMapper(client);
        this._memberConditionMapper = new member_condition_mapper_1.MemberConditionMapper(client);
    }
    //#region To SDK
    mapMemberGroupsAsync(groupResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!groupResources || groupResources.length === 0)
                return [];
            const list = [];
            for (const resource of groupResources) {
                const group = yield this.mapMemberGroupAsync(resource);
                if (group != null) {
                    list.push(group);
                }
            }
            return list;
        });
    }
    mapMemberGroupAsync(groupResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!groupResource)
                return null;
            const memberGroup = new member_group_1.MemberGroup({
                name: groupResource.name,
                isSecured: groupResource.isSecured || false,
                isSystemOwned: groupResource.isSystemOwned,
                contentGroup: groupResource.contentGroup,
                conditions: yield this._memberConditionMapper.mapMemberConditionsAsync(groupResource.conditions),
                memberDefinitions: yield this._memberDefinitionMapper.mapMemberDefinitionsAsync(groupResource.memberDefinitions),
                labels: JSON.parse(JSON.stringify(groupResource.labels)),
            });
            return memberGroup;
        });
    }
    //#endregion
    //#region To API resource
    mapMemberGroupResourcesAsync(memberGroups) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!memberGroups || memberGroups.length === 0)
                return [];
            const list = [];
            for (const memberGroup of memberGroups) {
                const resource = yield this.mapMemberGroupResourceAsync(memberGroup);
                if (resource) {
                    list.push(resource);
                }
            }
            return list;
        });
    }
    mapMemberGroupResourceAsync(memberGroup) {
        return __awaiter(this, void 0, void 0, function* () {
            if (memberGroup == null)
                return null;
            const conditions = yield this._memberConditionMapper.mapMemberConditionResourcesAsync(memberGroup.conditions);
            const memberDefinitions = yield this._memberDefinitionMapper.mapMemberDefinitionResourcesAsync(memberGroup.memberDefinitions);
            const resource = new member_group_resource_1.MemberGroupResource({
                name: memberGroup.name,
                isSecured: memberGroup.isSecured != null ? memberGroup.isSecured : false,
                isSystemOwned: memberGroup.isSystemOwned != null ? memberGroup.isSystemOwned : false,
                contentGroup: memberGroup.contentGroup,
                labels: JSON.parse(JSON.stringify(memberGroup.labels || {})),
                conditions: conditions,
                isConditional: memberGroup.isConditional,
                memberDefinitions: memberDefinitions,
            });
            return resource;
        });
    }
}
exports.MemberGroupMapper = MemberGroupMapper;

},{"../contracts/base/member-group":97,"../guard":224,"../models/member-group-resource":268,"./member-condition-mapper":240,"./member-definition-mapper":241}],243:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberSecurityMapper = void 0;
const member_policy_1 = require("../contracts/policies/member-policy");
const member_policy_resource_1 = require("../models/policies/member-policy-resource");
class MemberSecurityMapper {
    /**
     * Map policy resources to policies.
     * @param client - An instance of an extended Content Hub client
     * @param policyResources - A collection of resources to map
     * @returns An array of policies.
     */
    static mapToMemberPoliciesAsync(client, policyResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (policyResources == null || policyResources.length === 0) {
                return [];
            }
            const list = [];
            for (const memberPolicyResource of policyResources) {
                const memberPolicy = yield this.mapToMemberPolicyAsync(client, memberPolicyResource);
                if (memberPolicy != null) {
                    list.push(memberPolicy);
                }
            }
            return list;
        });
    }
    /**
     * Map a policy resource to a member policy instance.
     * @param client - An instance of an extended Content Hub client
     * @param policyResource - A policy resource
     * @returns A member policy or null.
     */
    static mapToMemberPolicyAsync(client, policyResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (policyResource == null) {
                return null;
            }
            const definitionName = yield client.linkHelper.nameFromDefinitionAsync(policyResource.definition);
            const memberPolicy = new member_policy_1.MemberPolicy({
                canRead: policyResource.canRead,
                canWrite: policyResource.canWrite,
                definitionName: definitionName,
                target: policyResource.target,
            });
            return memberPolicy;
        });
    }
    /**
     * Map member policy instances to policy resources.
     * @param client - An instance of an extended Content Hub client
     * @param memberPolicies - A collection of member policies
     * @returns An array of policy resources.
     */
    static mapToMemberPolicyResourcesAsync(client, memberPolicies) {
        return __awaiter(this, void 0, void 0, function* () {
            if (memberPolicies == null || memberPolicies.length === 0) {
                return [];
            }
            const list = [];
            for (const memberPolicy of memberPolicies) {
                const policyResource = yield this.mapToMemberPolicyResourceAsync(client, memberPolicy);
                if (policyResource != null) {
                    list.push(policyResource);
                }
            }
            return list;
        });
    }
    /**
     * Map a member policy to a policy resource.
     * @param client - An instance of an extended Content Hub client
     * @param memberPolicy - A member policy instance
     * @returns A policy resource or null.
     */
    static mapToMemberPolicyResourceAsync(client, memberPolicy) {
        return __awaiter(this, void 0, void 0, function* () {
            if (memberPolicy == null) {
                return null;
            }
            const definitionLink = yield client.linkHelper.definitionToLinkAsync(memberPolicy.definitionName);
            const memberPolicyResource = new member_policy_resource_1.MemberPolicyResource({
                canRead: memberPolicy.canRead,
                canWrite: memberPolicy.canWrite,
                definition: definitionLink,
                target: memberPolicy.target,
            });
            return memberPolicyResource;
        });
    }
}
exports.MemberSecurityMapper = MemberSecurityMapper;

},{"../contracts/policies/member-policy":134,"../models/policies/member-policy-resource":285}],244:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationMapper = void 0;
class NotificationMapper {
    static mapParameters(request) {
        const parameters = {
            title: request.title,
            options: request.options,
            extra: {
                level: request.notificationLevel,
                link: request.link,
            },
        };
        return parameters;
    }
}
exports.NotificationMapper = NotificationMapper;

},{}],245:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionListMapper = void 0;
const string_format_1 = __importDefault(require("string-format"));
const flat_option_list_1 = __importDefault(require("../contracts/base/option-lists/flat-option-list"));
const flat_option_list_value_1 = __importDefault(require("../contracts/base/option-lists/flat-option-list-value"));
const hierarchical_option_list_1 = __importDefault(require("../contracts/base/option-lists/hierarchical-option-list"));
const hierarchical_options_list_value_1 = __importDefault(require("../contracts/base/option-lists/hierarchical-options-list-value"));
const option_list_type_1 = require("../contracts/base/option-lists/option-list-type");
const error_messages_1 = __importDefault(require("../error-messages"));
const guard_1 = __importDefault(require("../guard"));
const option_list_resource_1 = __importDefault(require("../models/option-lists/option-list-resource"));
const option_list_value_resource_1 = __importDefault(require("../models/option-lists/option-list-value-resource"));
class OptionListMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client, "client");
        this._client = client;
    }
    mapOptionListAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (resource === null) {
                return null;
            }
            const createdBy = yield this._client.linkHelper.idFromEntityAsync(resource.createdBy);
            const modifiedBy = yield this._client.linkHelper.idFromEntityAsync(resource.modifiedBy);
            const labels = resource.labels || {};
            let olBase;
            if (resource.type === option_list_type_1.OptionListType.Flat) {
                const values = this.mapFlatOptionListValues(resource.values);
                olBase = new flat_option_list_1.default(resource.name, labels, values);
            }
            else if (resource.type === option_list_type_1.OptionListType.Hierarchical) {
                const values = this.mapHierarchicalOptionListValues(resource.values);
                olBase = new hierarchical_option_list_1.default(resource.name, labels, values);
            }
            else {
                throw Error((0, string_format_1.default)(error_messages_1.default.UnknownOptionListType, resource.type));
            }
            olBase.createdBy = createdBy || undefined;
            olBase.createdOn = resource.createdOn;
            olBase.modifiedBy = modifiedBy || undefined;
            olBase.modifiedOn = resource.modifiedOn;
            olBase.isSystemOwned = resource.isSystemOwned;
            olBase.name = resource.name;
            return olBase;
        });
    }
    map(ol) {
        if (ol === null) {
            return null;
        }
        const type = ol.type;
        const values = this.mapValues(ol.getOptionListValues());
        const resource = new option_list_resource_1.default();
        resource.isSystemOwned = ol.isSystemOwned;
        resource.name = ol.name;
        resource.type = type;
        resource.values = values;
        resource.labels = JSON.parse(JSON.stringify(ol.labels));
        return resource;
    }
    mapFlatOptionListValues(optionListValues) {
        if (optionListValues === null) {
            return [];
        }
        const values = optionListValues.map((optionListValue) => {
            return this.mapFlatOptionListValue(optionListValue);
        });
        return values;
    }
    mapFlatOptionListValue(optionListValue) {
        guard_1.default.notNullOrUndefined(optionListValue);
        return new flat_option_list_value_1.default(optionListValue.identifier, optionListValue.labels);
    }
    mapHierarchicalOptionListValues(optionListValues) {
        if (optionListValues === null || optionListValues.length === 0) {
            return [];
        }
        const values = optionListValues.map((optionListValue) => {
            return this.mapHierarchicalOptionListValue(optionListValue);
        });
        return values;
    }
    mapHierarchicalOptionListValue(optionListValue) {
        guard_1.default.notNullOrUndefined(optionListValue);
        let values;
        if (optionListValue.values && optionListValue.values.length) {
            values = this.mapHierarchicalOptionListValues(optionListValue.values);
        }
        else {
            values = [];
        }
        return new hierarchical_options_list_value_1.default(optionListValue.identifier, optionListValue.labels, values);
    }
    mapValues(optionListValues) {
        if (optionListValues === null || optionListValues.length === 0) {
            return [];
        }
        const list = [];
        optionListValues.forEach((optionListValue) => {
            const olv = this.mapValue(optionListValue);
            list.push(olv);
        });
        return list;
    }
    mapValue(optionListValue) {
        guard_1.default.notNullOrUndefined(optionListValue);
        const value = new option_list_value_resource_1.default();
        value.identifier = optionListValue.identifier;
        value.labels = optionListValue.labels;
        if (optionListValue instanceof hierarchical_options_list_value_1.default) {
            optionListValue;
            const subValues = this.mapValues(optionListValue.values);
            value.values = subValues;
        }
        return value;
    }
}
exports.OptionListMapper = OptionListMapper;

},{"../contracts/base/option-lists/flat-option-list":100,"../contracts/base/option-lists/flat-option-list-value":99,"../contracts/base/option-lists/hierarchical-option-list":101,"../contracts/base/option-lists/hierarchical-options-list-value":102,"../contracts/base/option-lists/option-list-type":104,"../error-messages":205,"../guard":224,"../models/option-lists/option-list-resource":272,"../models/option-lists/option-list-value-resource":273,"string-format":404}],246:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyMapper = void 0;
const user_group_policy_1 = require("../contracts/policies/user-group-policy");
const user_policy_1 = require("../contracts/policies/user-policy");
const internal_error_1 = require("../errors/internal-error");
const guard_1 = __importDefault(require("../guard"));
const policy_resource_1 = require("../models/policies/policy-resource");
const mapping_utilities_1 = require("./mapping-utilities");
const member_security_mapper_1 = require("./member-security-mapper");
const rules_mapper_1 = require("./rules-mapper");
class PolicyMapper {
    /**
     * Map a policy resource to a user group policy instance.
     * @param client - An instance of an extended Content Hub client
     * @param ruleResource - A policy resource
     * @returns a user group policy or null.
     */
    static mapToUserGroupPolicyAsync(client, policyResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (policyResource == null) {
                return null;
            }
            guard_1.default.notNullOrUndefined(policyResource.userGroup);
            const userGroupId = yield client.linkHelper.idFromEntityAsync(policyResource.userGroup);
            guard_1.default.notNull(userGroupId);
            guard_1.default.validId(userGroupId);
            const createdBy = yield client.linkHelper.idFromEntityAsync(policyResource.createdBy);
            const modifiedBy = yield client.linkHelper.idFromEntityAsync(policyResource.modifiedBy);
            const memberSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPoliciesAsync(client, policyResource.memberSecurity);
            const memberGroupSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPoliciesAsync(client, policyResource.memberGroupSecurity);
            const rules = yield rules_mapper_1.RulesMapper.mapToRulesAsync(client, policyResource.rules);
            const userGroupPolicy = new user_group_policy_1.UserGroupPolicy({
                memberSecurity: memberSecurity,
                memberGroupSecurity: memberGroupSecurity,
                rules: rules,
                userGroupId: userGroupId,
                createdBy: createdBy,
                createdOn: mapping_utilities_1.MappingUtilities.toNullableDate(policyResource.createdOn),
                modifiedBy: modifiedBy,
                modifiedOn: mapping_utilities_1.MappingUtilities.toNullableDate(policyResource.modifiedOn),
            });
            return userGroupPolicy;
        });
    }
    /**
     * Map a policy resource to a user policy instance.
     * @param client - An instance of an extended Content Hub client
     * @param policyResource - A policy resource
     * @returns a user policy or null.
     */
    static mapToUserPolicyAsync(client, policyResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (policyResource == null) {
                return null;
            }
            guard_1.default.notNullOrUndefined(policyResource.user);
            const userId = yield client.linkHelper.idFromEntityAsync(policyResource.user);
            guard_1.default.notNull(userId);
            guard_1.default.validId(userId);
            const createdBy = yield client.linkHelper.idFromEntityAsync(policyResource.createdBy);
            const modifiedBy = yield client.linkHelper.idFromEntityAsync(policyResource.modifiedBy);
            const memberSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPoliciesAsync(client, policyResource.memberSecurity);
            const memberGroupSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPoliciesAsync(client, policyResource.memberGroupSecurity);
            const rules = yield rules_mapper_1.RulesMapper.mapToRulesAsync(client, policyResource.rules);
            const userPolicy = new user_policy_1.UserPolicy({
                memberSecurity: memberSecurity,
                memberGroupSecurity: memberGroupSecurity,
                rules: rules,
                userId: userId,
                createdBy: createdBy,
                createdOn: mapping_utilities_1.MappingUtilities.toNullableDate(policyResource.createdOn),
                modifiedBy: modifiedBy,
                modifiedOn: mapping_utilities_1.MappingUtilities.toNullableDate(policyResource.modifiedOn),
            });
            return userPolicy;
        });
    }
    /**
     * Map a user (group) policy instance to a policy resource.
     * @param client - An instance of an extended Content Hub client
     * @param policy - A user policy or user group policy instance
     * @returns A policy resource.
     */
    static mapToResourceAsync(client, policy) {
        return __awaiter(this, void 0, void 0, function* () {
            if (policy == null) {
                return null;
            }
            const rules = yield rules_mapper_1.RulesMapper.mapToRuleResourcesAsync(client, policy.rules);
            const resource = new policy_resource_1.PolicyResource();
            resource.rules = rules;
            if (policy instanceof user_policy_1.UserPolicy) {
                const user = yield client.linkHelper.entityToLinkAsync(policy.userId);
                resource.user = user;
            }
            else if (policy instanceof user_group_policy_1.UserGroupPolicy) {
                const userGroup = yield client.linkHelper.entityToLinkAsync(policy.userGroupId);
                resource.userGroup = userGroup;
            }
            else {
                throw new internal_error_1.InternalError("Policy type is not supported.");
            }
            const memberSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPolicyResourcesAsync(client, policy.memberSecurity);
            resource.memberSecurity = memberSecurity;
            const groupSecurity = yield member_security_mapper_1.MemberSecurityMapper.mapToMemberPolicyResourcesAsync(client, policy.memberGroupSecurity);
            resource.memberGroupSecurity = groupSecurity;
            return resource;
        });
    }
}
exports.PolicyMapper = PolicyMapper;

},{"../contracts/policies/user-group-policy":138,"../contracts/policies/user-policy":139,"../errors/internal-error":209,"../guard":224,"../models/policies/policy-resource":286,"./mapping-utilities":239,"./member-security-mapper":243,"./rules-mapper":255}],247:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyMapper = void 0;
const culture_insensitive_property_1 = require("../contracts/base/culture-insensitive-property");
const culture_sensitive_property_1 = require("../contracts/base/culture-sensitive-property");
const data_type_1 = __importStar(require("../contracts/base/data-type"));
const minimal_schema_1 = require("../contracts/querying/minimal-schema");
const property_data_1 = require("../contracts/querying/property-data");
const guard_1 = __importDefault(require("../guard"));
class PropertyMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    mapPropertiesAsync(resource, loadedCultures, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            if (resource == null || resource.properties == null || Object.keys(resource.properties).length === 0) {
                return [];
            }
            // If no minimal schema is available, build it from the definition.
            if (schema == null) {
                const definitionName = yield this._client.linkHelper.nameFromDefinitionAsync(resource.entityDefinition);
                if (definitionName == null) {
                    throw new Error(`Could not resolve definition name from entity resource.`);
                }
                const definition = yield this._client.entityDefinitions.getCachedAsync(definitionName);
                if (definition == null) {
                    throw new Error(`Could not load definition with name '${definitionName}.`);
                }
                schema = new minimal_schema_1.MinimalSchema(definitionName);
                const loadedProperties = Object.keys(resource.properties);
                schema.properties = definition
                    .getPropertyDefinitions()
                    .filter(propertyDefinition => loadedProperties.includes(propertyDefinition.name))
                    .map(propertyDefinition => {
                    let hasDataSource = false;
                    if (propertyDefinition.type === data_type_1.default.String) {
                        const stringPropertyDef = propertyDefinition;
                        hasDataSource = !!(stringPropertyDef.dataSourceName && stringPropertyDef.dataSourceName.length > 0);
                    }
                    return new property_data_1.PropertyData({
                        name: propertyDefinition.name,
                        isMultiValue: propertyDefinition.isMultiValue,
                        isMultilingual: propertyDefinition.isMultiLanguage,
                        hasDataSource: hasDataSource,
                        dataType: data_type_1.default[propertyDefinition.type],
                    });
                });
            }
            const list = [];
            for (const definition of schema.properties) {
                const prop = this.mapProperty(resource, loadedCultures, definition);
                list.push(prop);
            }
            return list;
        });
    }
    mapProperty(resource, loadedCultures, definition) {
        const name = definition.name;
        const typeInfo = PropertyMapper.getType(definition);
        const propertyValue = resource.properties[name];
        let property;
        if (definition.hasDataSource) {
            property = PropertyMapper.mapDataSource(definition, name, typeInfo, propertyValue);
        }
        else if (definition.isMultilingual) {
            property = PropertyMapper.mapMultilingualProperty(loadedCultures, name, typeInfo, propertyValue);
        }
        else {
            let value;
            if (definition.isMultiValue) {
                value = PropertyMapper.convertValue(typeInfo.type, true, propertyValue);
            }
            else {
                value = PropertyMapper.convertValue(typeInfo.type, false, propertyValue);
            }
            property = new culture_insensitive_property_1.CultureInsensitiveProperty(name, typeInfo, value);
        }
        return property;
    }
    static mapMultilingualProperty(loadedCultures, name, typeInfo, propertyValue) {
        const values = {};
        for (const culture of Object.keys(propertyValue)) {
            let value;
            if (typeInfo.isArray) {
                value = this.convertValue(typeInfo.type, true, propertyValue[culture]);
            }
            else {
                value = this.convertValue(typeInfo.type, false, propertyValue[culture]);
            }
            values[culture] = value;
        }
        const prop = new culture_sensitive_property_1.CultureSensitiveProperty(name, typeInfo, loadedCultures, values);
        return prop;
    }
    // #region SDK to Base
    // MapProperties
    static mapToPropertyResources(entity) {
        guard_1.default.notNullOrUndefined(entity);
        const dict = {};
        for (const property of entity.properties) {
            const mappedProp = this.mapToPropertyData(property);
            dict[property.name] = mappedProp.value;
        }
        return dict;
    }
    static mapDirtyProperties(entity) {
        guard_1.default.notNullOrUndefined(entity);
        const result = {};
        const dirtyProperties = entity.properties.filter(property => property.isDirty);
        for (const property of dirtyProperties) {
            const mappedProp = this.mapToPropertyData(property);
            result[mappedProp.key] = mappedProp.value;
        }
        return result;
    }
    // MapProperty
    static mapToPropertyData(property) {
        let propertyData;
        if (property instanceof culture_sensitive_property_1.CultureSensitiveProperty) {
            const values = property.getValues();
            propertyData = { key: property.name, value: values };
        }
        else if (property instanceof culture_insensitive_property_1.CultureInsensitiveProperty) {
            const value = property.getValue();
            if (property.hasDataSource) {
                let dsValue;
                if (value != null) {
                    if (Array.isArray(value)) {
                        dsValue = [];
                        value.map(v => dsValue.push({ identifier: v }));
                    }
                    else {
                        dsValue = { identifier: value };
                    }
                }
                else {
                    dsValue = null;
                }
                propertyData = { key: property.name, value: dsValue };
            }
            else {
                propertyData = { key: property.name, value: value };
            }
        }
        else {
            throw new Error(`Property of type ${property.dataType} is not supported.`);
        }
        return propertyData;
    }
    // #endregion
    static getType(data) {
        let type;
        switch (data.dataType) {
            case "Boolean":
                type = data_type_1.default.Boolean;
                break;
            case "Decimal":
                type = data_type_1.default.Decimal;
                break;
            case "Int32":
            case data_type_1.default[data_type_1.default.Integer]:
                type = data_type_1.default.Integer;
                break;
            case "Int64":
            case data_type_1.default[data_type_1.default.Long]:
                type = data_type_1.default.Long;
                break;
            case "DateTime":
                type = data_type_1.default.DateTime;
                break;
            case "DateTimeOffset":
                type = data_type_1.default.DateTimeOffset;
                break;
            case "String":
                type = data_type_1.default.String;
                break;
            case "JToken":
            case data_type_1.default[data_type_1.default.Json]:
                type = data_type_1.default.Json;
                break;
            default:
                throw new Error("Unsupported value type.");
        }
        return new data_type_1.TypeInfo(type, data.isMultiValue);
    }
    static convertValue(type, isArray, value) {
        let result;
        if (value == null) {
            return null;
        }
        if (isArray) {
            if (value instanceof Array) {
                return value.map(item => this.convertValue(type, false, item));
            }
            else if (typeof value === "string") {
                // If it's a string, we might be able to parse it.
                try {
                    const parsedValue = JSON.parse(value);
                    if (parsedValue instanceof Array) {
                        return parsedValue.map(item => this.convertValue(type, false, item));
                    }
                    else {
                        value = parsedValue;
                    }
                }
                catch (ex) {
                    // If parsing fails, simply use the string.
                }
            }
            //TODO: Throw error?
            // //  else {
            // //     return null;
            // // }
        }
        switch (type) {
            case data_type_1.default.String:
                // // typeof value === "string" ? value : `${value}`;
                result = String(value);
                break;
            case data_type_1.default.Boolean:
                result = typeof value === "string" ? value === "true" : !!value;
                break;
            case data_type_1.default.Integer:
            case data_type_1.default.Long: {
                const number = parseInt(value, 10);
                if (Number.isNaN(number)) {
                    result = null; //TODO: Use regex /^[-+]?[0-9]*$/ and throw error?
                }
                else {
                    result = number;
                }
                break;
            }
            case data_type_1.default.Decimal: {
                const number = parseFloat(value);
                if (Number.isNaN(number)) {
                    result = null; //TODO: Use regex /^[-+]?\b[0-9]*\.?[0-9]*$/ and throw error?
                }
                else {
                    result = number;
                }
                break;
            }
            case data_type_1.default.Json: {
                // Valid JSON values: string, number, boolean, null, array or JSON-object
                if (value == null) {
                    result = null;
                }
                else if (typeof value === "object") {
                    // Covers JSON-object and array
                    result = JSON.parse(JSON.stringify(value));
                }
                else if (typeof value === "string") {
                    try {
                        // When we have a string, it might be a serialized object we can parse.
                        result = JSON.parse(value);
                    }
                    catch (ex) {
                        // Not a valid JSON-object, so return the string value as-is.
                        result = value;
                    }
                }
                else {
                    // We might be dealing with a boolean, number or null.
                    result = value;
                }
                break;
            }
            case data_type_1.default.DateTime: {
                result = value;
                break;
            }
            case data_type_1.default.DateTimeOffset: {
                result = value;
                break;
            }
        }
        return result;
    }
    static mapDataSource(definition, name, typeInfo, propertyValue) {
        if (propertyValue == null) {
            const prop = new culture_insensitive_property_1.CultureInsensitiveProperty(name, typeInfo, null, true);
            return prop;
        }
        if (definition.isMultiValue) {
            const array = propertyValue instanceof Array
                ? propertyValue
                : typeof propertyValue === "string"
                    ? JSON.parse(propertyValue)
                    : null;
            const list = [];
            for (const token of array) {
                const value = this.mapDataSourceValue(token);
                if (value != null) {
                    list.push(value);
                }
            }
            const prop = new culture_insensitive_property_1.CultureInsensitiveProperty(name, typeInfo, [...list], true);
            return prop;
        }
        else {
            const value = this.mapDataSourceValue(propertyValue);
            const prop = new culture_insensitive_property_1.CultureInsensitiveProperty(name, typeInfo, value, true);
            return prop;
        }
    }
    static mapDataSourceValue(dataSourceValue) {
        if (dataSourceValue == null) {
            return null;
        }
        const identifier = dataSourceValue["identifier"];
        return identifier;
    }
}
exports.PropertyMapper = PropertyMapper;

},{"../contracts/base/culture-insensitive-property":84,"../contracts/base/culture-sensitive-property":85,"../contracts/base/data-type":86,"../contracts/querying/minimal-schema":175,"../contracts/querying/property-data":176,"../guard":224}],248:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryingMapper = void 0;
const ta_json_1 = require("ta-json");
const api_1 = require("../constants/api");
const entity_query_result_1 = require("../contracts/querying/entity-query-result");
const id_query_result_1 = require("../contracts/querying/id-query-result");
const minimal_schema_1 = require("../contracts/querying/minimal-schema");
const guard_1 = __importDefault(require("../guard"));
class QueryingMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    mapEntityQueryResultAsync(resource, query, loadConfiguration) {
        return __awaiter(this, void 0, void 0, function* () {
            if (resource == null)
                return null;
            guard_1.default.notNullOrUndefined(query, "query");
            const entities = yield this.getEntitiesAsync(resource);
            const total = resource.totalItems || 0;
            const skip = query.skip || 0;
            const result = new entity_query_result_1.EntityQueryResult(this._client, query, loadConfiguration, entities, total, skip);
            return result;
        });
    }
    mapEntityIdQueryResultAsync(resource, query) {
        return __awaiter(this, void 0, void 0, function* () {
            if (resource == null)
                return null;
            guard_1.default.notNullOrUndefined(query, "query");
            const ids = yield this.getEntityIdsAsync(resource);
            const total = resource.totalItems || 0;
            const skip = query.skip || 0;
            const result = new id_query_result_1.EntityIdQueryResult(this._client, query, ids, total, skip);
            return result;
        });
    }
    // // async mapEntityScrollResultAsync(resource: QueryResultResource, offset: number): Promise<IEntityScrollResult> {
    // //     throw "Not implemented";
    // // }
    // // async mapEntityIdScrollResultAsync(resource: QueryResultResource, offset: number): Promise<IIdScrollResult> {
    // //     throw "Not implemented";
    // // }
    static getMinimalSchemas(resource) {
        const map = {};
        const minimalSchema = resource.minimalSchemaList || resource[api_1.EXTENSION_DATA_KEYS.minimalSchema];
        if (minimalSchema == null) {
            return map;
        }
        const schemaTokens = (minimalSchema instanceof Array
            ? minimalSchema
            : typeof minimalSchema === "string"
                ? JSON.parse(minimalSchema)
                : []);
        for (const token of schemaTokens) {
            const schema = ta_json_1.TaJson.deserialize(token, minimal_schema_1.MinimalSchema);
            map[schema.definitionName] = schema;
        }
        return map;
    }
    getEntitiesAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resource.items || !resource.items.length) {
                return [];
            }
            const schemasMap = QueryingMapper.getMinimalSchemas(resource);
            const resources = resource.items.map(item => item.entity);
            const entities = yield this._client.entityMapper.mapEntitiesAsync(resources, schemasMap);
            return entities;
        });
    }
    getEntityIdsAsync(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!resource.items || !resource.items.length) {
                return [];
            }
            const links = resource.items.map(item => item.link);
            const ids = yield this._client.linkHelper.idsFromEntitiesAsync(links);
            return ids;
        });
    }
}
exports.QueryingMapper = QueryingMapper;

},{"../constants/api":79,"../contracts/querying/entity-query-result":148,"../contracts/querying/id-query-result":171,"../contracts/querying/minimal-schema":175,"../guard":224,"ta-json":424}],249:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelatedPathMapper = void 0;
class RelatedPathMapper {
    mapRelatedPaths(resource) {
        if (resource == null || resource.relatedPaths == null || Object.keys(resource.relatedPaths).length === 0) {
            return [];
        }
        const relatedPaths = resource.relatedPaths;
        const list = [];
        for (const relatedPathName in relatedPaths) {
            const values = relatedPaths[relatedPathName];
            if (!values || values.length === 0) {
                continue;
            }
            const relatedPath = {
                name: relatedPathName,
                items: values.map(items => items.map(item => ({
                    values: item.values,
                    definition: item.definition,
                    entity: item.entity,
                    properties: item.properties || null,
                }))),
            };
            list.push(relatedPath);
        }
        return list;
    }
    mapToResource(entity) {
        if (entity == null || entity.relatedPaths == null || Object.keys(entity.relatedPaths).length === 0) {
            return undefined;
        }
        const list = {};
        for (const relatedPath of entity.relatedPaths) {
            list[relatedPath.name] = relatedPath.items;
        }
        return list;
    }
}
exports.RelatedPathMapper = RelatedPathMapper;

},{}],250:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationCardinalityMapper = void 0;
const relation_cardinality_1 = require("../contracts/base/relation-cardinality");
class RelationCardinalityMapper {
    static mapToEnumValue(value) {
        if (value === "ManyToMany") {
            return relation_cardinality_1.RelationCardinality.ManyToMany;
        }
        else if (value === "OneToMany") {
            return relation_cardinality_1.RelationCardinality.OneToMany;
        }
        else if (value === "OneToOne") {
            return relation_cardinality_1.RelationCardinality.OneToOne;
        }
        else {
            throw Error(`Can't map '${value}' to enum value.`);
        }
    }
    static mapToType(value) {
        if (value === relation_cardinality_1.RelationCardinality.ManyToMany || value === relation_cardinality_1.RelationCardinality[relation_cardinality_1.RelationCardinality.ManyToMany]) {
            return "ManyToMany";
        }
        else if (value === relation_cardinality_1.RelationCardinality.OneToMany ||
            value === relation_cardinality_1.RelationCardinality[relation_cardinality_1.RelationCardinality.OneToMany]) {
            return "OneToMany";
        }
        else if (value === relation_cardinality_1.RelationCardinality.OneToOne ||
            value === relation_cardinality_1.RelationCardinality[relation_cardinality_1.RelationCardinality.OneToOne]) {
            return "OneToOne";
        }
        else {
            throw Error(`Can't map '${value}' to type.`);
        }
    }
}
exports.RelationCardinalityMapper = RelationCardinalityMapper;

},{"../contracts/base/relation-cardinality":118}],251:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMapper = void 0;
const string_format_1 = __importDefault(require("string-format"));
const relation_1 = require("../contracts/base/relation");
const relation_cardinality_1 = require("../contracts/base/relation-cardinality");
const relation_role_1 = require("../contracts/base/relation-role");
const child_to_many_parents_relation_1 = require("../contracts/base/relations/child-to-many-parents-relation");
const child_to_one_parent_relation_1 = require("../contracts/base/relations/child-to-one-parent-relation");
const parent_to_many_children_relation_1 = require("../contracts/base/relations/parent-to-many-children-relation");
const parent_to_one_child_relation_1 = require("../contracts/base/relations/parent-to-one-child-relation");
const minimal_schema_1 = require("../contracts/querying/minimal-schema");
const relation_data_1 = require("../contracts/querying/relation-data");
const entity_link_1 = require("../entity-link");
const error_messages_1 = __importDefault(require("../error-messages"));
const internal_error_1 = require("../errors/internal-error");
const not_supported_error_1 = require("../errors/not-supported-error");
const guard_1 = __importDefault(require("../guard"));
const relation_resource_1 = require("../models/relation-resource");
class RelationMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    mapRelationsAsync(resource, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(resource);
            const list = [];
            // If no minimal schema is available, build it from the definition.
            if (schema == null) {
                const definitionName = yield this._client.linkHelper.nameFromDefinitionAsync(resource.entityDefinition);
                if (definitionName == null) {
                    throw new internal_error_1.InternalError(`Could not resolve definition name from entity resource.`);
                }
                const definition = yield this._client.entityDefinitions.getCachedAsync(definitionName);
                if (definition == null) {
                    throw new internal_error_1.InternalError(`Could not load definition with name '${definitionName}.`);
                }
                schema = new minimal_schema_1.MinimalSchema(definitionName);
                const loadedRelations = Object.keys(resource.relations);
                schema.relations = definition
                    .getRelationDefinitions()
                    .filter(relationDefinition => loadedRelations.includes(relationDefinition.name))
                    .map(relationDefinition => new relation_data_1.RelationData({
                    name: relationDefinition.name,
                    cardinality: relationDefinition.cardinality,
                    role: relationDefinition.role,
                }));
            }
            for (const relation of schema.relations) {
                const name = relation.name;
                const cardinality = relation.cardinality;
                const role = relation.role;
                // Try to get the relation, it is on the schema, so it should be there.
                const relationObject = resource.relations[name];
                if (!relationObject) {
                    const msg = `[Internal] Relation with name '${relation.name}' was on schema, but not on the entity resource.`;
                    this._client.logger.warn(msg);
                    continue;
                }
                const isRelationResource = relationObject instanceof relation_resource_1.RelationResource;
                const relationResource = relationObject;
                // The relation should be nested, so we can use it as a RelationResource
                if (!isRelationResource) {
                    const msg = `[Internal] Relation with name '${relation.name}' was on the entity resource, but the relation was not nested.`;
                    this._client.logger.warn(msg);
                    continue;
                }
                let result = null;
                if (role == relation_role_1.RelationRole.Parent) {
                    if (cardinality == relation_cardinality_1.RelationCardinality.ManyToMany || cardinality == relation_cardinality_1.RelationCardinality.OneToMany) {
                        let subRelation;
                        if (relationResource.children != null) {
                            const ids = [];
                            const properties = {};
                            for (const r of relationResource.children) {
                                const id = yield this._client.linkHelper.idFromEntityAsync(r);
                                ids.push(id);
                                properties[id] = r.properties;
                            }
                            subRelation = new parent_to_many_children_relation_1.ParentToManyChildrenRelation(name, properties, this._client);
                            subRelation.setIds(ids);
                        }
                        else {
                            subRelation = new parent_to_many_children_relation_1.ParentToManyChildrenRelation(name, null, this._client);
                        }
                        result = subRelation;
                    }
                    else if (cardinality == relation_cardinality_1.RelationCardinality.OneToOne) {
                        let childId = null;
                        const properties = {};
                        if (relationResource.child != null) {
                            childId = yield this._client.linkHelper.idFromEntityAsync(relationResource.child);
                            properties[childId] = relationResource.child.properties;
                        }
                        else if (relationResource.children instanceof Array && relationResource.children.length) {
                            childId = yield this._client.linkHelper.idFromEntityAsync(relationResource.children[0]);
                            properties[childId] = relationResource.children[0].properties;
                        }
                        const subRelation = new parent_to_one_child_relation_1.ParentToOneChildRelation(name, properties, this._client);
                        subRelation.child = childId;
                        result = subRelation;
                    }
                }
                else if (role == relation_role_1.RelationRole.Child) {
                    if (cardinality == relation_cardinality_1.RelationCardinality.ManyToMany) {
                        let subRelation;
                        if (relationResource.parents != null) {
                            const ids = [];
                            const properties = {};
                            for (const r of relationResource.parents) {
                                const id = yield this._client.linkHelper.idFromEntityAsync(r);
                                ids.push(id);
                                properties[id] = r.properties;
                            }
                            subRelation = new child_to_many_parents_relation_1.ChildToManyParentsRelation(name, properties, this._client);
                            subRelation.setIds(ids);
                        }
                        else {
                            subRelation = new child_to_many_parents_relation_1.ChildToManyParentsRelation(name, null, this._client);
                        }
                        result = subRelation;
                    }
                    else if (cardinality == relation_cardinality_1.RelationCardinality.OneToOne ||
                        cardinality == relation_cardinality_1.RelationCardinality.OneToMany) {
                        let parentId = null;
                        const properties = {};
                        if (relationResource.parent != null) {
                            parentId = yield this._client.linkHelper.idFromEntityAsync(relationResource.parent);
                            properties[parentId] = relationResource.parent.properties;
                        }
                        else if (relationResource.parents instanceof Array && relationResource.parents.length) {
                            parentId = yield this._client.linkHelper.idFromEntityAsync(relationResource.parents[0]);
                            properties[parentId] = relationResource.parents[0].properties;
                        }
                        const subRelation = new child_to_one_parent_relation_1.ChildToOneParentRelation(name, properties, this._client);
                        subRelation.parent = parentId;
                        result = subRelation;
                    }
                }
                if (result == null) {
                    const msg = (0, string_format_1.default)(error_messages_1.default.UnsupportedRelation, relation_cardinality_1.RelationCardinality[relation.cardinality], relation_role_1.RelationRole[relation.role]);
                    throw new Error(msg);
                }
                list.push(result);
            }
            return list;
        });
    }
    mapToRelationResourcesAsync(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(entity);
            return yield this.mapRelationsToResourcesAsync([...entity.relations], entity.id || 0);
        });
    }
    mapRelationToResourceAsync(relation, id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(relation);
            const resource = new relation_resource_1.RelationResource();
            if (relation_1.RelationBase.isChildRelation(relation)) {
                resource.inheritsSecurity = relation.inheritsSecurity;
            }
            if (relation_1.RelationBase.isChildToManyParentsRelation(relation)) {
                const parentLinks = yield this._client.linkHelper.entitiesToLinksAsync(relation.parents);
                resource.parents = parentLinks.map((link, index) => {
                    const parent = new entity_link_1.EntityLink(link.href);
                    parent.properties = relation.properties[relation.parents[index]];
                    return parent;
                });
            }
            else if (relation_1.RelationBase.isChildToOneParentRelation(relation)) {
                if (relation.parent) {
                    const link = yield this._client.linkHelper.entityToLinkAsync(relation.parent);
                    resource.parent = new entity_link_1.EntityLink(link.href);
                    resource.parent.properties = relation.properties[relation.parent];
                }
            }
            else if (relation_1.RelationBase.isParentToManyChildrenRelation(relation)) {
                const childLinks = yield this._client.linkHelper.entitiesToLinksAsync(relation.children);
                resource.children = childLinks.map(link => new entity_link_1.EntityLink(link.href));
                resource.children = childLinks.map((link, index) => {
                    const child = new entity_link_1.EntityLink(link.href);
                    child.properties = relation.properties[relation.children[index]];
                    return child;
                });
            }
            else if (relation_1.RelationBase.isParentToOneChildRelation(relation)) {
                if (relation.child) {
                    const link = yield this._client.linkHelper.entityToLinkAsync(relation.child);
                    resource.child = new entity_link_1.EntityLink(link.href);
                    resource.child.properties = relation.properties[relation.child];
                }
            }
            else {
                throw new not_supported_error_1.NotSupportedError("Unknown relation type.");
            }
            const relationLink = yield this._client.linkHelper.relationToLinkAsync(id, relation.name);
            resource.self = relationLink;
            return resource;
        });
    }
    mapDirtyRelationsAsync(entity) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(entity);
            const relationNames = entity.relations.reduce((a, r) => (r.isDirty && a.push(r.name), a), []);
            const relations = entity.relations.filter(relation => relationNames.includes(relation.name));
            const dict = yield this.mapRelationsToResourcesAsync(relations, entity.id || 0);
            return dict;
        });
    }
    mapRelationsToResourcesAsync(relations, id) {
        return __awaiter(this, void 0, void 0, function* () {
            guard_1.default.notNullOrUndefined(relations);
            const dict = {};
            for (const relation of relations) {
                const mappedRelation = yield this.mapRelationToResourceAsync(relation, id);
                if (dict[relation.name]) {
                    const existing = dict[relation.name];
                    const merged = relation_resource_1.RelationResource.merge(existing, mappedRelation);
                    dict[relation.name] = merged;
                }
                else {
                    dict[relation.name] = mappedRelation;
                }
            }
            return dict;
        });
    }
}
exports.RelationMapper = RelationMapper;

},{"../contracts/base/relation":123,"../contracts/base/relation-cardinality":118,"../contracts/base/relation-role":122,"../contracts/base/relations/child-to-many-parents-relation":124,"../contracts/base/relations/child-to-one-parent-relation":125,"../contracts/base/relations/parent-to-many-children-relation":126,"../contracts/base/relations/parent-to-one-child-relation":127,"../contracts/querying/minimal-schema":175,"../contracts/querying/relation-data":184,"../entity-link":204,"../error-messages":205,"../errors/internal-error":209,"../errors/not-supported-error":214,"../guard":224,"../models/relation-resource":295,"string-format":404}],252:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationRoleMapper = void 0;
const base_1 = require("../contracts/base");
class RelationRoleMapper {
    static mapToEnumValue(value) {
        if (value.toLowerCase() === "parent") {
            return base_1.RelationRole.Parent;
        }
        else if (value.toLowerCase() === "child") {
            return base_1.RelationRole.Child;
        }
        else {
            throw Error(`Can't map '${value}' to enum value.`);
        }
    }
    static mapToType(value) {
        if (value === base_1.RelationRole.Parent || value === base_1.RelationRole[base_1.RelationRole.Parent]) {
            return "Parent";
        }
        else if (value === base_1.RelationRole.Child || value === base_1.RelationRole[base_1.RelationRole.Child]) {
            return "Child";
        }
        else {
            throw Error(`Can't map '${value} to type.`);
        }
    }
}
exports.RelationRoleMapper = RelationRoleMapper;

},{"../contracts/base":91}],253:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenditionMapper = void 0;
const rendition_1 = require("../contracts/base/rendition");
const guard_1 = __importDefault(require("../guard"));
const link_1 = __importDefault(require("../link"));
class RenditionMapper {
    constructor(client) {
        guard_1.default.notNullOrUndefined(client);
        this._client = client;
    }
    mapRenditions(id, extensionData) {
        if (extensionData == null)
            return [];
        const renditions = extensionData["renditions"];
        if (!renditions || Object.keys(renditions).length === 0)
            return [];
        const list = [];
        for (const renditionName in renditions) {
            const values = renditions[renditionName];
            if (!values || values.length === 0)
                continue;
            const rendition = rendition_1.Rendition.createRendition(renditionName, values.map((value) => {
                return link_1.default.copyFrom(value);
            }));
            list.push(rendition);
        }
        return list;
    }
    mapToResource(renditions) {
        const links = {};
        if (renditions == null) {
            return links;
        }
        for (const rendition of renditions) {
            links[rendition.name] = rendition.items.map(i => new link_1.default(i.href));
        }
        return links;
    }
}
exports.RenditionMapper = RenditionMapper;

},{"../contracts/base/rendition":128,"../guard":224,"../link":228}],254:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleTypeMapper = void 0;
const rule_type_1 = require("../contracts/policies/rule-type");
const not_supported_error_1 = require("../errors/not-supported-error");
const guard_1 = __importDefault(require("../guard"));
class RuleTypeMapper {
    static mapToRuleType(type) {
        guard_1.default.notNull(type);
        switch (type) {
            case "BuiltIn":
                return rule_type_1.RuleType.BuiltIn;
            case "Regular":
                return rule_type_1.RuleType.Regular;
            default:
                throw new not_supported_error_1.NotSupportedError("Unsupported Type");
        }
    }
    static mapToRuleResourceType(type) {
        switch (type) {
            case rule_type_1.RuleType.BuiltIn:
                return "BuiltIn";
            case rule_type_1.RuleType.Regular:
                return "Regular";
            default:
                throw new not_supported_error_1.NotSupportedError("Unsupported Type");
        }
    }
}
exports.RuleTypeMapper = RuleTypeMapper;

},{"../contracts/policies/rule-type":136,"../errors/not-supported-error":214,"../guard":224}],255:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RulesMapper = void 0;
const rule_1 = require("../contracts/policies/rule");
const rule_resource_1 = require("../models/policies/rule-resource");
const condition_mapper_1 = require("./condition-mapper");
const rule_type_mapper_1 = require("./rule-type-mapper");
class RulesMapper {
    /**
     * Map rule resources to rules.
     * @param client - An instance of an extended Content Hub client
     * @param ruleResources - A collection of resources to map
     * @returns An array of rules.
     */
    static mapToRulesAsync(client, ruleResources) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ruleResources == null || ruleResources.length === 0) {
                return [];
            }
            const list = [];
            for (const ruleResource of ruleResources) {
                const rule = yield this.mapToRuleAsync(client, ruleResource);
                if (rule != null) {
                    list.push(rule);
                }
            }
            return list;
        });
    }
    /**
     * Map a rule resource to a rule instance.
     * @param client - An instance of an extended Content Hub client
     * @param ruleResource - A rule resource
     *
     * @returns A rule or null.
     */
    static mapToRuleAsync(client, ruleResource) {
        return __awaiter(this, void 0, void 0, function* () {
            if (ruleResource == null) {
                return null;
            }
            const conditions = yield condition_mapper_1.ConditionMapper.mapToConditionsAsync(client, ruleResource.conditions);
            //TODO Decide if we need a Guid type
            const guid = ruleResource.identifier;
            const type = rule_type_mapper_1.RuleTypeMapper.mapToRuleType(ruleResource.type);
            const definitionNames = yield client.linkHelper.namesFromDefinitionsAsync(ruleResource.definitions);
            const sdkRule = new rule_1.Rule({
                conditions: conditions,
                createdByLoggedOnUser: ruleResource.createdByLoggedOnUser,
                definitionNames: definitionNames.filter(name => name != null),
                isSystemOwned: ruleResource.isSystemOwned,
                permissions: ruleResource.permissions,
                type: type,
            });
            sdkRule.setIdentifier(guid);
            return sdkRule;
        });
    }
    /**
     * Map rule instances to rule resources.
     * @param client - An instance of an extended Content Hub client
     * @param rules - A collection of rules
     * @returns An array of rule resources.
     */
    static mapToRuleResourcesAsync(client, rules) {
        return __awaiter(this, void 0, void 0, function* () {
            if (rules == null || rules.length === 0) {
                return [];
            }
            const list = [];
            for (const rule of rules) {
                const ruleResource = yield this.mapToRuleResourceAsync(client, rule);
                if (ruleResource != null) {
                    list.push(ruleResource);
                }
            }
            return list;
        });
    }
    /**
     * Map a rule to a rule resource.
     * @param client - An instance of an extended Content Hub client
     * @param rule - A rule instance
     * @returns A rule resource or null.
     */
    static mapToRuleResourceAsync(client, rule) {
        return __awaiter(this, void 0, void 0, function* () {
            if (rule == null) {
                return null;
            }
            const conditions = yield condition_mapper_1.ConditionMapper.mapToConditionResourcesAsync(client, rule.conditions);
            const identifier = rule.identifier;
            const permissions = rule.permissions;
            const type = rule_type_mapper_1.RuleTypeMapper.mapToRuleResourceType(rule.type);
            const definitionLinkTasks = [];
            for (const definitionName of rule.definitionNames) {
                const definitionLink = client.linkHelper.definitionToLinkAsync(definitionName);
                definitionLinkTasks.push(definitionLink);
            }
            const definitionLinks = yield Promise.all(definitionLinkTasks);
            const ruleResource = new rule_resource_1.RuleResource({
                conditions: conditions,
                createdByLoggedOnUser: rule.createdByLoggedOnUser,
                definitions: definitionLinks,
                identifier: identifier,
                isSystemOwned: rule.isSystemOwned,
                permissions: permissions,
                type: type,
            });
            return ruleResource;
        });
    }
}
exports.RulesMapper = RulesMapper;

},{"../contracts/policies/rule":137,"../models/policies/rule-resource":287,"./condition-mapper":233,"./rule-type-mapper":254}],256:[function(require,module,exports){
"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedEntityCreator = exports.TypedEntityCreatorBase = void 0;
const constants_1 = require("../constants");
const entity_1 = require("../contracts/base/entity");
const asset_1 = require("../contracts/content/asset");
const guard_1 = __importDefault(require("../guard"));
class TypedEntityCreatorBase {
    createTypedEntity(args) {
        guard_1.default.notNullOrUndefined(args);
        guard_1.default.stringNotNullOrEmpty(args.definitionName);
        let entity;
        switch (args.definitionName) {
            case constants_1.DEFINITIONS["Asset"].definitionName:
                entity = this.createAsset(args);
                break;
            // // case DEFINITIONS["File"].definitionName:
            // //     entity = this.createFile(args);
            // //     break;
            // // case DEFINITIONS["Setting"].definitionName:
            // //     entity = this.createSetting(args);
            // //     break;
            // // case DEFINITIONS["User"].definitionName:
            // //     entity = this.createUser(args);
            // //     break;
            // // case DEFINITIONS["UserGroup"].definitionName:
            // //     entity = this.createUserGroup(args);
            // //     break;
            // // case DEFINITIONS["UserProfile"].definitionName:
            // //     entity = this.createUserProfile(args);
            // //     break;
            // // case DEFINITIONS["MailTemplate"].definitionName:
            // //     entity = this.createMailTemplate(args);
            // //     break;
            default:
                entity = this.createEntity(args);
                break;
        }
        return entity;
    }
}
exports.TypedEntityCreatorBase = TypedEntityCreatorBase;
class TypedEntityCreator extends TypedEntityCreatorBase {
    constructor(client) {
        super();
        this._client = client;
    }
    createEntity(args) {
        return new entity_1.Entity(this._client, args);
    }
    createFile(args) {
        throw new Error("Method not implemented.");
    }
    createAsset(args) {
        return new asset_1.Asset(this._client, args);
    }
    createSetting(args) {
        throw new Error("Method not implemented.");
    }
    createUser(args) {
        throw new Error("Method not implemented.");
    }
    createUserProfile(args) {
        throw new Error("Method not implemented.");
    }
    createUserGroup(args) {
        throw new Error("Method not implemented.");
    }
    createMailTemplate(args) {
        throw new Error("Method not implemented.");
    }
}
exports.TypedEntityCreator = TypedEntityCreator;

},{"../constants":82,"../contracts/base/entity":90,"../contracts/content/asset":131,"../guard":224}],257:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateResource = void 0;
const ta_json_1 = require("ta-json");
const entity_definition_resource_1 = require("../entity-definition-resource");
const option_list_resource_1 = __importDefault(require("../option-lists/option-list-resource"));
const resource_1 = __importDefault(require("../resource"));
const aggregated_entity_resource_1 = require("./aggregated-entity-resource");
/**
 * Represents a data schema / domain model for an aggregate resource.
 */
let AggregateResource = class AggregateResource extends resource_1.default {
    getDefinitionResources() {
        return this.definitions;
    }
    getEntityResources() {
        const finalItems = [];
        this.items.forEach(element => {
            finalItems.push(element.entity);
        });
        return finalItems;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definitions"),
    (0, ta_json_1.JsonElementType)(entity_definition_resource_1.EntityDefinitionResource),
    __metadata("design:type", Array)
], AggregateResource.prototype, "definitions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("datasources"),
    (0, ta_json_1.JsonElementType)(option_list_resource_1.default),
    __metadata("design:type", Array)
], AggregateResource.prototype, "optionLists", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(aggregated_entity_resource_1.AggregatedEntityResource),
    __metadata("design:type", Array)
], AggregateResource.prototype, "items", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("settings_by_category"),
    __metadata("design:type", Object)
], AggregateResource.prototype, "settingByCategory", void 0);
AggregateResource = __decorate([
    (0, ta_json_1.JsonObject)()
], AggregateResource);
exports.AggregateResource = AggregateResource;

},{"../entity-definition-resource":262,"../option-lists/option-list-resource":272,"../resource":296,"./aggregated-entity-resource":258,"ta-json":424}],258:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregatedEntityResource = void 0;
const ta_json_1 = require("ta-json");
const entity_resource_1 = require("../entity-resource");
const aggregated_entity_relations_converter_1 = require("../../converters/aggregated-entity-relations-converter");
let AggregatedEntityResource = class AggregatedEntityResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("entity"),
    __metadata("design:type", entity_resource_1.EntityResource)
], AggregatedEntityResource.prototype, "entity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relations"),
    (0, ta_json_1.JsonConverter)(aggregated_entity_relations_converter_1.AggregatedEntityRelationsConverter),
    __metadata("design:type", Object)
], AggregatedEntityResource.prototype, "relations", void 0);
AggregatedEntityResource = __decorate([
    (0, ta_json_1.JsonObject)()
], AggregatedEntityResource);
exports.AggregatedEntityResource = AggregatedEntityResource;

},{"../../converters/aggregated-entity-relations-converter":190,"../entity-resource":264,"ta-json":424}],259:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMemberConditionalValidationResource = exports.PropertyMemberConditionalValidationResource = exports.LogicalMemberConditionalValidationResource = exports.ConditionalValidationResource = exports.ConditionalValidationResourceConverter = void 0;
//! This file includes multiple resource classes and a converter to prevent circular references.
const ta_json_1 = require("ta-json");
const entity_link_js_1 = require("../entity-link.js");
class ConditionalValidationResourceConverter {
    serialize(value) {
        return ta_json_1.TaJson.serialize(value);
    }
    deserialize(value) {
        if (value["relation_name"]) {
            return ta_json_1.TaJson.deserialize(value, RelationMemberConditionalValidationResource);
        }
        else if (value["property_name"]) {
            return ta_json_1.TaJson.deserialize(value, PropertyMemberConditionalValidationResource);
        }
        else if (Array.isArray(value.subFilters)) {
            return new LogicalMemberConditionalValidationResource({
                operator: value.operator,
                subFilters: value.subFilters.map(filter => this.deserialize(filter)),
            });
        }
        else {
            throw Error(`Unable to deserialize to ConditionalValidationResource. Value has unknown format:\n${JSON.stringify(value, undefined, 2)}`);
        }
    }
}
exports.ConditionalValidationResourceConverter = ConditionalValidationResourceConverter;
class ConditionalValidationResource {
}
exports.ConditionalValidationResource = ConditionalValidationResource;
let LogicalMemberConditionalValidationResource = class LogicalMemberConditionalValidationResource extends ConditionalValidationResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", String)
], LogicalMemberConditionalValidationResource.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("subFilters"),
    (0, ta_json_1.JsonConverter)(ConditionalValidationResourceConverter),
    (0, ta_json_1.JsonType)(Array),
    __metadata("design:type", Array)
], LogicalMemberConditionalValidationResource.prototype, "subFilters", void 0);
LogicalMemberConditionalValidationResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], LogicalMemberConditionalValidationResource);
exports.LogicalMemberConditionalValidationResource = LogicalMemberConditionalValidationResource;
let PropertyMemberConditionalValidationResource = class PropertyMemberConditionalValidationResource extends ConditionalValidationResource {
    constructor(init) {
        super();
        Object.assign(this, init !== null && init !== void 0 ? init : {});
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", String)
], PropertyMemberConditionalValidationResource.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("property_name"),
    __metadata("design:type", String)
], PropertyMemberConditionalValidationResource.prototype, "propertyName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("culture"),
    __metadata("design:type", String)
], PropertyMemberConditionalValidationResource.prototype, "culture", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("subFilters"),
    (0, ta_json_1.JsonType)(Array),
    __metadata("design:type", Array)
], PropertyMemberConditionalValidationResource.prototype, "values", void 0);
PropertyMemberConditionalValidationResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], PropertyMemberConditionalValidationResource);
exports.PropertyMemberConditionalValidationResource = PropertyMemberConditionalValidationResource;
let RelationMemberConditionalValidationResource = class RelationMemberConditionalValidationResource extends ConditionalValidationResource {
    constructor(init) {
        super();
        Object.assign(this, init !== null && init !== void 0 ? init : {});
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", String)
], RelationMemberConditionalValidationResource.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation_name"),
    __metadata("design:type", String)
], RelationMemberConditionalValidationResource.prototype, "relationName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation_role"),
    __metadata("design:type", String)
], RelationMemberConditionalValidationResource.prototype, "relationRole", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("subFilters"),
    (0, ta_json_1.JsonElementType)(entity_link_js_1.EntityLink),
    __metadata("design:type", Array)
], RelationMemberConditionalValidationResource.prototype, "values", void 0);
RelationMemberConditionalValidationResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RelationMemberConditionalValidationResource);
exports.RelationMemberConditionalValidationResource = RelationMemberConditionalValidationResource;

},{"../entity-link.js":204,"ta-json":424}],260:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityCopyOptionsResource = void 0;
const ta_json_1 = require("ta-json");
const property_copy_option_resource_1 = require("./property-copy-option-resource");
const relation_copy_option_resource_1 = require("./relation-copy-option-resource");
/**
 * Defines the entity copy options resource.
 */
let EntityCopyOptionsResource = class EntityCopyOptionsResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("copy_profile_identifier"),
    __metadata("design:type", Object)
], EntityCopyOptionsResource.prototype, "copyProfileIdentifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("copy_profile_id"),
    __metadata("design:type", Object)
], EntityCopyOptionsResource.prototype, "copyProfileId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("destination_entity_id"),
    __metadata("design:type", Object)
], EntityCopyOptionsResource.prototype, "destinationEntityId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relation_copy_options"),
    (0, ta_json_1.JsonElementType)(relation_copy_option_resource_1.RelationCopyOptionResource),
    __metadata("design:type", Object)
], EntityCopyOptionsResource.prototype, "relationCopyOptions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("property_copy_options"),
    (0, ta_json_1.JsonElementType)(property_copy_option_resource_1.PropertyCopyOptionResource),
    __metadata("design:type", Object)
], EntityCopyOptionsResource.prototype, "propertyCopyOptions", void 0);
EntityCopyOptionsResource = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityCopyOptionsResource);
exports.EntityCopyOptionsResource = EntityCopyOptionsResource;

},{"./property-copy-option-resource":288,"./relation-copy-option-resource":292,"ta-json":424}],261:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionCollectionResource = void 0;
const ta_json_1 = require("ta-json");
const entity_definition_resource_1 = require("./entity-definition-resource");
const list_resource_1 = require("./list-resource");
let EntityDefinitionCollectionResource = class EntityDefinitionCollectionResource extends list_resource_1.ListResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(entity_definition_resource_1.EntityDefinitionResource),
    __metadata("design:type", Array)
], EntityDefinitionCollectionResource.prototype, "items", void 0);
EntityDefinitionCollectionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityDefinitionCollectionResource);
exports.EntityDefinitionCollectionResource = EntityDefinitionCollectionResource;

},{"./entity-definition-resource":262,"./list-resource":265,"ta-json":424}],262:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityDefinitionResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
const member_group_resource_1 = require("./member-group-resource");
const resource_1 = __importDefault(require("./resource"));
let EntityDefinitionResource = class EntityDefinitionResource extends resource_1.default {
    //#endregion
    constructor(init) {
        super();
        this.labels = {};
        this.memberGroups = [];
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], EntityDefinitionResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], EntityDefinitionResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    __metadata("design:type", Date)
], EntityDefinitionResource.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    __metadata("design:type", Date)
], EntityDefinitionResource.prototype, "modifiedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("display_template"),
    __metadata("design:type", String)
], EntityDefinitionResource.prototype, "displayTemplate", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_item_definition"),
    __metadata("design:type", Boolean)
], EntityDefinitionResource.prototype, "isTaxonomyItemDefinition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_enabled_definition"),
    __metadata("design:type", Boolean)
], EntityDefinitionResource.prototype, "isPathEnabledDefinition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_manual_sorting_allowed"),
    __metadata("design:type", Boolean)
], EntityDefinitionResource.prototype, "isManualSortingAllowed", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], EntityDefinitionResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], EntityDefinitionResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("member_groups"),
    (0, ta_json_1.JsonElementType)(member_group_resource_1.MemberGroupResource),
    __metadata("design:type", Array)
], EntityDefinitionResource.prototype, "memberGroups", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityDefinitionResource.prototype, "permissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("entities"),
    __metadata("design:type", link_1.default)
], EntityDefinitionResource.prototype, "entities", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("related_paths"),
    __metadata("design:type", link_1.default)
], EntityDefinitionResource.prototype, "relatedPaths", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", link_1.default)
], EntityDefinitionResource.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", link_1.default)
], EntityDefinitionResource.prototype, "modifiedBy", void 0);
EntityDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], EntityDefinitionResource);
exports.EntityDefinitionResource = EntityDefinitionResource;

},{"../link":228,"./member-group-resource":268,"./resource":296,"ta-json":424}],263:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityPath = void 0;
const ta_json_1 = require("ta-json");
let EntityPath = class EntityPath {
};
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    __metadata("design:type", Object)
], EntityPath.prototype, "values", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("entity"),
    __metadata("design:type", String)
], EntityPath.prototype, "entity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("definition"),
    __metadata("design:type", String)
], EntityPath.prototype, "definition", void 0);
EntityPath = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityPath);
exports.EntityPath = EntityPath;

},{"ta-json":424}],264:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityResource = void 0;
const ta_json_1 = require("ta-json");
const relation_map_resource_converter_1 = require("../converters/relation-map-resource-converter");
const link_1 = __importDefault(require("../link"));
const relation_map_resource_1 = require("./relation-map-resource");
const resource_1 = __importDefault(require("./resource"));
const date_converter_1 = require("../converters/date-converter");
const entity_path_1 = require("./entity-path");
let EntityResource = class EntityResource extends resource_1.default {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], EntityResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", Object)
], EntityResource.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("entitydefinition"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "entityDefinition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cultures"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityResource.prototype, "cultures", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relations"),
    (0, ta_json_1.JsonConverter)(relation_map_resource_converter_1.RelationMapResourceConverter),
    __metadata("design:type", relation_map_resource_1.RelationMapResource)
], EntityResource.prototype, "relations", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("properties"),
    __metadata("design:type", Object)
], EntityResource.prototype, "properties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("renditions"),
    __metadata("design:type", Object)
], EntityResource.prototype, "renditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("related_paths"),
    __metadata("design:type", Object)
], EntityResource.prototype, "relatedPaths", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("locked_by"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "lockedBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("locked_on"),
    (0, ta_json_1.JsonConverter)(date_converter_1.DateConverter),
    __metadata("design:type", Object)
], EntityResource.prototype, "lockedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_root_taxonomy_item"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "isRootTaxonomyItem", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_root"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "isPathRoot", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("inherits_security"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "inheritsSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("version"),
    __metadata("design:type", Number)
], EntityResource.prototype, "version", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    (0, ta_json_1.JsonConverter)(date_converter_1.DateConverter),
    __metadata("design:type", Date)
], EntityResource.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    (0, ta_json_1.JsonConverter)(date_converter_1.DateConverter),
    __metadata("design:type", Date)
], EntityResource.prototype, "modifiedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "modifiedBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("requested_permissions"),
    __metadata("design:type", Object)
], EntityResource.prototype, "requestedPermissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("copy"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "copy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "permissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("lifecycle"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "lifeCycle", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("saved_selections"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "savedSelections", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("roles"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "roles", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("annotations"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "annotations", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("full"),
    __metadata("design:type", link_1.default)
], EntityResource.prototype, "full", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_current_user_default"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "isCurrentUserDefault", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("language_supported_ootb"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "languageSupportedOotb", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("HasPublicLink"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "hasPublicLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("saved_selection_page_name"),
    __metadata("design:type", String)
], EntityResource.prototype, "savedSelectionPageName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("gateway_links"),
    __metadata("design:type", Object)
], EntityResource.prototype, "gatewayLinks", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("public_link"),
    __metadata("design:type", String)
], EntityResource.prototype, "publicLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("public_collection_link"),
    __metadata("design:type", String)
], EntityResource.prototype, "publicCollectionLink", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_enabled"),
    __metadata("design:type", Boolean)
], EntityResource.prototype, "isEnabled", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modules"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityResource.prototype, "modules", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("path"),
    (0, ta_json_1.JsonElementType)(entity_path_1.EntityPath),
    __metadata("design:type", Array)
], EntityResource.prototype, "path", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("CombinedPublishStatus"),
    __metadata("design:type", String)
], EntityResource.prototype, "combinedPublishStatus", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("CombinedPublishStatusDetails"),
    __metadata("design:type", String)
], EntityResource.prototype, "combinedPublishStatusDetails", void 0);
EntityResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], EntityResource);
exports.EntityResource = EntityResource;

},{"../converters/date-converter":193,"../converters/relation-map-resource-converter":200,"../link":228,"./entity-path":263,"./relation-map-resource":294,"./resource":296,"ta-json":424}],265:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
const resource_1 = __importDefault(require("./resource"));
let ListResource = class ListResource extends resource_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("total_items"),
    __metadata("design:type", Object)
], ListResource.prototype, "totalItems", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("returned_items"),
    __metadata("design:type", Object)
], ListResource.prototype, "returnedItems", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("offset"),
    __metadata("design:type", Object)
], ListResource.prototype, "offset", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("next"),
    (0, ta_json_1.JsonType)(link_1.default),
    __metadata("design:type", Object)
], ListResource.prototype, "next", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("previous"),
    (0, ta_json_1.JsonType)(link_1.default),
    __metadata("design:type", Object)
], ListResource.prototype, "previous", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", Object)
], ListResource.prototype, "identifier", void 0);
ListResource = __decorate([
    (0, ta_json_1.JsonObject)()
], ListResource);
exports.ListResource = ListResource;

},{"../link":228,"./resource":296,"ta-json":424}],266:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMemberConditionResource = exports.BooleanMemberConditionResource = exports.StringMemberConditionResource = exports.NoAncestorMemberConditionResource = exports.MemberConditionResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
let MemberConditionResource = class MemberConditionResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("member"),
    __metadata("design:type", String)
], MemberConditionResource.prototype, "memberName", void 0);
MemberConditionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], MemberConditionResource);
exports.MemberConditionResource = MemberConditionResource;
/**
 * Condition triggered if the relation does not have ancestor of given definition id.
 */
let NoAncestorMemberConditionResource = class NoAncestorMemberConditionResource extends MemberConditionResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definition"),
    __metadata("design:type", link_1.default)
], NoAncestorMemberConditionResource.prototype, "definition", void 0);
NoAncestorMemberConditionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], NoAncestorMemberConditionResource);
exports.NoAncestorMemberConditionResource = NoAncestorMemberConditionResource;
/**
 * Condition triggered on the value of the property.
 */
let StringMemberConditionResource = class StringMemberConditionResource extends MemberConditionResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", String)
], StringMemberConditionResource.prototype, "value", void 0);
StringMemberConditionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], StringMemberConditionResource);
exports.StringMemberConditionResource = StringMemberConditionResource;
/**
 * Condition triggered on the value of the property.
 */
class BooleanMemberConditionResource extends MemberConditionResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
}
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Boolean)
], BooleanMemberConditionResource.prototype, "value", void 0);
exports.BooleanMemberConditionResource = BooleanMemberConditionResource;
/**
 * Condition triggered on ancestor id of the relation.
 */
let RelationMemberConditionResource = class RelationMemberConditionResource extends MemberConditionResource {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", link_1.default)
], RelationMemberConditionResource.prototype, "value", void 0);
RelationMemberConditionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RelationMemberConditionResource);
exports.RelationMemberConditionResource = RelationMemberConditionResource;

},{"../link":228,"ta-json":424}],267:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberDefinitionResource = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../contracts/base/data-type"));
const member_condition_resource_converter_1 = require("../converters/member-condition-resource-converter");
const member_condition_resource_1 = require("./member-condition-resource");
let MemberDefinitionResource = class MemberDefinitionResource {
    constructor(type) {
        this.labels = {};
        this.helpText = {};
        this.conditions = [];
        this.type = type;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], MemberDefinitionResource.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], MemberDefinitionResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("allow_updates"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "allowUpdates", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_secured"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "isSecured", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], MemberDefinitionResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("helptext"),
    __metadata("design:type", Object)
], MemberDefinitionResource.prototype, "helpText", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditions"),
    (0, ta_json_1.JsonElementType)(member_condition_resource_1.MemberConditionResource),
    (0, ta_json_1.JsonConverter)(member_condition_resource_converter_1.MemberConditionResourceConverter),
    __metadata("design:type", Array)
], MemberDefinitionResource.prototype, "conditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_conditional"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "isConditional", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_trigger_conditional_members"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "canTriggerConditionalMembers", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_write"),
    __metadata("design:type", Boolean)
], MemberDefinitionResource.prototype, "canWrite", void 0);
MemberDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorProperty)("type"),
    __metadata("design:paramtypes", [String])
], MemberDefinitionResource);
exports.MemberDefinitionResource = MemberDefinitionResource;

},{"../contracts/base/data-type":86,"../converters/member-condition-resource-converter":196,"./member-condition-resource":266,"ta-json":424}],268:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberGroupResource = void 0;
const ta_json_1 = require("ta-json");
const member_condition_resource_converter_1 = require("../converters/member-condition-resource-converter");
const member_condition_resource_1 = require("./member-condition-resource");
const member_definition_resource_1 = require("./member-definition-resource");
let MemberGroupResource = class MemberGroupResource {
    constructor(init) {
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], MemberGroupResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("content_group"),
    __metadata("design:type", String)
], MemberGroupResource.prototype, "contentGroup", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], MemberGroupResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_conditional"),
    __metadata("design:type", Boolean)
], MemberGroupResource.prototype, "isConditional", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditions"),
    (0, ta_json_1.JsonElementType)(member_condition_resource_1.MemberConditionResource),
    (0, ta_json_1.JsonConverter)(member_condition_resource_converter_1.MemberConditionResourceConverter),
    __metadata("design:type", Array)
], MemberGroupResource.prototype, "conditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_secured"),
    __metadata("design:type", Boolean)
], MemberGroupResource.prototype, "isSecured", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("members"),
    (0, ta_json_1.JsonElementType)(member_definition_resource_1.MemberDefinitionResource),
    __metadata("design:type", Array)
], MemberGroupResource.prototype, "memberDefinitions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], MemberGroupResource.prototype, "labels", void 0);
MemberGroupResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], MemberGroupResource);
exports.MemberGroupResource = MemberGroupResource;

},{"../converters/member-condition-resource-converter":196,"./member-condition-resource":266,"./member-definition-resource":267,"ta-json":424}],269:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DistributeNotificationResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
let DistributeNotificationResource = class DistributeNotificationResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("channels"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], DistributeNotificationResource.prototype, "channels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("recipients"),
    (0, ta_json_1.JsonElementType)(link_1.default),
    __metadata("design:type", Object)
], DistributeNotificationResource.prototype, "recipients", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parameters"),
    __metadata("design:type", Object)
], DistributeNotificationResource.prototype, "parameters", void 0);
DistributeNotificationResource = __decorate([
    (0, ta_json_1.JsonObject)()
], DistributeNotificationResource);
exports.DistributeNotificationResource = DistributeNotificationResource;

},{"../../link":228,"ta-json":424}],270:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
const option_list_description_resource_1 = __importDefault(require("./option-list-description-resource"));
let OptionListCollectionResource = class OptionListCollectionResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(option_list_description_resource_1.default),
    __metadata("design:type", Array)
], OptionListCollectionResource.prototype, "items", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("self"),
    __metadata("design:type", link_1.default)
], OptionListCollectionResource.prototype, "self", void 0);
OptionListCollectionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], OptionListCollectionResource);
exports.default = OptionListCollectionResource;

},{"../../link":228,"./option-list-description-resource":271,"ta-json":424}],271:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
let OptionListDescriptionResource = class OptionListDescriptionResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], OptionListDescriptionResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], OptionListDescriptionResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("href") //TODO map as Uri?
    ,
    __metadata("design:type", String)
], OptionListDescriptionResource.prototype, "href", void 0);
OptionListDescriptionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], OptionListDescriptionResource);
exports.default = OptionListDescriptionResource;

},{"ta-json":424}],272:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const option_list_type_1 = require("../../contracts/base/option-lists/option-list-type");
const link_1 = __importDefault(require("../../link"));
const resource_1 = __importDefault(require("../resource"));
const option_list_value_resource_1 = __importDefault(require("./option-list-value-resource"));
let OptionListResource = class OptionListResource extends resource_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], OptionListResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], OptionListResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], OptionListResource.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], OptionListResource.prototype, "isSystemOwned", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(option_list_value_resource_1.default),
    __metadata("design:type", Array)
], OptionListResource.prototype, "values", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    __metadata("design:type", Date)
], OptionListResource.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    __metadata("design:type", Date)
], OptionListResource.prototype, "modifiedOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", link_1.default)
], OptionListResource.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", link_1.default)
], OptionListResource.prototype, "modifiedBy", void 0);
OptionListResource = __decorate([
    (0, ta_json_1.JsonObject)()
], OptionListResource);
exports.default = OptionListResource;

},{"../../contracts/base/option-lists/option-list-type":104,"../../link":228,"../resource":296,"./option-list-value-resource":273,"ta-json":424}],273:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var OptionListValueResource_1;
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
let OptionListValueResource = OptionListValueResource_1 = class OptionListValueResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", String)
], OptionListValueResource.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], OptionListValueResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(OptionListValueResource_1),
    __metadata("design:type", Array)
], OptionListValueResource.prototype, "values", void 0);
OptionListValueResource = OptionListValueResource_1 = __decorate([
    (0, ta_json_1.JsonObject)()
], OptionListValueResource);
exports.default = OptionListValueResource;

},{"ta-json":424}],274:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentVisualization = exports.ContainerVisualization = void 0;
const ta_json_1 = require("ta-json");
let ContainerVisualization = class ContainerVisualization {
    constructor() {
        this.showPanelTitle = false;
        this.collapsible = false;
        this.collapsedByDefault = false;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("componentContainer"),
    __metadata("design:type", String)
], ContainerVisualization.prototype, "componentContainer", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("showPanelTitle"),
    __metadata("design:type", Boolean)
], ContainerVisualization.prototype, "showPanelTitle", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("collapsible"),
    __metadata("design:type", Boolean)
], ContainerVisualization.prototype, "collapsible", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("collapsedByDefault"),
    __metadata("design:type", Boolean)
], ContainerVisualization.prototype, "collapsedByDefault", void 0);
ContainerVisualization = __decorate([
    (0, ta_json_1.JsonObject)()
], ContainerVisualization);
exports.ContainerVisualization = ContainerVisualization;
let ComponentVisualization = class ComponentVisualization {
};
__decorate([
    (0, ta_json_1.JsonProperty)("container"),
    __metadata("design:type", ContainerVisualization)
], ComponentVisualization.prototype, "container", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("version"),
    __metadata("design:type", String)
], ComponentVisualization.prototype, "version", void 0);
ComponentVisualization = __decorate([
    (0, ta_json_1.JsonObject)()
], ComponentVisualization);
exports.ComponentVisualization = ComponentVisualization;

},{"ta-json":424}],275:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LanguageResource = void 0;
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("../resource"));
let LanguageResource = class LanguageResource extends resource_1.default {
    constructor() {
        super(...arguments);
        this.label = {};
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], LanguageResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], LanguageResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("culture"),
    __metadata("design:type", String)
], LanguageResource.prototype, "culture", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("path"),
    __metadata("design:type", String)
], LanguageResource.prototype, "path", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("label"),
    __metadata("design:type", Object)
], LanguageResource.prototype, "label", void 0);
LanguageResource = __decorate([
    (0, ta_json_1.JsonObject)()
], LanguageResource);
exports.LanguageResource = LanguageResource;

},{"../resource":296,"ta-json":424}],276:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var MenuItem_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItem = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
let MenuItem = MenuItem_1 = class MenuItem {
    constructor() {
        this.isActive = false;
        this.disableMenu = false;
        this.items = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], MenuItem.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], MenuItem.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("title"),
    __metadata("design:type", String)
], MenuItem.prototype, "title", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("icon"),
    __metadata("design:type", String)
], MenuItem.prototype, "icon", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("active"),
    __metadata("design:type", Boolean)
], MenuItem.prototype, "isActive", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("relativeurl"),
    __metadata("design:type", String)
], MenuItem.prototype, "relativeUrl", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("url"),
    __metadata("design:type", link_1.default)
], MenuItem.prototype, "url", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("disable_menu"),
    __metadata("design:type", Boolean)
], MenuItem.prototype, "disableMenu", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(MenuItem_1),
    __metadata("design:type", Array)
], MenuItem.prototype, "items", void 0);
MenuItem = MenuItem_1 = __decorate([
    (0, ta_json_1.JsonObject)()
], MenuItem);
exports.MenuItem = MenuItem;

},{"../../link":228,"ta-json":424}],277:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageComponentResource = void 0;
const ta_json_1 = require("ta-json");
const component_visualization_1 = require("./component-visualization");
let PageComponentResource = class PageComponentResource {
    constructor() {
        this.isTitleVisible = false;
        this.isVisible = false;
        this.isNested = false;
        this.uiVisibility = "Always";
        this.takeUserSettings = false;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], PageComponentResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", String)
], PageComponentResource.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], PageComponentResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], PageComponentResource.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("title"),
    __metadata("design:type", Object)
], PageComponentResource.prototype, "title", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_title_visible"),
    __metadata("design:type", Boolean)
], PageComponentResource.prototype, "isTitleVisible", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_visible"),
    __metadata("design:type", Boolean)
], PageComponentResource.prototype, "isVisible", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_nested"),
    __metadata("design:type", Boolean)
], PageComponentResource.prototype, "isNested", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("zone"),
    __metadata("design:type", String)
], PageComponentResource.prototype, "zone", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data"),
    __metadata("design:type", Object)
], PageComponentResource.prototype, "data", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("settings"),
    __metadata("design:type", Object)
], PageComponentResource.prototype, "settings", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("uiVisibility"),
    __metadata("design:type", String)
], PageComponentResource.prototype, "uiVisibility", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("messages"),
    __metadata("design:type", Object)
], PageComponentResource.prototype, "messages", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("visualization"),
    __metadata("design:type", component_visualization_1.ComponentVisualization)
], PageComponentResource.prototype, "visualization", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("take_user_settings"),
    __metadata("design:type", Boolean)
], PageComponentResource.prototype, "takeUserSettings", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("use_react"),
    __metadata("design:type", Object)
], PageComponentResource.prototype, "useReact", void 0);
PageComponentResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PageComponentResource);
exports.PageComponentResource = PageComponentResource;

},{"./component-visualization":274,"ta-json":424}],278:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageResource = void 0;
const ta_json_1 = require("ta-json");
const page_resource_menus_converter_1 = require("../../converters/page-resource-menus-converter");
const page_resource_zones_converter_1 = require("../../converters/page-resource-zones-converter");
const resource_1 = __importDefault(require("../resource"));
const language_resource_1 = require("./language-resource");
const portal_section_resource_1 = require("./portal-section-resource");
let PageResource = class PageResource extends resource_1.default {
    constructor() {
        super(...arguments);
        this.isTitleVisible = false;
        this.isInSiteMap = false;
        this.isInMenu = false;
        this.zones = {};
        this.sections = [];
        this.languages = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], PageResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", String)
], PageResource.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], PageResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("title"),
    __metadata("design:type", Object)
], PageResource.prototype, "title", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("path"),
    __metadata("design:type", Object)
], PageResource.prototype, "path", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data"),
    __metadata("design:type", Object)
], PageResource.prototype, "data", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_title_visible"),
    __metadata("design:type", Boolean)
], PageResource.prototype, "isTitleVisible", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_in_sitemap"),
    __metadata("design:type", Boolean)
], PageResource.prototype, "isInSiteMap", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_in_menu"),
    __metadata("design:type", Boolean)
], PageResource.prototype, "isInMenu", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("zones"),
    (0, ta_json_1.JsonConverter)(page_resource_zones_converter_1.PageResourceZonesConverter),
    __metadata("design:type", Object)
], PageResource.prototype, "zones", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("sections"),
    (0, ta_json_1.JsonElementType)(portal_section_resource_1.PortalSectionResource),
    __metadata("design:type", Array)
], PageResource.prototype, "sections", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("menus"),
    (0, ta_json_1.JsonConverter)(page_resource_menus_converter_1.PageResourceMenusConverter),
    __metadata("design:type", Object)
], PageResource.prototype, "menus", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("languages"),
    (0, ta_json_1.JsonElementType)(language_resource_1.LanguageResource),
    __metadata("design:type", Array)
], PageResource.prototype, "languages", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("messages"),
    __metadata("design:type", Object)
], PageResource.prototype, "messages", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("back_destination"),
    __metadata("design:type", Object)
], PageResource.prototype, "backDestination", void 0);
PageResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PageResource);
exports.PageResource = PageResource;

},{"../../converters/page-resource-menus-converter":198,"../../converters/page-resource-zones-converter":199,"../resource":296,"./language-resource":275,"./portal-section-resource":282,"ta-json":424}],279:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageRowSettings = exports.Positioning = exports.Responsiveness = exports.GeneralRowSettings = void 0;
const ta_json_1 = require("ta-json");
let GeneralRowSettings = class GeneralRowSettings {
};
__decorate([
    (0, ta_json_1.JsonProperty)("rowWidthType"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "rowWidthType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("rowWithValue"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "rowWithValue", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("marginTop"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "marginTop", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("marginBottom"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "marginBottom", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("paddingTop"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "paddingTop", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("paddingBottom"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "paddingBottom", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("paddingLeft"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "paddingLeft", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("paddingRight"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "paddingRight", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("backgroundColor"),
    __metadata("design:type", String)
], GeneralRowSettings.prototype, "backgroundColor", void 0);
GeneralRowSettings = __decorate([
    (0, ta_json_1.JsonObject)()
], GeneralRowSettings);
exports.GeneralRowSettings = GeneralRowSettings;
let Responsiveness = class Responsiveness {
};
__decorate([
    (0, ta_json_1.JsonProperty)("lg"),
    __metadata("design:type", Number)
], Responsiveness.prototype, "lg", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("md"),
    __metadata("design:type", Number)
], Responsiveness.prototype, "md", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("sm"),
    __metadata("design:type", Number)
], Responsiveness.prototype, "sm", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("xs"),
    __metadata("design:type", Number)
], Responsiveness.prototype, "xs", void 0);
Responsiveness = __decorate([
    (0, ta_json_1.JsonObject)()
], Responsiveness);
exports.Responsiveness = Responsiveness;
let Positioning = class Positioning {
};
__decorate([
    (0, ta_json_1.JsonProperty)("direction"),
    __metadata("design:type", String)
], Positioning.prototype, "direction", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("alignment"),
    __metadata("design:type", String)
], Positioning.prototype, "alignment", void 0);
Positioning = __decorate([
    (0, ta_json_1.JsonObject)()
], Positioning);
exports.Positioning = Positioning;
let PageRowSettings = class PageRowSettings {
    constructor() {
        this.responsiveness = [];
        this.positioning = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("layout"),
    __metadata("design:type", String)
], PageRowSettings.prototype, "layout", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("general"),
    __metadata("design:type", GeneralRowSettings)
], PageRowSettings.prototype, "general", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("responsiveness"),
    (0, ta_json_1.JsonElementType)(Responsiveness),
    __metadata("design:type", Array)
], PageRowSettings.prototype, "responsiveness", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("positioning"),
    (0, ta_json_1.JsonElementType)(Positioning),
    __metadata("design:type", Array)
], PageRowSettings.prototype, "positioning", void 0);
PageRowSettings = __decorate([
    (0, ta_json_1.JsonObject)()
], PageRowSettings);
exports.PageRowSettings = PageRowSettings;

},{"ta-json":424}],280:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalColumnResource = void 0;
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("../resource"));
const page_component_resource_1 = require("./page-component-resource");
let PortalColumnResource = class PortalColumnResource extends resource_1.default {
    constructor() {
        super(...arguments);
        this.components = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("width"),
    __metadata("design:type", Number)
], PortalColumnResource.prototype, "width", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("components"),
    (0, ta_json_1.JsonElementType)(page_component_resource_1.PageComponentResource),
    __metadata("design:type", Array)
], PortalColumnResource.prototype, "components", void 0);
PortalColumnResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PortalColumnResource);
exports.PortalColumnResource = PortalColumnResource;

},{"../resource":296,"./page-component-resource":277,"ta-json":424}],281:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalRowResource = void 0;
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("../resource"));
const page_row_settings_1 = require("./page-row-settings");
const portal_column_resource_1 = require("./portal-column-resource");
let PortalRowResource = class PortalRowResource extends resource_1.default {
    constructor() {
        super(...arguments);
        this.columns = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("settings"),
    __metadata("design:type", page_row_settings_1.PageRowSettings)
], PortalRowResource.prototype, "settings", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("columns"),
    (0, ta_json_1.JsonElementType)(portal_column_resource_1.PortalColumnResource),
    __metadata("design:type", Array)
], PortalRowResource.prototype, "columns", void 0);
PortalRowResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PortalRowResource);
exports.PortalRowResource = PortalRowResource;

},{"../resource":296,"./page-row-settings":279,"./portal-column-resource":280,"ta-json":424}],282:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalSectionResource = void 0;
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("../resource"));
const portal_row_resource_1 = require("./portal-row-resource");
let PortalSectionResource = class PortalSectionResource extends resource_1.default {
    constructor() {
        super(...arguments);
        this.rows = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], PortalSectionResource.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("rows"),
    (0, ta_json_1.JsonElementType)(portal_row_resource_1.PortalRowResource),
    __metadata("design:type", Array)
], PortalSectionResource.prototype, "rows", void 0);
PortalSectionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PortalSectionResource);
exports.PortalSectionResource = PortalSectionResource;

},{"../resource":296,"./portal-row-resource":281,"ta-json":424}],283:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionsResource = void 0;
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("./resource"));
let PermissionsResource = class PermissionsResource extends resource_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], PermissionsResource.prototype, "permissions", void 0);
PermissionsResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PermissionsResource);
exports.PermissionsResource = PermissionsResource;

},{"./resource":296,"ta-json":424}],284:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
/**
 * Representation of the condition for {@link PolicyResource}.
 *
 * @remarks
 * Note this representation does not provide access to condition direct entities which are present in internal
 * system model.
 */
let ConditionResource = class ConditionResource {
    constructor() {
        /**
         * The condition is met for entities that are direct or indirect descendants of the entities with the
         * specified links.
         * The entities are combined using the "OR" operator.
         */
        this.entities = [];
        /**
         * The condition is met for entities that are direct descendants of the entities with the specified links.
         * The entities are combined using the "OR" operator.
         */
        this.directEntities = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("entities"),
    (0, ta_json_1.JsonElementType)(link_1.default),
    __metadata("design:type", Array)
], ConditionResource.prototype, "entities", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("direct_entities"),
    (0, ta_json_1.JsonElementType)(link_1.default),
    __metadata("design:type", Array)
], ConditionResource.prototype, "directEntities", void 0);
ConditionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], ConditionResource);
exports.ConditionResource = ConditionResource;

},{"../../link":228,"ta-json":424}],285:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberPolicyResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
let MemberPolicyResource = class MemberPolicyResource {
    constructor(init) {
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definition"),
    __metadata("design:type", link_1.default)
], MemberPolicyResource.prototype, "definition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("target"),
    __metadata("design:type", String)
], MemberPolicyResource.prototype, "target", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_read"),
    __metadata("design:type", Boolean)
], MemberPolicyResource.prototype, "canRead", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("can_write"),
    __metadata("design:type", Boolean)
], MemberPolicyResource.prototype, "canWrite", void 0);
MemberPolicyResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], MemberPolicyResource);
exports.MemberPolicyResource = MemberPolicyResource;

},{"../../link":228,"ta-json":424}],286:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
const resource_1 = __importDefault(require("../resource"));
const member_policy_resource_1 = require("./member-policy-resource");
const rule_resource_1 = require("./rule-resource");
/**
 * Policy resource.
 */
let PolicyResource = class PolicyResource extends resource_1.default {
    constructor() {
        super(...arguments);
        /**
         * Non null collection of rules for the policy.
         *
         * @remarks
         * If any of the rules apply in the specific case the policy is triggered (i.e. rules are combined with "OR" logical
         * operator).
         */
        this.rules = [];
        /**
         * Non null collection of the member security policies.
         */
        this.memberSecurity = [];
        /**
         * Non null collection of the member group security policies.
         */
        this.memberGroupSecurity = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("rules"),
    (0, ta_json_1.JsonElementType)(rule_resource_1.RuleResource),
    __metadata("design:type", Array)
], PolicyResource.prototype, "rules", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("member_security"),
    (0, ta_json_1.JsonElementType)(member_policy_resource_1.MemberPolicyResource),
    __metadata("design:type", Array)
], PolicyResource.prototype, "memberSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("membergroup_security"),
    (0, ta_json_1.JsonElementType)(member_policy_resource_1.MemberPolicyResource),
    __metadata("design:type", Array)
], PolicyResource.prototype, "memberGroupSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("user"),
    (0, ta_json_1.JsonType)(link_1.default),
    __metadata("design:type", Object)
], PolicyResource.prototype, "user", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("usergroup"),
    (0, ta_json_1.JsonType)(link_1.default),
    __metadata("design:type", Object)
], PolicyResource.prototype, "userGroup", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_by"),
    __metadata("design:type", link_1.default)
], PolicyResource.prototype, "createdBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("created_on"),
    __metadata("design:type", Date)
], PolicyResource.prototype, "createdOn", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_by"),
    __metadata("design:type", link_1.default)
], PolicyResource.prototype, "modifiedBy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("modified_on"),
    __metadata("design:type", Date)
], PolicyResource.prototype, "modifiedOn", void 0);
PolicyResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PolicyResource);
exports.PolicyResource = PolicyResource;

},{"../../link":228,"../resource":296,"./member-policy-resource":285,"./rule-resource":287,"ta-json":424}],287:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../../link"));
const condition_resource_1 = require("./condition-resource");
/**
 * Rule representation for {@link PolicyResource}
 */
let RuleResource = class RuleResource {
    constructor(init) {
        /**
         * Non null collection of entity definition resource links to which this policy applies.
         */
        this.definitions = [];
        /**
         * Non null collection of conditions which needs to be fulfilled uniformly in order to trigger this rule
         * (i.e. conditions are combined with "AND" logical operator).
         */
        this.conditions = [];
        /**
         * Non null collection of permissions this rule grands,
         *
         * @remarks
         * The permissions are simple string constants recognized by the system.
         */
        this.permissions = [];
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("definitions"),
    (0, ta_json_1.JsonElementType)(link_1.default),
    __metadata("design:type", Array)
], RuleResource.prototype, "definitions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("identifier"),
    __metadata("design:type", String)
], RuleResource.prototype, "identifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditions"),
    (0, ta_json_1.JsonElementType)(condition_resource_1.ConditionResource),
    __metadata("design:type", Array)
], RuleResource.prototype, "conditions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], RuleResource.prototype, "permissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("createdByLoggedOnUser"),
    __metadata("design:type", Boolean)
], RuleResource.prototype, "createdByLoggedOnUser", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], RuleResource.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_system_owned"),
    __metadata("design:type", Boolean)
], RuleResource.prototype, "isSystemOwned", void 0);
RuleResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RuleResource);
exports.RuleResource = RuleResource;

},{"../../link":228,"./condition-resource":284,"ta-json":424}],288:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyCopyOptionResource = void 0;
const ta_json_1 = require("ta-json");
/**
 * Defines the property copy options resource.
 */
let PropertyCopyOptionResource = class PropertyCopyOptionResource {
    constructor(property, method, newValue) {
        this.property = property;
        this.method = method;
        this.newValue = newValue !== null && newValue !== void 0 ? newValue : null;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("property"),
    __metadata("design:type", String)
], PropertyCopyOptionResource.prototype, "property", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("method"),
    __metadata("design:type", String)
], PropertyCopyOptionResource.prototype, "method", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("new_value"),
    __metadata("design:type", Object)
], PropertyCopyOptionResource.prototype, "newValue", void 0);
PropertyCopyOptionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String, Object])
], PropertyCopyOptionResource);
exports.PropertyCopyOptionResource = PropertyCopyOptionResource;

},{"ta-json":424}],289:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringPropertyDefinitionResource = exports.LongPropertyDefinitionResource = exports.JsonPropertyDefinitionResource = exports.IntegerPropertyDefinitionResource = exports.DecimalPropertyDefinitionResource = exports.DateTimeOffsetPropertyDefinitionResource = exports.DateTimePropertyDefinitionResource = exports.BooleanPropertyDefinitionResource = exports.PropertyDefinitionResource = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importStar(require("../contracts/base/data-type"));
const member_definition_type_1 = require("../contracts/base/member-definition-type");
const string_content_type_1 = require("../contracts/base/string-content-type");
const link_1 = __importDefault(require("../link"));
const conditional_validation_resource_js_1 = require("./conditional-validation-resource.js");
const member_definition_resource_1 = require("./member-definition-resource");
let PropertyDefinitionResource = class PropertyDefinitionResource extends member_definition_resource_1.MemberDefinitionResource {
    get definitionType() {
        return member_definition_type_1.MemberDefinitionType.Property;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("is_indexed"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "indexed", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_mandatory"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "isMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_multilanguage"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "isMultiLanguage", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_multivalue"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "isMultiValue", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_unique"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "isUnique", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("boost"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "boost", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("included_in_content"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "includeInContent", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("included_in_completion"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "includeInCompletion", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ignore_on_export"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "ignoreOnExport", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("stored_in_graph"),
    __metadata("design:type", Boolean)
], PropertyDefinitionResource.prototype, "storedInGraph", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_js_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_js_1.ConditionalValidationResource)
], PropertyDefinitionResource.prototype, "conditionalValidation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("validation_expression"),
    __metadata("design:type", Object)
], PropertyDefinitionResource.prototype, "validationExpression", void 0);
PropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)()
], PropertyDefinitionResource);
exports.PropertyDefinitionResource = PropertyDefinitionResource;
let BooleanPropertyDefinitionResource = class BooleanPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.Boolean);
        Object.assign(this, init);
    }
};
BooleanPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Boolean),
    __metadata("design:paramtypes", [Object])
], BooleanPropertyDefinitionResource);
exports.BooleanPropertyDefinitionResource = BooleanPropertyDefinitionResource;
let DateTimePropertyDefinitionResource = class DateTimePropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.DateTime);
        Object.assign(this, init);
    }
};
DateTimePropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.DateTime),
    __metadata("design:paramtypes", [Object])
], DateTimePropertyDefinitionResource);
exports.DateTimePropertyDefinitionResource = DateTimePropertyDefinitionResource;
let DateTimeOffsetPropertyDefinitionResource = class DateTimeOffsetPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.DateTimeOffset);
        Object.assign(this, init);
    }
};
DateTimeOffsetPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.DateTimeOffset),
    __metadata("design:paramtypes", [Object])
], DateTimeOffsetPropertyDefinitionResource);
exports.DateTimeOffsetPropertyDefinitionResource = DateTimeOffsetPropertyDefinitionResource;
let DecimalPropertyDefinitionResource = class DecimalPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.Decimal);
        Object.assign(this, init);
    }
};
DecimalPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Decimal),
    __metadata("design:paramtypes", [Object])
], DecimalPropertyDefinitionResource);
exports.DecimalPropertyDefinitionResource = DecimalPropertyDefinitionResource;
let IntegerPropertyDefinitionResource = class IntegerPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.Integer);
        Object.assign(this, init);
    }
};
IntegerPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Integer),
    __metadata("design:paramtypes", [Object])
], IntegerPropertyDefinitionResource);
exports.IntegerPropertyDefinitionResource = IntegerPropertyDefinitionResource;
let JsonPropertyDefinitionResource = class JsonPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.Json);
        this.contentType = null;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("content_type"),
    __metadata("design:type", Object)
], JsonPropertyDefinitionResource.prototype, "contentType", void 0);
JsonPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Json),
    __metadata("design:paramtypes", [Object])
], JsonPropertyDefinitionResource);
exports.JsonPropertyDefinitionResource = JsonPropertyDefinitionResource;
let LongPropertyDefinitionResource = class LongPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.Long);
        Object.assign(this, init);
    }
};
LongPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Long),
    __metadata("design:paramtypes", [Object])
], LongPropertyDefinitionResource);
exports.LongPropertyDefinitionResource = LongPropertyDefinitionResource;
let StringPropertyDefinitionResource = class StringPropertyDefinitionResource extends PropertyDefinitionResource {
    constructor(init) {
        super(data_type_1.PropertyDataType.String);
        this.contentType = string_content_type_1.StringContentType.SingleLine;
        this.validationExpression = null;
        this.dataSource = null;
        Object.assign(this, init);
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("content_type"),
    __metadata("design:type", String)
], StringPropertyDefinitionResource.prototype, "contentType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("validation_expression"),
    __metadata("design:type", Object)
], StringPropertyDefinitionResource.prototype, "validationExpression", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("datasource"),
    (0, ta_json_1.JsonType)(link_1.default),
    __metadata("design:type", Object)
], StringPropertyDefinitionResource.prototype, "dataSource", void 0);
StringPropertyDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.String),
    __metadata("design:paramtypes", [Object])
], StringPropertyDefinitionResource);
exports.StringPropertyDefinitionResource = StringPropertyDefinitionResource;

},{"../contracts/base/data-type":86,"../contracts/base/member-definition-type":95,"../contracts/base/string-content-type":130,"../link":228,"./conditional-validation-resource.js":259,"./member-definition-resource":267,"ta-json":424}],290:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryLoadingResource = void 0;
const ta_json_1 = require("ta-json");
const query_load_configuration_1 = require("../contracts/querying/query-load-configuration");
let QueryLoadingResource = class QueryLoadingResource {
    constructor() {
        /**
         *  Indicates if and how entities resulting entities should be loaded. By default, no entities will be loaded, only ids.
         *
         *  @deprecated For backwards compatibility only. Loading configurations are now passed as a separate parameter.
         */
        this.loadConfiguration = query_load_configuration_1.QueryLoadConfiguration.Ids;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("load_configuration"),
    (0, ta_json_1.JsonType)(query_load_configuration_1.QueryLoadConfiguration),
    __metadata("design:type", Object)
], QueryLoadingResource.prototype, "loadConfiguration", void 0);
QueryLoadingResource = __decorate([
    (0, ta_json_1.JsonObject)()
], QueryLoadingResource);
exports.QueryLoadingResource = QueryLoadingResource;

},{"../contracts/querying/query-load-configuration":179,"ta-json":424}],291:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryResultResource = void 0;
const ta_json_1 = require("ta-json");
const list_resource_1 = require("./list-resource");
const search_document_resource_1 = require("./search-document-resource");
let QueryResultResource = class QueryResultResource extends list_resource_1.ListResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("scroll_id"),
    __metadata("design:type", Object)
], QueryResultResource.prototype, "scrollId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(search_document_resource_1.SearchDocumentResource),
    __metadata("design:type", Array)
], QueryResultResource.prototype, "items", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("minimal_schema_list"),
    __metadata("design:type", Object)
], QueryResultResource.prototype, "minimalSchemaList", void 0);
QueryResultResource = __decorate([
    (0, ta_json_1.JsonObject)()
], QueryResultResource);
exports.QueryResultResource = QueryResultResource;

},{"./list-resource":265,"./search-document-resource":297,"ta-json":424}],292:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationCopyOptionResource = void 0;
const ta_json_1 = require("ta-json");
/**
 * Defines the entity copy options resource.
 */
let RelationCopyOptionResource = class RelationCopyOptionResource {
    constructor(relation, method, relatedCopyOptions) {
        this.relation = relation;
        this.method = method;
        this.relatedCopyOptions = relatedCopyOptions !== null && relatedCopyOptions !== void 0 ? relatedCopyOptions : null;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("relation"),
    __metadata("design:type", String)
], RelationCopyOptionResource.prototype, "relation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("method"),
    __metadata("design:type", String)
], RelationCopyOptionResource.prototype, "method", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("related_copy_options"),
    __metadata("design:type", Object)
], RelationCopyOptionResource.prototype, "relatedCopyOptions", void 0);
RelationCopyOptionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, String, Object])
], RelationCopyOptionResource);
exports.RelationCopyOptionResource = RelationCopyOptionResource;

},{"ta-json":424}],293:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationDefinitionResource = void 0;
const ta_json_1 = require("ta-json");
const data_type_1 = __importDefault(require("../contracts/base/data-type"));
const member_definition_type_1 = require("../contracts/base/member-definition-type");
const link_1 = __importDefault(require("../link"));
const conditional_validation_resource_js_1 = require("./conditional-validation-resource.js");
const member_definition_resource_1 = require("./member-definition-resource");
let RelationDefinitionResource = class RelationDefinitionResource extends member_definition_resource_1.MemberDefinitionResource {
    constructor(init) {
        super(data_type_1.default.Relation);
        this.allowNavigation = true;
        this.nestedProperties = [];
        this.associatedLabels = {};
        Object.assign(this, init);
    }
    get definitionType() {
        return member_definition_type_1.MemberDefinitionType.Relation;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("role"),
    __metadata("design:type", String)
], RelationDefinitionResource.prototype, "role", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("cardinality"),
    __metadata("design:type", String)
], RelationDefinitionResource.prototype, "cardinality", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child_is_mandatory"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "childIsMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child_conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_js_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_js_1.ConditionalValidationResource)
], RelationDefinitionResource.prototype, "childConditionalValidation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_is_mandatory"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "parentIsMandatory", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_conditional_validation"),
    (0, ta_json_1.JsonConverter)(conditional_validation_resource_js_1.ConditionalValidationResourceConverter),
    __metadata("design:type", conditional_validation_resource_js_1.ConditionalValidationResource)
], RelationDefinitionResource.prototype, "parentConditionalValidation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("inherits_security"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "inheritsSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("allow_navigation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "allowNavigation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_nested"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isNested", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested_properties"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], RelationDefinitionResource.prototype, "nestedProperties", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested_permissions"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "nestedPermissions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isTaxonomyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_taxonomy_hierarchy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isTaxonomyHierarchyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("content_is_copied"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "contentIsCopied", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("completion_is_copied"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "completionIsCopied", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_relation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isPathRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_path_hierarchy_relation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isPathHierarchyRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("path_hierarchy_score"),
    __metadata("design:type", String)
], RelationDefinitionResource.prototype, "pathHierarchyScore", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_rendition_relation"),
    __metadata("design:type", Boolean)
], RelationDefinitionResource.prototype, "isRenditionRelation", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("associated_labels"),
    __metadata("design:type", Object)
], RelationDefinitionResource.prototype, "associatedLabels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("associated_entitydefinition"),
    __metadata("design:type", link_1.default)
], RelationDefinitionResource.prototype, "associatedEntityDefinition", void 0);
RelationDefinitionResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    (0, ta_json_1.JsonDiscriminatorValue)(data_type_1.default.Relation),
    __metadata("design:paramtypes", [Object])
], RelationDefinitionResource);
exports.RelationDefinitionResource = RelationDefinitionResource;

},{"../contracts/base/data-type":86,"../contracts/base/member-definition-type":95,"../link":228,"./conditional-validation-resource.js":259,"./member-definition-resource":267,"ta-json":424}],294:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationMapResource = void 0;
const ta_json_1 = require("ta-json");
let RelationMapResource = class RelationMapResource {
};
RelationMapResource = __decorate([
    (0, ta_json_1.JsonObject)()
], RelationMapResource);
exports.RelationMapResource = RelationMapResource;

},{"ta-json":424}],295:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var RelationResource_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationResource = void 0;
const ta_json_1 = require("ta-json");
const entity_link_1 = require("../entity-link");
const resource_1 = __importDefault(require("./resource"));
let RelationResource = RelationResource_1 = class RelationResource extends resource_1.default {
    constructor(init) {
        super();
        Object.assign(this, init);
    }
    /**
     * Merges two relation resources.
     *
     * This should be used for self referencing relations, where there can be no conflicts
     * between the two existing resources.
     * @param main - Source to use as defaults
     * @param toMerge - Source to use to set relation links
     */
    static merge(main, toMerge) {
        const result = new RelationResource_1({
            child: main.child,
            children: main.children,
            inheritsSecurity: main.inheritsSecurity,
            parent: main.parent,
            parents: main.parents,
            self: main.self,
        });
        if (toMerge.child != null) {
            result.child = toMerge.child;
        }
        if (toMerge.children != null) {
            result.children = toMerge.children;
        }
        if (toMerge.parent != null) {
            result.parent = toMerge.parent;
        }
        if (toMerge.parents != null) {
            result.parents = toMerge.parents;
        }
        return result;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("parents"),
    (0, ta_json_1.JsonElementType)(entity_link_1.EntityLink),
    __metadata("design:type", Array)
], RelationResource.prototype, "parents", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent"),
    (0, ta_json_1.JsonElementType)(entity_link_1.EntityLink),
    __metadata("design:type", entity_link_1.EntityLink)
], RelationResource.prototype, "parent", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("children"),
    (0, ta_json_1.JsonElementType)(entity_link_1.EntityLink),
    __metadata("design:type", Array)
], RelationResource.prototype, "children", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child"),
    (0, ta_json_1.JsonElementType)(entity_link_1.EntityLink),
    __metadata("design:type", entity_link_1.EntityLink)
], RelationResource.prototype, "child", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("inherits_security"),
    __metadata("design:type", Boolean)
], RelationResource.prototype, "inheritsSecurity", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parent_total"),
    __metadata("design:type", Number)
], RelationResource.prototype, "parentTotal", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("child_total"),
    __metadata("design:type", Number)
], RelationResource.prototype, "childTotal", void 0);
RelationResource = RelationResource_1 = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [Object])
], RelationResource);
exports.RelationResource = RelationResource;

},{"../entity-link":204,"./resource":296,"ta-json":424}],296:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
let Resource = class Resource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("self"),
    __metadata("design:type", link_1.default)
], Resource.prototype, "self", void 0);
Resource = __decorate([
    (0, ta_json_1.JsonObject)()
], Resource);
exports.default = Resource;

},{"../link":228,"ta-json":424}],297:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchDocumentResource = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
const entity_resource_1 = require("./entity-resource");
const resource_1 = __importDefault(require("./resource"));
let SearchDocumentResource = class SearchDocumentResource extends resource_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("link"),
    __metadata("design:type", link_1.default)
], SearchDocumentResource.prototype, "link", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("entity"),
    __metadata("design:type", entity_resource_1.EntityResource)
], SearchDocumentResource.prototype, "entity", void 0);
SearchDocumentResource = __decorate([
    (0, ta_json_1.JsonObject)()
], SearchDocumentResource);
exports.SearchDocumentResource = SearchDocumentResource;

},{"../link":228,"./entity-resource":264,"./resource":296,"ta-json":424}],298:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregationResponseResource = void 0;
const ta_json_1 = require("ta-json");
const bucket_response_resource_1 = require("./bucket-response-resource");
const metric_option_response_resource_1 = require("./metric-option-response-resource");
let AggregationResponseResource = class AggregationResponseResource {
    constructor() {
        this.buckets = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("number_count"),
    __metadata("design:type", Number)
], AggregationResponseResource.prototype, "numberCount", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("buckets"),
    (0, ta_json_1.JsonElementType)(bucket_response_resource_1.BucketResponseResource),
    __metadata("design:type", Array)
], AggregationResponseResource.prototype, "buckets", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("aggregation_type"),
    __metadata("design:type", String)
], AggregationResponseResource.prototype, "requestedAggregationType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("metric_option"),
    __metadata("design:type", metric_option_response_resource_1.MetricOptionResponseResource)
], AggregationResponseResource.prototype, "metricOption", void 0);
AggregationResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], AggregationResponseResource);
exports.AggregationResponseResource = AggregationResponseResource;

},{"./bucket-response-resource":300,"./metric-option-response-resource":310,"ta-json":424}],299:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllFacetValuesResponse = void 0;
const ta_json_1 = require("ta-json");
const all_facet_values_children_converter_1 = require("../../converters/all-facet-values-children-converter");
const resource_1 = __importDefault(require("../resource"));
let AllFacetValuesResponse = class AllFacetValuesResponse extends resource_1.default {
    constructor() {
        super(...arguments);
        this.children = {};
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("query"),
    __metadata("design:type", String)
], AllFacetValuesResponse.prototype, "query", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("facet"),
    __metadata("design:type", String)
], AllFacetValuesResponse.prototype, "facet", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("children"),
    (0, ta_json_1.JsonConverter)(all_facet_values_children_converter_1.AllFacetValuesChildrenConverter),
    __metadata("design:type", Object)
], AllFacetValuesResponse.prototype, "children", void 0);
AllFacetValuesResponse = __decorate([
    (0, ta_json_1.JsonObject)()
], AllFacetValuesResponse);
exports.AllFacetValuesResponse = AllFacetValuesResponse;

},{"../../converters/all-facet-values-children-converter":191,"../resource":296,"ta-json":424}],300:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var BucketResponseResource_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BucketResponseResource = void 0;
const ta_json_1 = require("ta-json");
let BucketResponseResource = BucketResponseResource_1 = class BucketResponseResource {
    constructor() {
        this.count = null;
        this.metric = null;
        this.buckets = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("key"),
    __metadata("design:type", String)
], BucketResponseResource.prototype, "key", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("original_key"),
    __metadata("design:type", String)
], BucketResponseResource.prototype, "originalKey", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("count"),
    __metadata("design:type", Object)
], BucketResponseResource.prototype, "count", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("metric"),
    __metadata("design:type", Object)
], BucketResponseResource.prototype, "metric", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("buckets"),
    (0, ta_json_1.JsonElementType)(BucketResponseResource_1),
    __metadata("design:type", Array)
], BucketResponseResource.prototype, "buckets", void 0);
BucketResponseResource = BucketResponseResource_1 = __decorate([
    (0, ta_json_1.JsonObject)()
], BucketResponseResource);
exports.BucketResponseResource = BucketResponseResource;

},{"ta-json":424}],301:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FacetResponseResource_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FacetResponseResource = void 0;
const ta_json_1 = require("ta-json");
let FacetResponseResource = FacetResponseResource_1 = class FacetResponseResource {
    constructor() {
        this.id = null;
        this.labels = {};
        this.isPartial = false;
        this.children = [];
        this.multiSelectEnabled = false;
        this.checked = false;
        this.hasDescendants = false;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Object)
], FacetResponseResource.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], FacetResponseResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "fieldName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("addQuery"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "addQuery", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("childCount"),
    __metadata("design:type", Number)
], FacetResponseResource.prototype, "totalNumberOfFacetValues", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("ispartial"),
    __metadata("design:type", Boolean)
], FacetResponseResource.prototype, "isPartial", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("limit"),
    __metadata("design:type", Number)
], FacetResponseResource.prototype, "limit", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("matchCount"),
    __metadata("design:type", Number)
], FacetResponseResource.prototype, "matchCount", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("children"),
    (0, ta_json_1.JsonElementType)(FacetResponseResource_1),
    __metadata("design:type", Array)
], FacetResponseResource.prototype, "children", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("definition"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "definition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("position"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "position", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("multi_select_enabled"),
    __metadata("design:type", Boolean)
], FacetResponseResource.prototype, "multiSelectEnabled", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("checked"),
    __metadata("design:type", Boolean)
], FacetResponseResource.prototype, "checked", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("multi_select_empty_query"),
    __metadata("design:type", String)
], FacetResponseResource.prototype, "multiSelectEmptyQuery", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("has_descendants"),
    __metadata("design:type", Boolean)
], FacetResponseResource.prototype, "hasDescendants", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data"),
    __metadata("design:type", Object)
], FacetResponseResource.prototype, "data", void 0);
FacetResponseResource = FacetResponseResource_1 = __decorate([
    (0, ta_json_1.JsonObject)()
], FacetResponseResource);
exports.FacetResponseResource = FacetResponseResource;

},{"ta-json":424}],302:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var FieldFilterResponseResource_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldFilterResponseResource = void 0;
const ta_json_1 = require("ta-json");
const field_filter_value_response_resource_1 = require("./field-filter-value-response-resource");
const filter_operator_1 = require("./filter-operator");
let FieldFilterResponseResource = FieldFilterResponseResource_1 = class FieldFilterResponseResource {
    constructor() {
        this.values = [];
        this.nestedValues = [];
        this.hasDynamicValue = false;
        this.isNested = false;
        this.visible = true;
        this.multiSelect = false;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "fieldName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("label"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "label", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "dataType", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("values"),
    (0, ta_json_1.JsonElementType)(field_filter_value_response_resource_1.FieldFilterValueResponseResource),
    __metadata("design:type", Array)
], FieldFilterResponseResource.prototype, "values", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested_values"),
    (0, ta_json_1.JsonElementType)(FieldFilterResponseResource_1),
    __metadata("design:type", Array)
], FieldFilterResponseResource.prototype, "nestedValues", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("definition"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "definition", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("operator"),
    __metadata("design:type", Number)
], FieldFilterResponseResource.prototype, "operator", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("removeQuery"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "removeQuery", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("dynamic"),
    __metadata("design:type", Boolean)
], FieldFilterResponseResource.prototype, "hasDynamicValue", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("nested"),
    __metadata("design:type", Boolean)
], FieldFilterResponseResource.prototype, "isNested", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("group"),
    __metadata("design:type", String)
], FieldFilterResponseResource.prototype, "group", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("visible"),
    __metadata("design:type", Boolean)
], FieldFilterResponseResource.prototype, "visible", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("multi_select"),
    __metadata("design:type", Boolean)
], FieldFilterResponseResource.prototype, "multiSelect", void 0);
FieldFilterResponseResource = FieldFilterResponseResource_1 = __decorate([
    (0, ta_json_1.JsonObject)()
], FieldFilterResponseResource);
exports.FieldFilterResponseResource = FieldFilterResponseResource;

},{"./field-filter-value-response-resource":303,"./filter-operator":304,"ta-json":424}],303:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldFilterValueResponseResource = void 0;
const ta_json_1 = require("ta-json");
let FieldFilterValueResponseResource = class FieldFilterValueResponseResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Object)
], FieldFilterValueResponseResource.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("label"),
    __metadata("design:type", String)
], FieldFilterValueResponseResource.prototype, "label", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data"),
    __metadata("design:type", Object)
], FieldFilterValueResponseResource.prototype, "data", void 0);
FieldFilterValueResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], FieldFilterValueResponseResource);
exports.FieldFilterValueResponseResource = FieldFilterValueResponseResource;

},{"ta-json":424}],304:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterOperator = void 0;
var FilterOperator;
(function (FilterOperator) {
    /**
     * No operator
     */
    FilterOperator[FilterOperator["None"] = 0] = "None";
    /**
     * Search entry field values must match the given value exactly
     */
    FilterOperator[FilterOperator["Equals"] = 1] = "Equals";
    /**
     * Search entry field values must be smaller than the given value
     */
    FilterOperator[FilterOperator["LessThan"] = 2] = "LessThan";
    /**
     * Search entry field values must be larger than the given value
     */
    FilterOperator[FilterOperator["GreaterThan"] = 3] = "GreaterThan";
    /**
     * Search entry field values must be between two given values
     */
    FilterOperator[FilterOperator["Between"] = 4] = "Between";
    /**
     * Search entry field values must start with the given value
     */
    FilterOperator[FilterOperator["StartsWith"] = 5] = "StartsWith";
    /**
     * Search entry field values must end with the given value
     */
    FilterOperator[FilterOperator["EndsWith"] = 6] = "EndsWith";
    /**
     * Search entry field values must contain the given value
     */
    FilterOperator[FilterOperator["Contains"] = 7] = "Contains";
    /**
     * Search entry field value must contain the given value
     */
    FilterOperator[FilterOperator["FacetEquals"] = 8] = "FacetEquals";
    /**
     * Search entry field values must not contain the given value
     */
    FilterOperator[FilterOperator["DoesNotContain"] = 9] = "DoesNotContain";
    /**
     * Search entry field values must not start with the given value
     */
    FilterOperator[FilterOperator["DoesNotStartWith"] = 10] = "DoesNotStartWith";
    /**
     * Search entry field values must not end with the given value
     */
    FilterOperator[FilterOperator["DoesNotEndWith"] = 11] = "DoesNotEndWith";
    /**
     * Search entry field values must be less or equal to the given value
     */
    FilterOperator[FilterOperator["LessThanOrEquals"] = 12] = "LessThanOrEquals";
    /**
     * Search entry field values must be greater or equal to the given value
     */
    FilterOperator[FilterOperator["GreaterThanOrEquals"] = 13] = "GreaterThanOrEquals";
    /**
     * Search entry field values must not be equal to the given value
     */
    FilterOperator[FilterOperator["DoesNotEqual"] = 14] = "DoesNotEqual";
    /**
     * Search entry field values must contain any of these values
     */
    FilterOperator[FilterOperator["AnyOf"] = 15] = "AnyOf";
    /**
     * Search entry field values must contain all of these values
     */
    FilterOperator[FilterOperator["AllOf"] = 16] = "AllOf";
    /**
     * Search entry field values must not contain any of these values
     */
    FilterOperator[FilterOperator["NoneOf"] = 17] = "NoneOf";
    /**
     * Search entry field has no value
     */
    FilterOperator[FilterOperator["Missing"] = 18] = "Missing";
    /**
     * Search entry field has a value
     */
    FilterOperator[FilterOperator["Exists"] = 19] = "Exists";
    /**
     * Search entry field values must contain all of these values
     */
    FilterOperator[FilterOperator["Changed"] = 20] = "Changed";
})(FilterOperator = exports.FilterOperator || (exports.FilterOperator = {}));

},{}],305:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullTextResponseResource = void 0;
const ta_json_1 = require("ta-json");
let FullTextResponseResource = class FullTextResponseResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", String)
], FullTextResponseResource.prototype, "value", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("removeQuery"),
    __metadata("design:type", String)
], FullTextResponseResource.prototype, "removeQuery", void 0);
FullTextResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], FullTextResponseResource);
exports.FullTextResponseResource = FullTextResponseResource;

},{"ta-json":424}],306:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupCategory = void 0;
const ta_json_1 = require("ta-json");
let GroupCategory = class GroupCategory {
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], GroupCategory.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], GroupCategory.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("label"),
    __metadata("design:type", String)
], GroupCategory.prototype, "label", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("is_row_category"),
    __metadata("design:type", Boolean)
], GroupCategory.prototype, "isRowCategory", void 0);
GroupCategory = __decorate([
    (0, ta_json_1.JsonObject)()
], GroupCategory);
exports.GroupCategory = GroupCategory;

},{"ta-json":424}],307:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupConfig = void 0;
const ta_json_1 = require("ta-json");
let GroupConfig = class GroupConfig {
};
__decorate([
    (0, ta_json_1.JsonProperty)("id"),
    __metadata("design:type", Number)
], GroupConfig.prototype, "id", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("label"),
    __metadata("design:type", String)
], GroupConfig.prototype, "label", void 0);
GroupConfig = __decorate([
    (0, ta_json_1.JsonObject)()
], GroupConfig);
exports.GroupConfig = GroupConfig;

},{"ta-json":424}],308:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupItem = void 0;
const ta_json_1 = require("ta-json");
const entity_resource_1 = require("../entity-resource");
let GroupItem = class GroupItem {
    constructor() {
        this.rowId = null;
        this.columnId = null;
    }
    getEntityResources() {
        return this.items;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("row_id"),
    __metadata("design:type", Object)
], GroupItem.prototype, "rowId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("column_id"),
    __metadata("design:type", Object)
], GroupItem.prototype, "columnId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("number_of_results"),
    __metadata("design:type", Number)
], GroupItem.prototype, "numberOfResults", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(entity_resource_1.EntityResource),
    __metadata("design:type", Array)
], GroupItem.prototype, "items", void 0);
GroupItem = __decorate([
    (0, ta_json_1.JsonObject)()
], GroupItem);
exports.GroupItem = GroupItem;

},{"../entity-resource":264,"ta-json":424}],309:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupedViewResponseResource = void 0;
const ta_json_1 = require("ta-json");
const group_category_1 = require("./group-category");
const group_config_1 = require("./group-config");
const group_item_1 = require("./group-item");
let GroupedViewResponseResource = class GroupedViewResponseResource {
    constructor() {
        this.availableGroups = [];
        this.rowDefinitionId = null;
        this.rows = [];
        this.columnDefinitionId = null;
        this.columns = [];
        this.data = [];
    }
    getEntityResources() {
        const finalItems = [];
        this.data.forEach(element => {
            element.items.forEach(item => finalItems.push(item));
        });
        return finalItems;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("available_groups"),
    (0, ta_json_1.JsonElementType)(group_category_1.GroupCategory),
    __metadata("design:type", Array)
], GroupedViewResponseResource.prototype, "availableGroups", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("row_definition_id"),
    __metadata("design:type", Object)
], GroupedViewResponseResource.prototype, "rowDefinitionId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("rows"),
    (0, ta_json_1.JsonElementType)(group_config_1.GroupConfig),
    __metadata("design:type", Array)
], GroupedViewResponseResource.prototype, "rows", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("column_definition_id"),
    __metadata("design:type", Object)
], GroupedViewResponseResource.prototype, "columnDefinitionId", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("columns"),
    (0, ta_json_1.JsonElementType)(group_config_1.GroupConfig),
    __metadata("design:type", Array)
], GroupedViewResponseResource.prototype, "columns", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("data"),
    (0, ta_json_1.JsonElementType)(group_item_1.GroupItem),
    __metadata("design:type", Array)
], GroupedViewResponseResource.prototype, "data", void 0);
GroupedViewResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], GroupedViewResponseResource);
exports.GroupedViewResponseResource = GroupedViewResponseResource;

},{"./group-category":306,"./group-config":307,"./group-item":308,"ta-json":424}],310:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricOptionResponseResource = void 0;
const ta_json_1 = require("ta-json");
let MetricOptionResponseResource = class MetricOptionResponseResource {
};
__decorate([
    (0, ta_json_1.JsonProperty)("type"),
    __metadata("design:type", String)
], MetricOptionResponseResource.prototype, "type", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("field"),
    __metadata("design:type", Number)
], MetricOptionResponseResource.prototype, "field", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("value"),
    __metadata("design:type", Number)
], MetricOptionResponseResource.prototype, "value", void 0);
MetricOptionResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], MetricOptionResponseResource);
exports.MetricOptionResponseResource = MetricOptionResponseResource;

},{"ta-json":424}],311:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchResponse = void 0;
const ta_json_1 = require("ta-json");
const entity_resource_1 = require("../entity-resource");
const resource_1 = __importDefault(require("../resource"));
const aggregation_response_resource_1 = require("./aggregation-response-resource");
const facet_response_resource_1 = require("./facet-response-resource");
const field_filter_response_resource_1 = require("./field-filter-response-resource");
const full_text_response_resource_1 = require("./full-text-response-resource");
const grouped_view_response_resource_1 = require("./grouped-view-response-resource");
const sorting_response_resource_1 = require("./sorting-response-resource");
let SearchResponse = class SearchResponse extends resource_1.default {
    constructor() {
        // #region Properties
        super(...arguments);
        this.sortingOptions = [];
        this.fieldFilters = [];
        this.fullTextFilters = [];
        this.facets = [];
        this.items = [];
        // #endregion
    }
    //? ExtensionData
    // #endregion
    // #region Methods
    getEntityResources() {
        if (this.groupedView != null) {
            return this.groupedView.getEntityResources();
        }
        return this.items;
    }
    getFieldFiltersResources() {
        return this.fieldFilters;
    }
    getFullTextFilterResources() {
        return this.fullTextFilters;
    }
    getFacetResources() {
        return this.facets;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("query"),
    __metadata("design:type", String)
], SearchResponse.prototype, "query", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("skip"),
    __metadata("design:type", Number)
], SearchResponse.prototype, "skip", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("take"),
    __metadata("design:type", Number)
], SearchResponse.prototype, "take", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("totalItemCount"),
    __metadata("design:type", Number)
], SearchResponse.prototype, "totalItemCount", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("returnedItemCount"),
    __metadata("design:type", Number)
], SearchResponse.prototype, "returnedItemCount", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("sorting"),
    __metadata("design:type", sorting_response_resource_1.SortingResponseResource)
], SearchResponse.prototype, "sorting", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("sortingOptions"),
    (0, ta_json_1.JsonElementType)(sorting_response_resource_1.SortingResponseResource),
    __metadata("design:type", Array)
], SearchResponse.prototype, "sortingOptions", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("filters"),
    (0, ta_json_1.JsonElementType)(field_filter_response_resource_1.FieldFilterResponseResource),
    __metadata("design:type", Array)
], SearchResponse.prototype, "fieldFilters", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("fulltext"),
    (0, ta_json_1.JsonElementType)(full_text_response_resource_1.FullTextResponseResource),
    __metadata("design:type", Array)
], SearchResponse.prototype, "fullTextFilters", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("facets"),
    (0, ta_json_1.JsonElementType)(facet_response_resource_1.FacetResponseResource),
    __metadata("design:type", Array)
], SearchResponse.prototype, "facets", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("clearFilters"),
    __metadata("design:type", String)
], SearchResponse.prototype, "clearFilters", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("items"),
    (0, ta_json_1.JsonElementType)(entity_resource_1.EntityResource),
    __metadata("design:type", Array)
], SearchResponse.prototype, "items", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("superfacet"),
    __metadata("design:type", Number)
], SearchResponse.prototype, "superFacet", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("aggregations"),
    (0, ta_json_1.JsonType)(aggregation_response_resource_1.AggregationResponseResource),
    __metadata("design:type", Object)
], SearchResponse.prototype, "aggregations", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("grouped_view"),
    (0, ta_json_1.JsonType)(grouped_view_response_resource_1.GroupedViewResponseResource),
    __metadata("design:type", Object)
], SearchResponse.prototype, "groupedView", void 0);
SearchResponse = __decorate([
    (0, ta_json_1.JsonObject)()
], SearchResponse);
exports.SearchResponse = SearchResponse;

},{"../entity-resource":264,"../resource":296,"./aggregation-response-resource":298,"./facet-response-resource":301,"./field-filter-response-resource":302,"./full-text-response-resource":305,"./grouped-view-response-resource":309,"./sorting-response-resource":312,"ta-json":424}],312:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SortingResponseResource = void 0;
const ta_json_1 = require("ta-json");
let SortingResponseResource = class SortingResponseResource {
    constructor() {
        this.ascending = false;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], SortingResponseResource.prototype, "fieldName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("labels"),
    __metadata("design:type", Object)
], SortingResponseResource.prototype, "labels", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("asc"),
    __metadata("design:type", Boolean)
], SortingResponseResource.prototype, "ascending", void 0);
SortingResponseResource = __decorate([
    (0, ta_json_1.JsonObject)()
], SortingResponseResource);
exports.SortingResponseResource = SortingResponseResource;

},{"ta-json":424}],313:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ta_json_1 = require("ta-json");
const resource_1 = __importDefault(require("./resource"));
let SetPasswordRequestResource = class SetPasswordRequestResource extends resource_1.default {
    constructor(password) {
        super();
        this.password = password;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("password"),
    __metadata("design:type", String)
], SetPasswordRequestResource.prototype, "password", void 0);
SetPasswordRequestResource = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String])
], SetPasswordRequestResource);
exports.default = SetPasswordRequestResource;

},{"./resource":296,"ta-json":424}],314:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayBufferUploadSource = void 0;
const guard_1 = __importDefault(require("../../guard"));
class ArrayBufferUploadSource {
    constructor(buffer, name) {
        this.buffer = buffer;
        guard_1.default.notNull(buffer);
        guard_1.default.stringNotNullOrEmpty(name);
        this.name = name;
    }
    getReadableSourceAsync() {
        return Promise.resolve(this.buffer);
    }
}
exports.ArrayBufferUploadSource = ArrayBufferUploadSource;

},{"../../guard":224}],315:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateUploadResponse = void 0;
const ta_json_1 = require("ta-json");
let CreateUploadResponse = class CreateUploadResponse {
};
__decorate([
    (0, ta_json_1.JsonProperty)("upload_identifier"),
    __metadata("design:type", String)
], CreateUploadResponse.prototype, "uploadIdentifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("file_identifier"),
    __metadata("design:type", String)
], CreateUploadResponse.prototype, "fileIdentifier", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("storage_identifier"),
    __metadata("design:type", String)
], CreateUploadResponse.prototype, "storageIdentifier", void 0);
CreateUploadResponse = __decorate([
    (0, ta_json_1.JsonObject)()
], CreateUploadResponse);
exports.CreateUploadResponse = CreateUploadResponse;

},{"ta-json":424}],316:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadAction = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
let UploadAction = class UploadAction {
    constructor(name, parameters) {
        guard_1.default.stringNotNullOrEmpty(name);
        this.name = name;
        this.parameters = parameters;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], UploadAction.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parameters"),
    __metadata("design:type", Object)
], UploadAction.prototype, "parameters", void 0);
UploadAction = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Object])
], UploadAction);
exports.UploadAction = UploadAction;

},{"../../guard":224,"ta-json":424}],317:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadConfiguration = void 0;
const ta_json_1 = require("ta-json");
const guard_1 = __importDefault(require("../../guard"));
let UploadConfiguration = class UploadConfiguration {
    constructor(name, parameters) {
        guard_1.default.stringNotNullOrEmpty(name);
        this.name = name;
        this.parameters = parameters;
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("name"),
    __metadata("design:type", String)
], UploadConfiguration.prototype, "name", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("parameters"),
    __metadata("design:type", Object)
], UploadConfiguration.prototype, "parameters", void 0);
UploadConfiguration = __decorate([
    (0, ta_json_1.JsonObject)(),
    __metadata("design:paramtypes", [String, Object])
], UploadConfiguration);
exports.UploadConfiguration = UploadConfiguration;

},{"../../guard":224,"ta-json":424}],318:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadRequestWrapper = void 0;
const ta_json_1 = require("ta-json");
const upload_action_1 = require("./upload-action");
const upload_configuration_1 = require("./upload-configuration");
let UploadRequestWrapper = class UploadRequestWrapper {
};
__decorate([
    (0, ta_json_1.JsonProperty)("file_name"),
    __metadata("design:type", String)
], UploadRequestWrapper.prototype, "fileName", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("file_size"),
    __metadata("design:type", Number)
], UploadRequestWrapper.prototype, "fileSize", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("upload_configuration"),
    (0, ta_json_1.JsonElementType)(upload_configuration_1.UploadConfiguration),
    __metadata("design:type", upload_configuration_1.UploadConfiguration)
], UploadRequestWrapper.prototype, "uploadConfiguration", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("action"),
    (0, ta_json_1.JsonElementType)(upload_action_1.UploadAction),
    __metadata("design:type", upload_action_1.UploadAction)
], UploadRequestWrapper.prototype, "action", void 0);
UploadRequestWrapper = __decorate([
    (0, ta_json_1.JsonObject)()
], UploadRequestWrapper);
exports.UploadRequestWrapper = UploadRequestWrapper;

},{"./upload-action":316,"./upload-configuration":317,"ta-json":424}],319:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadRequest = void 0;
const guard_1 = __importDefault(require("../../guard"));
class UploadRequest {
    constructor(source, configurationName, actionName) {
        guard_1.default.notNull(source);
        guard_1.default.stringNotNullOrEmpty(configurationName);
        guard_1.default.stringNotNullOrEmpty(actionName);
        this.source = source;
        this.configurationName = configurationName;
        this.actionName = actionName;
    }
}
exports.UploadRequest = UploadRequest;

},{"../../guard":224}],320:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserEntityPermissionsResource = exports.EntityPermission = exports.EntityPermissionPolicy = void 0;
const ta_json_1 = require("ta-json");
const link_1 = __importDefault(require("../link"));
const resource_1 = __importDefault(require("./resource"));
let EntityPermissionPolicy = class EntityPermissionPolicy {
    constructor() {
        this.policyRuleIdentifiers = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("is_group_policy"),
    __metadata("design:type", Boolean)
], EntityPermissionPolicy.prototype, "isGroupPolicy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("policy"),
    __metadata("design:type", link_1.default)
], EntityPermissionPolicy.prototype, "policy", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("rule_identifiers"),
    (0, ta_json_1.JsonElementType)(String),
    __metadata("design:type", Array)
], EntityPermissionPolicy.prototype, "policyRuleIdentifiers", void 0);
EntityPermissionPolicy = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityPermissionPolicy);
exports.EntityPermissionPolicy = EntityPermissionPolicy;
let EntityPermission = class EntityPermission {
    constructor() {
        this.policies = [];
    }
};
__decorate([
    (0, ta_json_1.JsonProperty)("permission"),
    __metadata("design:type", String)
], EntityPermission.prototype, "permission", void 0);
__decorate([
    (0, ta_json_1.JsonProperty)("policies"),
    (0, ta_json_1.JsonElementType)(EntityPermissionPolicy),
    __metadata("design:type", Array)
], EntityPermission.prototype, "policies", void 0);
EntityPermission = __decorate([
    (0, ta_json_1.JsonObject)()
], EntityPermission);
exports.EntityPermission = EntityPermission;
let UserEntityPermissionsResource = class UserEntityPermissionsResource extends resource_1.default {
};
__decorate([
    (0, ta_json_1.JsonProperty)("permissions"),
    (0, ta_json_1.JsonElementType)(EntityPermission),
    __metadata("design:type", Array)
], UserEntityPermissionsResource.prototype, "permissions", void 0);
UserEntityPermissionsResource = __decorate([
    (0, ta_json_1.JsonObject)()
], UserEntityPermissionsResource);
exports.UserEntityPermissionsResource = UserEntityPermissionsResource;

},{"../link":228,"./resource":296,"ta-json":424}],321:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Compatibility = void 0;
/**
 * Describes the compatibility types.
 */
var Compatibility;
(function (Compatibility) {
    /**
     * Compatible.
     */
    Compatibility[Compatibility["Ok"] = 0] = "Ok";
    /**
     * SDK is older.
     */
    Compatibility[Compatibility["SdkOld"] = 1] = "SdkOld";
    /**
     * SDK is newer.
     */
    Compatibility[Compatibility["SdkNew"] = 2] = "SdkNew";
})(Compatibility = exports.Compatibility || (exports.Compatibility = {}));

},{}],322:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeGuards = void 0;
class TypeGuards {
    /**
     * A naive type guard to check if we are dealing with a string array.
     *
     * @remarks
     * Only checks if the first element of the array is of type "string".
     *
     * @param obj - An array
     */
    static isStringArray(obj) {
        return obj != null && obj.length > 0 && typeof obj[0] === "string";
    }
    /**
     * A naive type guard to check if we are dealing with a number array.
     *
     * @remarks
     * Only checks if the first element of the array is of type "number".
     *
     * @param obj - An array
     */
    static isNumberArray(obj) {
        return obj != null && obj.length > 0 && typeof obj[0] === "number";
    }
}
exports.TypeGuards = TypeGuards;

},{}],323:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chunk = void 0;
function chunk(array, size) {
    const chunks = [];
    const tmp = [...array];
    if (size <= 0) {
        return chunks;
    }
    while (tmp.length) {
        chunks.push(tmp.splice(0, size));
    }
    return chunks;
}
exports.chunk = chunk;

},{}],324:[function(require,module,exports){
(function (process){(function (){
"use strict";
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-10-12
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lru_cache_1 = tslib_1.__importDefault(require("lru-cache"));
var buildSortedURL_1 = tslib_1.__importDefault(require("./utils/buildSortedURL"));
var isCacheLike_1 = tslib_1.__importDefault(require("./utils/isCacheLike"));
var FIVE_MINUTES = 1000 * 60 * 5;
var CAPACITY = 100;
function cacheAdapterEnhancer(adapter, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var _a = options.enabledByDefault, enabledByDefault = _a === void 0 ? true : _a, _b = options.cacheFlag, cacheFlag = _b === void 0 ? 'cache' : _b, _c = options.defaultCache, defaultCache = _c === void 0 ? new lru_cache_1.default({ ttl: FIVE_MINUTES, max: CAPACITY }) : _c;
    return function (config) {
        var url = config.url, method = config.method, params = config.params, paramsSerializer = config.paramsSerializer, forceUpdate = config.forceUpdate;
        var useCache = (config[cacheFlag] !== void 0 && config[cacheFlag] !== null)
            ? config[cacheFlag]
            : enabledByDefault;
        if (method === 'get' && useCache) {
            // if had provided a specified cache, then use it instead
            var cache_1 = (0, isCacheLike_1.default)(useCache) ? useCache : defaultCache;
            // build the index according to the url and params
            var index_1 = (0, buildSortedURL_1.default)(url, params, paramsSerializer);
            var responsePromise = cache_1.get(index_1);
            if (!responsePromise || forceUpdate) {
                responsePromise = (function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var reason_1;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, adapter(config)];
                            case 1: return [2 /*return*/, _a.sent()];
                            case 2:
                                reason_1 = _a.sent();
                                'delete' in cache_1 ? cache_1.delete(index_1) : cache_1.del(index_1);
                                throw reason_1;
                            case 3: return [2 /*return*/];
                        }
                    });
                }); })();
                // put the promise for the non-transformed response into cache as a placeholder
                cache_1.set(index_1, responsePromise);
                return responsePromise;
            }
            /* istanbul ignore next */
            if (process.env.LOGGER_LEVEL === 'info') {
                // eslint-disable-next-line no-console
                console.info("[axios-extensions] request cached by cache adapter --> url: ".concat(index_1));
            }
            return responsePromise;
        }
        return adapter(config);
    };
}
exports.default = cacheAdapterEnhancer;

}).call(this)}).call(this,require('_process'))
},{"./utils/buildSortedURL":328,"./utils/isCacheLike":329,"_process":9,"lru-cache":370,"tslib":428}],325:[function(require,module,exports){
"use strict";
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-09-28
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryAdapterEnhancer = exports.throttleAdapterEnhancer = exports.cacheAdapterEnhancer = exports.Cache = void 0;
var tslib_1 = require("tslib");
var lru_cache_1 = tslib_1.__importDefault(require("lru-cache"));
exports.Cache = lru_cache_1.default;
var cacheAdapterEnhancer_1 = tslib_1.__importDefault(require("./cacheAdapterEnhancer"));
exports.cacheAdapterEnhancer = cacheAdapterEnhancer_1.default;
var retryAdapterEnhancer_1 = tslib_1.__importDefault(require("./retryAdapterEnhancer"));
exports.retryAdapterEnhancer = retryAdapterEnhancer_1.default;
var throttleAdapterEnhancer_1 = tslib_1.__importDefault(require("./throttleAdapterEnhancer"));
exports.throttleAdapterEnhancer = throttleAdapterEnhancer_1.default;

},{"./cacheAdapterEnhancer":324,"./retryAdapterEnhancer":326,"./throttleAdapterEnhancer":327,"lru-cache":370,"tslib":428}],326:[function(require,module,exports){
(function (process){(function (){
"use strict";
/**
 * @author Kuitos
 * @since 2020-02-18
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
function retryAdapterEnhancer(adapter, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var _a = options.times, times = _a === void 0 ? 2 : _a;
    return function (config) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, retryTimes, timeUp, count, request;
        var _this = this;
        return tslib_1.__generator(this, function (_b) {
            _a = config.retryTimes, retryTimes = _a === void 0 ? times : _a;
            timeUp = false;
            count = 0;
            request = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var e_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, adapter(config)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            e_1 = _a.sent();
                            timeUp = retryTimes === count;
                            if (timeUp) {
                                throw e_1;
                            }
                            count++;
                            /* istanbul ignore next */
                            if (process.env.LOGGER_LEVEL === 'info') {
                                console.info("[axios-extensions] request start retrying --> url: ".concat(config.url, " , time: ").concat(count));
                            }
                            return [2 /*return*/, request()];
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            return [2 /*return*/, request()];
        });
    }); };
}
exports.default = retryAdapterEnhancer;

}).call(this)}).call(this,require('_process'))
},{"_process":9,"tslib":428}],327:[function(require,module,exports){
(function (process){(function (){
"use strict";
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-10-11
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lru_cache_1 = tslib_1.__importDefault(require("lru-cache"));
var buildSortedURL_1 = tslib_1.__importDefault(require("./utils/buildSortedURL"));
function throttleAdapterEnhancer(adapter, options) {
    var _this = this;
    if (options === void 0) { options = {}; }
    var _a = options.threshold, threshold = _a === void 0 ? 1000 : _a, _b = options.cache, cache = _b === void 0 ? new lru_cache_1.default({ max: 10 }) : _b;
    var recordCacheWithRequest = function (index, config) {
        var responsePromise = (function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var response, reason_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, adapter(config)];
                    case 1:
                        response = _a.sent();
                        cache.set(index, {
                            timestamp: Date.now(),
                            value: Promise.resolve(response),
                        });
                        return [2 /*return*/, response];
                    case 2:
                        reason_1 = _a.sent();
                        'delete' in cache ? cache.delete(index) : cache.del(index);
                        throw reason_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); })();
        cache.set(index, {
            timestamp: Date.now(),
            value: responsePromise,
        });
        return responsePromise;
    };
    return function (config) {
        var url = config.url, method = config.method, params = config.params, paramsSerializer = config.paramsSerializer;
        var index = (0, buildSortedURL_1.default)(url, params, paramsSerializer);
        var now = Date.now();
        var cachedRecord = cache.get(index) || { timestamp: now };
        if (method === 'get') {
            if (now - cachedRecord.timestamp <= threshold) {
                var responsePromise = cachedRecord.value;
                if (responsePromise) {
                    /* istanbul ignore next */
                    if (process.env.LOGGER_LEVEL === 'info') {
                        // eslint-disable-next-line no-console
                        console.info("[axios-extensions] request cached by throttle adapter --> url: ".concat(index));
                    }
                    return responsePromise;
                }
            }
            return recordCacheWithRequest(index, config);
        }
        return adapter(config);
    };
}
exports.default = throttleAdapterEnhancer;

}).call(this)}).call(this,require('_process'))
},{"./utils/buildSortedURL":328,"_process":9,"lru-cache":370,"tslib":428}],328:[function(require,module,exports){
"use strict";
/**
 * @author Kuitos
 * @homepage https://github.com/kuitos/
 * @since 2017-10-12
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// @ts-ignore
var buildURL_1 = tslib_1.__importDefault(require("axios/lib/helpers/buildURL"));
function buildSortedURL() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var builtURL = buildURL_1.default.apply(void 0, args);
    var _a = builtURL.split('?'), urlPath = _a[0], queryString = _a[1];
    if (queryString) {
        var paramsPair = queryString.split('&');
        return "".concat(urlPath, "?").concat(paramsPair.sort().join('&'));
    }
    return builtURL;
}
exports.default = buildSortedURL;

},{"axios/lib/helpers/buildURL":348,"tslib":428}],329:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isCacheLike(cache) {
    return typeof cache.get === 'function' && typeof cache.set === 'function' && (typeof cache.delete === 'function' || typeof cache.del === 'function');
}
exports.default = isCacheLike;

},{}],330:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":332}],331:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var cookies = require('./../helpers/cookies');
var buildURL = require('./../helpers/buildURL');
var buildFullPath = require('../core/buildFullPath');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var defaults = require('../defaults');
var Cancel = require('../cancel/Cancel');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || defaults.transitional;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

},{"../cancel/Cancel":333,"../core/buildFullPath":338,"../core/createError":339,"../defaults":345,"./../core/settle":343,"./../helpers/buildURL":348,"./../helpers/cookies":350,"./../helpers/isURLSameOrigin":353,"./../helpers/parseHeaders":355,"./../utils":358}],332:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var mergeConfig = require('./core/mergeConfig');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');
axios.VERSION = require('./env/data').version;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose isAxiosError
axios.isAxiosError = require('./helpers/isAxiosError');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":333,"./cancel/CancelToken":334,"./cancel/isCancel":335,"./core/Axios":336,"./core/mergeConfig":342,"./defaults":345,"./env/data":346,"./helpers/bind":347,"./helpers/isAxiosError":352,"./helpers/spread":356,"./utils":358}],333:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],334:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":333}],335:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],336:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var buildURL = require('../helpers/buildURL');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var mergeConfig = require('./mergeConfig');
var validator = require('../helpers/validator');

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"../helpers/buildURL":348,"../helpers/validator":357,"./../utils":358,"./InterceptorManager":337,"./dispatchRequest":340,"./mergeConfig":342}],337:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":358}],338:[function(require,module,exports){
'use strict';

var isAbsoluteURL = require('../helpers/isAbsoluteURL');
var combineURLs = require('../helpers/combineURLs');

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

},{"../helpers/combineURLs":349,"../helpers/isAbsoluteURL":351}],339:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":341}],340:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');
var Cancel = require('../cancel/Cancel');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/Cancel":333,"../cancel/isCancel":335,"../defaults":345,"./../utils":358,"./transformData":344}],341:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};

},{}],342:[function(require,module,exports){
'use strict';

var utils = require('../utils');

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};

},{"../utils":358}],343:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};

},{"./createError":339}],344:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var defaults = require('./../defaults');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};

},{"./../defaults":345,"./../utils":358}],345:[function(require,module,exports){
(function (process){(function (){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');
var enhanceError = require('./core/enhanceError');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this)}).call(this,require('_process'))
},{"./adapters/http":331,"./adapters/xhr":331,"./core/enhanceError":341,"./helpers/normalizeHeaderName":354,"./utils":358,"_process":9}],346:[function(require,module,exports){
module.exports = {
  "version": "0.24.0"
};
},{}],347:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],348:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":358}],349:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};

},{}],350:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);

},{"./../utils":358}],351:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],352:[function(require,module,exports){
'use strict';

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};

},{}],353:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);

},{"./../utils":358}],354:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":358}],355:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};

},{"./../utils":358}],356:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],357:[function(require,module,exports){
'use strict';

var VERSION = require('../env/data').version;

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};

},{"../env/data":346}],358:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

},{"./helpers/bind":347}],359:[function(require,module,exports){
'use strict';

const callsites = () => {
	const _prepareStackTrace = Error.prepareStackTrace;
	Error.prepareStackTrace = (_, stack) => stack;
	const stack = new Error().stack.slice(1);
	Error.prepareStackTrace = _prepareStackTrace;
	return stack;
};

module.exports = callsites;
// TODO: Remove this for the next major release
module.exports.default = callsites;

},{}],360:[function(require,module,exports){
'use strict';
const isObj = require('is-obj');

const disallowedKeys = new Set([
	'__proto__',
	'prototype',
	'constructor'
]);

const isValidPath = pathSegments => !pathSegments.some(segment => disallowedKeys.has(segment));

function getPathSegments(path) {
	const pathArray = path.split('.');
	const parts = [];

	for (let i = 0; i < pathArray.length; i++) {
		let p = pathArray[i];

		while (p[p.length - 1] === '\\' && pathArray[i + 1] !== undefined) {
			p = p.slice(0, -1) + '.';
			p += pathArray[++i];
		}

		parts.push(p);
	}

	if (!isValidPath(parts)) {
		return [];
	}

	return parts;
}

module.exports = {
	get(object, path, value) {
		if (!isObj(object) || typeof path !== 'string') {
			return value === undefined ? object : value;
		}

		const pathArray = getPathSegments(path);
		if (pathArray.length === 0) {
			return;
		}

		for (let i = 0; i < pathArray.length; i++) {
			object = object[pathArray[i]];

			if (object === undefined || object === null) {
				// `object` is either `undefined` or `null` so we want to stop the loop, and
				// if this is not the last bit of the path, and
				// if it did't return `undefined`
				// it would return `null` if `object` is `null`
				// but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`
				if (i !== pathArray.length - 1) {
					return value;
				}

				break;
			}
		}

		return object === undefined ? value : object;
	},

	set(object, path, value) {
		if (!isObj(object) || typeof path !== 'string') {
			return object;
		}

		const root = object;
		const pathArray = getPathSegments(path);

		for (let i = 0; i < pathArray.length; i++) {
			const p = pathArray[i];

			if (!isObj(object[p])) {
				object[p] = {};
			}

			if (i === pathArray.length - 1) {
				object[p] = value;
			}

			object = object[p];
		}

		return root;
	},

	delete(object, path) {
		if (!isObj(object) || typeof path !== 'string') {
			return false;
		}

		const pathArray = getPathSegments(path);

		for (let i = 0; i < pathArray.length; i++) {
			const p = pathArray[i];

			if (i === pathArray.length - 1) {
				delete object[p];
				return true;
			}

			object = object[p];

			if (!isObj(object)) {
				return false;
			}
		}
	},

	has(object, path) {
		if (!isObj(object) || typeof path !== 'string') {
			return false;
		}

		const pathArray = getPathSegments(path);
		if (pathArray.length === 0) {
			return false;
		}

		// eslint-disable-next-line unicorn/no-for-loop
		for (let i = 0; i < pathArray.length; i++) {
			if (isObj(object)) {
				if (!(pathArray[i] in object)) {
					return false;
				}

				object = object[pathArray[i]];
			} else {
				return false;
			}
		}

		return true;
	}
};

},{"is-obj":368}],361:[function(require,module,exports){
/* eslint-env browser */
module.exports = typeof self == 'object' ? self.FormData : window.FormData;

},{}],362:[function(require,module,exports){
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var legacy_1 = __importDefault(require("./legacy"));
var utils_functions_1 = require("./utils-functions");
var utils_functions_2 = require("./utils-functions");
Object.defineProperty(exports, "getStatusCode", { enumerable: true, get: function () { return utils_functions_2.getStatusCode; } });
Object.defineProperty(exports, "getReasonPhrase", { enumerable: true, get: function () { return utils_functions_2.getReasonPhrase; } });
Object.defineProperty(exports, "getStatusText", { enumerable: true, get: function () { return utils_functions_2.getStatusText; } });
var status_codes_1 = require("./status-codes");
Object.defineProperty(exports, "StatusCodes", { enumerable: true, get: function () { return status_codes_1.StatusCodes; } });
var reason_phrases_1 = require("./reason-phrases");
Object.defineProperty(exports, "ReasonPhrases", { enumerable: true, get: function () { return reason_phrases_1.ReasonPhrases; } });
__exportStar(require("./legacy"), exports);
exports.default = __assign(__assign({}, legacy_1.default), { getStatusCode: utils_functions_1.getStatusCode,
    getStatusText: utils_functions_1.getStatusText });

},{"./legacy":363,"./reason-phrases":364,"./status-codes":365,"./utils-functions":366}],363:[function(require,module,exports){
"use strict";
// Exporting constants directly to maintain compatability with v1
// These are deprecated. Please don't add any new codes here.
Object.defineProperty(exports, "__esModule", { value: true });
exports.USE_PROXY = exports.UNSUPPORTED_MEDIA_TYPE = exports.UNPROCESSABLE_ENTITY = exports.UNAUTHORIZED = exports.TOO_MANY_REQUESTS = exports.TEMPORARY_REDIRECT = exports.SWITCHING_PROTOCOLS = exports.SERVICE_UNAVAILABLE = exports.SEE_OTHER = exports.RESET_CONTENT = exports.REQUESTED_RANGE_NOT_SATISFIABLE = exports.REQUEST_URI_TOO_LONG = exports.REQUEST_TOO_LONG = exports.REQUEST_TIMEOUT = exports.REQUEST_HEADER_FIELDS_TOO_LARGE = exports.PROXY_AUTHENTICATION_REQUIRED = exports.PROCESSING = exports.PRECONDITION_REQUIRED = exports.PRECONDITION_FAILED = exports.PERMANENT_REDIRECT = exports.PAYMENT_REQUIRED = exports.PARTIAL_CONTENT = exports.OK = exports.NOT_MODIFIED = exports.NOT_IMPLEMENTED = exports.NOT_FOUND = exports.NOT_ACCEPTABLE = exports.NON_AUTHORITATIVE_INFORMATION = exports.NO_CONTENT = exports.NETWORK_AUTHENTICATION_REQUIRED = exports.MULTIPLE_CHOICES = exports.MULTI_STATUS = exports.MOVED_TEMPORARILY = exports.MOVED_PERMANENTLY = exports.METHOD_NOT_ALLOWED = exports.METHOD_FAILURE = exports.LOCKED = exports.LENGTH_REQUIRED = exports.INTERNAL_SERVER_ERROR = exports.INSUFFICIENT_STORAGE = exports.INSUFFICIENT_SPACE_ON_RESOURCE = exports.IM_A_TEAPOT = exports.HTTP_VERSION_NOT_SUPPORTED = exports.GONE = exports.GATEWAY_TIMEOUT = exports.FORBIDDEN = exports.FAILED_DEPENDENCY = exports.EXPECTATION_FAILED = exports.CREATED = exports.CONTINUE = exports.CONFLICT = exports.BAD_REQUEST = exports.BAD_GATEWAY = exports.ACCEPTED = void 0;
/**
 * @deprecated Please use StatusCodes.ACCEPTED
 *
 * */
exports.ACCEPTED = 202;
/**
 * @deprecated Please use StatusCodes.BAD_GATEWAY
 *
 * */
exports.BAD_GATEWAY = 502;
/**
 * @deprecated Please use StatusCodes.BAD_REQUEST
 *
 * */
exports.BAD_REQUEST = 400;
/**
 * @deprecated Please use StatusCodes.CONFLICT
 *
 * */
exports.CONFLICT = 409;
/**
 * @deprecated Please use StatusCodes.CONTINUE
 *
 * */
exports.CONTINUE = 100;
/**
 * @deprecated Please use StatusCodes.CREATED
 *
 * */
exports.CREATED = 201;
/**
 * @deprecated Please use StatusCodes.EXPECTATION_FAILED
 *
 * */
exports.EXPECTATION_FAILED = 417;
/**
 * @deprecated Please use StatusCodes.FAILED_DEPENDENCY
 *
 * */
exports.FAILED_DEPENDENCY = 424;
/**
 * @deprecated Please use StatusCodes.FORBIDDEN
 *
 * */
exports.FORBIDDEN = 403;
/**
 * @deprecated Please use StatusCodes.GATEWAY_TIMEOUT
 *
 * */
exports.GATEWAY_TIMEOUT = 504;
/**
 * @deprecated Please use StatusCodes.GONE
 *
 * */
exports.GONE = 410;
/**
 * @deprecated Please use StatusCodes.HTTP_VERSION_NOT_SUPPORTED
 *
 * */
exports.HTTP_VERSION_NOT_SUPPORTED = 505;
/**
 * @deprecated Please use StatusCodes.IM_A_TEAPOT
 *
 * */
exports.IM_A_TEAPOT = 418;
/**
 * @deprecated Please use StatusCodes.INSUFFICIENT_SPACE_ON_RESOURCE
 *
 * */
exports.INSUFFICIENT_SPACE_ON_RESOURCE = 419;
/**
 * @deprecated Please use StatusCodes.INSUFFICIENT_STORAGE
 *
 * */
exports.INSUFFICIENT_STORAGE = 507;
/**
 * @deprecated Please use StatusCodes.INTERNAL_SERVER_ERROR
 *
 * */
exports.INTERNAL_SERVER_ERROR = 500;
/**
 * @deprecated Please use StatusCodes.LENGTH_REQUIRED
 *
 * */
exports.LENGTH_REQUIRED = 411;
/**
 * @deprecated Please use StatusCodes.LOCKED
 *
 * */
exports.LOCKED = 423;
/**
 * @deprecated Please use StatusCodes.METHOD_FAILURE
 *
 * */
exports.METHOD_FAILURE = 420;
/**
 * @deprecated Please use StatusCodes.METHOD_NOT_ALLOWED
 *
 * */
exports.METHOD_NOT_ALLOWED = 405;
/**
 * @deprecated Please use StatusCodes.MOVED_PERMANENTLY
 *
 * */
exports.MOVED_PERMANENTLY = 301;
/**
 * @deprecated Please use StatusCodes.MOVED_TEMPORARILY
 *
 * */
exports.MOVED_TEMPORARILY = 302;
/**
 * @deprecated Please use StatusCodes.MULTI_STATUS
 *
 * */
exports.MULTI_STATUS = 207;
/**
 * @deprecated Please use StatusCodes.MULTIPLE_CHOICES
 *
 * */
exports.MULTIPLE_CHOICES = 300;
/**
 * @deprecated Please use StatusCodes.NETWORK_AUTHENTICATION_REQUIRED
 *
 * */
exports.NETWORK_AUTHENTICATION_REQUIRED = 511;
/**
 * @deprecated Please use StatusCodes.NO_CONTENT
 *
 * */
exports.NO_CONTENT = 204;
/**
 * @deprecated Please use StatusCodes.NON_AUTHORITATIVE_INFORMATION
 *
 * */
exports.NON_AUTHORITATIVE_INFORMATION = 203;
/**
 * @deprecated Please use StatusCodes.NOT_ACCEPTABLE
 *
 * */
exports.NOT_ACCEPTABLE = 406;
/**
 * @deprecated Please use StatusCodes.NOT_FOUND
 *
 * */
exports.NOT_FOUND = 404;
/**
 * @deprecated Please use StatusCodes.NOT_IMPLEMENTED
 *
 * */
exports.NOT_IMPLEMENTED = 501;
/**
 * @deprecated Please use StatusCodes.NOT_MODIFIED
 *
 * */
exports.NOT_MODIFIED = 304;
/**
 * @deprecated Please use StatusCodes.OK
 *
 * */
exports.OK = 200;
/**
 * @deprecated Please use StatusCodes.PARTIAL_CONTENT
 *
 * */
exports.PARTIAL_CONTENT = 206;
/**
 * @deprecated Please use StatusCodes.PAYMENT_REQUIRED
 *
 * */
exports.PAYMENT_REQUIRED = 402;
/**
 * @deprecated Please use StatusCodes.PERMANENT_REDIRECT
 *
 * */
exports.PERMANENT_REDIRECT = 308;
/**
 * @deprecated Please use StatusCodes.PRECONDITION_FAILED
 *
 * */
exports.PRECONDITION_FAILED = 412;
/**
 * @deprecated Please use StatusCodes.PRECONDITION_REQUIRED
 *
 * */
exports.PRECONDITION_REQUIRED = 428;
/**
 * @deprecated Please use StatusCodes.PROCESSING
 *
 * */
exports.PROCESSING = 102;
/**
 * @deprecated Please use StatusCodes.PROXY_AUTHENTICATION_REQUIRED
 *
 * */
exports.PROXY_AUTHENTICATION_REQUIRED = 407;
/**
 * @deprecated Please use StatusCodes.REQUEST_HEADER_FIELDS_TOO_LARGE
 *
 * */
exports.REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
/**
 * @deprecated Please use StatusCodes.REQUEST_TIMEOUT
 *
 * */
exports.REQUEST_TIMEOUT = 408;
/**
 * @deprecated Please use StatusCodes.REQUEST_TOO_LONG
 *
 * */
exports.REQUEST_TOO_LONG = 413;
/**
 * @deprecated Please use StatusCodes.REQUEST_URI_TOO_LONG
 *
 * */
exports.REQUEST_URI_TOO_LONG = 414;
/**
 * @deprecated Please use StatusCodes.REQUESTED_RANGE_NOT_SATISFIABLE
 *
 * */
exports.REQUESTED_RANGE_NOT_SATISFIABLE = 416;
/**
 * @deprecated Please use StatusCodes.RESET_CONTENT
 *
 * */
exports.RESET_CONTENT = 205;
/**
 * @deprecated Please use StatusCodes.SEE_OTHER
 *
 * */
exports.SEE_OTHER = 303;
/**
 * @deprecated Please use StatusCodes.SERVICE_UNAVAILABLE
 *
 * */
exports.SERVICE_UNAVAILABLE = 503;
/**
 * @deprecated Please use StatusCodes.SWITCHING_PROTOCOLS
 *
 * */
exports.SWITCHING_PROTOCOLS = 101;
/**
 * @deprecated Please use StatusCodes.TEMPORARY_REDIRECT
 *
 * */
exports.TEMPORARY_REDIRECT = 307;
/**
 * @deprecated Please use StatusCodes.TOO_MANY_REQUESTS
 *
 * */
exports.TOO_MANY_REQUESTS = 429;
/**
 * @deprecated Please use StatusCodes.UNAUTHORIZED
 *
 * */
exports.UNAUTHORIZED = 401;
/**
 * @deprecated Please use StatusCodes.UNPROCESSABLE_ENTITY
 *
 * */
exports.UNPROCESSABLE_ENTITY = 422;
/**
 * @deprecated Please use StatusCodes.UNSUPPORTED_MEDIA_TYPE
 *
 * */
exports.UNSUPPORTED_MEDIA_TYPE = 415;
/**
 * @deprecated Please use StatusCodes.USE_PROXY
 *
 * */
exports.USE_PROXY = 305;
exports.default = {
    ACCEPTED: exports.ACCEPTED,
    BAD_GATEWAY: exports.BAD_GATEWAY,
    BAD_REQUEST: exports.BAD_REQUEST,
    CONFLICT: exports.CONFLICT,
    CONTINUE: exports.CONTINUE,
    CREATED: exports.CREATED,
    EXPECTATION_FAILED: exports.EXPECTATION_FAILED,
    FORBIDDEN: exports.FORBIDDEN,
    GATEWAY_TIMEOUT: exports.GATEWAY_TIMEOUT,
    GONE: exports.GONE,
    HTTP_VERSION_NOT_SUPPORTED: exports.HTTP_VERSION_NOT_SUPPORTED,
    IM_A_TEAPOT: exports.IM_A_TEAPOT,
    INSUFFICIENT_SPACE_ON_RESOURCE: exports.INSUFFICIENT_SPACE_ON_RESOURCE,
    INSUFFICIENT_STORAGE: exports.INSUFFICIENT_STORAGE,
    INTERNAL_SERVER_ERROR: exports.INTERNAL_SERVER_ERROR,
    LENGTH_REQUIRED: exports.LENGTH_REQUIRED,
    LOCKED: exports.LOCKED,
    METHOD_FAILURE: exports.METHOD_FAILURE,
    METHOD_NOT_ALLOWED: exports.METHOD_NOT_ALLOWED,
    MOVED_PERMANENTLY: exports.MOVED_PERMANENTLY,
    MOVED_TEMPORARILY: exports.MOVED_TEMPORARILY,
    MULTI_STATUS: exports.MULTI_STATUS,
    MULTIPLE_CHOICES: exports.MULTIPLE_CHOICES,
    NETWORK_AUTHENTICATION_REQUIRED: exports.NETWORK_AUTHENTICATION_REQUIRED,
    NO_CONTENT: exports.NO_CONTENT,
    NON_AUTHORITATIVE_INFORMATION: exports.NON_AUTHORITATIVE_INFORMATION,
    NOT_ACCEPTABLE: exports.NOT_ACCEPTABLE,
    NOT_FOUND: exports.NOT_FOUND,
    NOT_IMPLEMENTED: exports.NOT_IMPLEMENTED,
    NOT_MODIFIED: exports.NOT_MODIFIED,
    OK: exports.OK,
    PARTIAL_CONTENT: exports.PARTIAL_CONTENT,
    PAYMENT_REQUIRED: exports.PAYMENT_REQUIRED,
    PERMANENT_REDIRECT: exports.PERMANENT_REDIRECT,
    PRECONDITION_FAILED: exports.PRECONDITION_FAILED,
    PRECONDITION_REQUIRED: exports.PRECONDITION_REQUIRED,
    PROCESSING: exports.PROCESSING,
    PROXY_AUTHENTICATION_REQUIRED: exports.PROXY_AUTHENTICATION_REQUIRED,
    REQUEST_HEADER_FIELDS_TOO_LARGE: exports.REQUEST_HEADER_FIELDS_TOO_LARGE,
    REQUEST_TIMEOUT: exports.REQUEST_TIMEOUT,
    REQUEST_TOO_LONG: exports.REQUEST_TOO_LONG,
    REQUEST_URI_TOO_LONG: exports.REQUEST_URI_TOO_LONG,
    REQUESTED_RANGE_NOT_SATISFIABLE: exports.REQUESTED_RANGE_NOT_SATISFIABLE,
    RESET_CONTENT: exports.RESET_CONTENT,
    SEE_OTHER: exports.SEE_OTHER,
    SERVICE_UNAVAILABLE: exports.SERVICE_UNAVAILABLE,
    SWITCHING_PROTOCOLS: exports.SWITCHING_PROTOCOLS,
    TEMPORARY_REDIRECT: exports.TEMPORARY_REDIRECT,
    TOO_MANY_REQUESTS: exports.TOO_MANY_REQUESTS,
    UNAUTHORIZED: exports.UNAUTHORIZED,
    UNPROCESSABLE_ENTITY: exports.UNPROCESSABLE_ENTITY,
    UNSUPPORTED_MEDIA_TYPE: exports.UNSUPPORTED_MEDIA_TYPE,
    USE_PROXY: exports.USE_PROXY,
};

},{}],364:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReasonPhrases = void 0;
// Generated file. Do not edit
var ReasonPhrases;
(function (ReasonPhrases) {
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.3
     *
     * The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.
     */
    ReasonPhrases["ACCEPTED"] = "Accepted";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.3
     *
     * This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.
     */
    ReasonPhrases["BAD_GATEWAY"] = "Bad Gateway";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.1
     *
     * This response means that server could not understand the request due to invalid syntax.
     */
    ReasonPhrases["BAD_REQUEST"] = "Bad Request";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.8
     *
     * This response is sent when a request conflicts with the current state of the server.
     */
    ReasonPhrases["CONFLICT"] = "Conflict";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.1
     *
     * This interim response indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished.
     */
    ReasonPhrases["CONTINUE"] = "Continue";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.2
     *
     * The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.
     */
    ReasonPhrases["CREATED"] = "Created";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.14
     *
     * This response code means the expectation indicated by the Expect request header field can't be met by the server.
     */
    ReasonPhrases["EXPECTATION_FAILED"] = "Expectation Failed";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.5
     *
     * The request failed due to failure of a previous request.
     */
    ReasonPhrases["FAILED_DEPENDENCY"] = "Failed Dependency";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.3
     *
     * The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server.
     */
    ReasonPhrases["FORBIDDEN"] = "Forbidden";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.5
     *
     * This error response is given when the server is acting as a gateway and cannot get a response in time.
     */
    ReasonPhrases["GATEWAY_TIMEOUT"] = "Gateway Timeout";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.9
     *
     * This response would be sent when the requested content has been permenantly deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for "limited-time, promotional services". APIs should not feel compelled to indicate resources that have been deleted with this status code.
     */
    ReasonPhrases["GONE"] = "Gone";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.6
     *
     * The HTTP version used in the request is not supported by the server.
     */
    ReasonPhrases["HTTP_VERSION_NOT_SUPPORTED"] = "HTTP Version Not Supported";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2324#section-2.3.2
     *
     * Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.
     */
    ReasonPhrases["IM_A_TEAPOT"] = "I'm a teapot";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request which received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.
     */
    ReasonPhrases["INSUFFICIENT_SPACE_ON_RESOURCE"] = "Insufficient Space on Resource";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.
     */
    ReasonPhrases["INSUFFICIENT_STORAGE"] = "Insufficient Storage";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.1
     *
     * The server encountered an unexpected condition that prevented it from fulfilling the request.
     */
    ReasonPhrases["INTERNAL_SERVER_ERROR"] = "Internal Server Error";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.10
     *
     * The server rejected the request because the Content-Length header field is not defined and the server requires it.
     */
    ReasonPhrases["LENGTH_REQUIRED"] = "Length Required";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.4
     *
     * The resource that is being accessed is locked.
     */
    ReasonPhrases["LOCKED"] = "Locked";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt
     *
     * A deprecated response used by the Spring Framework when a method has failed.
     */
    ReasonPhrases["METHOD_FAILURE"] = "Method Failure";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.5
     *
     * The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.
     */
    ReasonPhrases["METHOD_NOT_ALLOWED"] = "Method Not Allowed";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.2
     *
     * This response code means that URI of requested resource has been changed. Probably, new URI would be given in the response.
     */
    ReasonPhrases["MOVED_PERMANENTLY"] = "Moved Permanently";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.3
     *
     * This response code means that URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.
     */
    ReasonPhrases["MOVED_TEMPORARILY"] = "Moved Temporarily";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.2
     *
     * A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.
     */
    ReasonPhrases["MULTI_STATUS"] = "Multi-Status";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.1
     *
     * The request has more than one possible responses. User-agent or user should choose one of them. There is no standardized way to choose one of the responses.
     */
    ReasonPhrases["MULTIPLE_CHOICES"] = "Multiple Choices";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-6
     *
     * The 511 status code indicates that the client needs to authenticate to gain network access.
     */
    ReasonPhrases["NETWORK_AUTHENTICATION_REQUIRED"] = "Network Authentication Required";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.5
     *
     * There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
     */
    ReasonPhrases["NO_CONTENT"] = "No Content";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.4
     *
     * This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.
     */
    ReasonPhrases["NON_AUTHORITATIVE_INFORMATION"] = "Non Authoritative Information";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.6
     *
     * This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content following the criteria given by the user agent.
     */
    ReasonPhrases["NOT_ACCEPTABLE"] = "Not Acceptable";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.4
     *
     * The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
     */
    ReasonPhrases["NOT_FOUND"] = "Not Found";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.2
     *
     * The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.
     */
    ReasonPhrases["NOT_IMPLEMENTED"] = "Not Implemented";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.1
     *
     * This is used for caching purposes. It is telling to client that response has not been modified. So, client can continue to use same cached version of response.
     */
    ReasonPhrases["NOT_MODIFIED"] = "Not Modified";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.1
     *
     * The request has succeeded. The meaning of a success varies depending on the HTTP method:
     * GET: The resource has been fetched and is transmitted in the message body.
     * HEAD: The entity headers are in the message body.
     * POST: The resource describing the result of the action is transmitted in the message body.
     * TRACE: The message body contains the request message as received by the server
     */
    ReasonPhrases["OK"] = "OK";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.1
     *
     * This response code is used because of range header sent by the client to separate download into multiple streams.
     */
    ReasonPhrases["PARTIAL_CONTENT"] = "Partial Content";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.2
     *
     * This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems however this is not used currently.
     */
    ReasonPhrases["PAYMENT_REQUIRED"] = "Payment Required";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7538#section-3
     *
     * This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    ReasonPhrases["PERMANENT_REDIRECT"] = "Permanent Redirect";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.2
     *
     * The client has indicated preconditions in its headers which the server does not meet.
     */
    ReasonPhrases["PRECONDITION_FAILED"] = "Precondition Failed";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-3
     *
     * The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.
     */
    ReasonPhrases["PRECONDITION_REQUIRED"] = "Precondition Required";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.1
     *
     * This code indicates that the server has received and is processing the request, but no response is available yet.
     */
    ReasonPhrases["PROCESSING"] = "Processing";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.2
     *
     * This is similar to 401 but authentication is needed to be done by a proxy.
     */
    ReasonPhrases["PROXY_AUTHENTICATION_REQUIRED"] = "Proxy Authentication Required";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-5
     *
     * The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.
     */
    ReasonPhrases["REQUEST_HEADER_FIELDS_TOO_LARGE"] = "Request Header Fields Too Large";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.7
     *
     * This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.
     */
    ReasonPhrases["REQUEST_TIMEOUT"] = "Request Timeout";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.11
     *
     * Request entity is larger than limits defined by server; the server might close the connection or return an Retry-After header field.
     */
    ReasonPhrases["REQUEST_TOO_LONG"] = "Request Entity Too Large";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.12
     *
     * The URI requested by the client is longer than the server is willing to interpret.
     */
    ReasonPhrases["REQUEST_URI_TOO_LONG"] = "Request-URI Too Long";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.4
     *
     * The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data.
     */
    ReasonPhrases["REQUESTED_RANGE_NOT_SATISFIABLE"] = "Requested Range Not Satisfiable";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.6
     *
     * This response code is sent after accomplishing request to tell user agent reset document view which sent this request.
     */
    ReasonPhrases["RESET_CONTENT"] = "Reset Content";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.4
     *
     * Server sent this response to directing client to get requested resource to another URI with an GET request.
     */
    ReasonPhrases["SEE_OTHER"] = "See Other";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.4
     *
     * The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.
     */
    ReasonPhrases["SERVICE_UNAVAILABLE"] = "Service Unavailable";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.2
     *
     * This code is sent in response to an Upgrade request header by the client, and indicates the protocol the server is switching too.
     */
    ReasonPhrases["SWITCHING_PROTOCOLS"] = "Switching Protocols";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.7
     *
     * Server sent this response to directing client to get requested resource to another URI with same method that used prior request. This has the same semantic than the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    ReasonPhrases["TEMPORARY_REDIRECT"] = "Temporary Redirect";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-4
     *
     * The user has sent too many requests in a given amount of time ("rate limiting").
     */
    ReasonPhrases["TOO_MANY_REQUESTS"] = "Too Many Requests";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.1
     *
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    ReasonPhrases["UNAUTHORIZED"] = "Unauthorized";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7725
     *
     * The user-agent requested a resource that cannot legally be provided, such as a web page censored by a government.
     */
    ReasonPhrases["UNAVAILABLE_FOR_LEGAL_REASONS"] = "Unavailable For Legal Reasons";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.3
     *
     * The request was well-formed but was unable to be followed due to semantic errors.
     */
    ReasonPhrases["UNPROCESSABLE_ENTITY"] = "Unprocessable Entity";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.13
     *
     * The media format of the requested data is not supported by the server, so the server is rejecting the request.
     */
    ReasonPhrases["UNSUPPORTED_MEDIA_TYPE"] = "Unsupported Media Type";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.6
     *
     * Was defined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy.
     */
    ReasonPhrases["USE_PROXY"] = "Use Proxy";
    /**
     * Official Documentation @ https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.2
     *
     * Defined in the specification of HTTP/2 to indicate that a server is not able to produce a response for the combination of scheme and authority that are included in the request URI.
     */
    ReasonPhrases["MISDIRECTED_REQUEST"] = "Misdirected Request";
})(ReasonPhrases = exports.ReasonPhrases || (exports.ReasonPhrases = {}));

},{}],365:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusCodes = void 0;
// Generated file. Do not edit
var StatusCodes;
(function (StatusCodes) {
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.3
     *
     * The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing.
     */
    StatusCodes[StatusCodes["ACCEPTED"] = 202] = "ACCEPTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.3
     *
     * This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response.
     */
    StatusCodes[StatusCodes["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.1
     *
     * This response means that server could not understand the request due to invalid syntax.
     */
    StatusCodes[StatusCodes["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.8
     *
     * This response is sent when a request conflicts with the current state of the server.
     */
    StatusCodes[StatusCodes["CONFLICT"] = 409] = "CONFLICT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.1
     *
     * This interim response indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished.
     */
    StatusCodes[StatusCodes["CONTINUE"] = 100] = "CONTINUE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.2
     *
     * The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request.
     */
    StatusCodes[StatusCodes["CREATED"] = 201] = "CREATED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.14
     *
     * This response code means the expectation indicated by the Expect request header field can't be met by the server.
     */
    StatusCodes[StatusCodes["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.5
     *
     * The request failed due to failure of a previous request.
     */
    StatusCodes[StatusCodes["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.3
     *
     * The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server.
     */
    StatusCodes[StatusCodes["FORBIDDEN"] = 403] = "FORBIDDEN";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.5
     *
     * This error response is given when the server is acting as a gateway and cannot get a response in time.
     */
    StatusCodes[StatusCodes["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.9
     *
     * This response would be sent when the requested content has been permenantly deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for "limited-time, promotional services". APIs should not feel compelled to indicate resources that have been deleted with this status code.
     */
    StatusCodes[StatusCodes["GONE"] = 410] = "GONE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.6
     *
     * The HTTP version used in the request is not supported by the server.
     */
    StatusCodes[StatusCodes["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2324#section-2.3.2
     *
     * Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout.
     */
    StatusCodes[StatusCodes["IM_A_TEAPOT"] = 418] = "IM_A_TEAPOT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request which received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.
     */
    StatusCodes[StatusCodes["INSUFFICIENT_SPACE_ON_RESOURCE"] = 419] = "INSUFFICIENT_SPACE_ON_RESOURCE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.6
     *
     * The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process.
     */
    StatusCodes[StatusCodes["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.1
     *
     * The server encountered an unexpected condition that prevented it from fulfilling the request.
     */
    StatusCodes[StatusCodes["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.10
     *
     * The server rejected the request because the Content-Length header field is not defined and the server requires it.
     */
    StatusCodes[StatusCodes["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.4
     *
     * The resource that is being accessed is locked.
     */
    StatusCodes[StatusCodes["LOCKED"] = 423] = "LOCKED";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt
     *
     * A deprecated response used by the Spring Framework when a method has failed.
     */
    StatusCodes[StatusCodes["METHOD_FAILURE"] = 420] = "METHOD_FAILURE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.5
     *
     * The request method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code.
     */
    StatusCodes[StatusCodes["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.2
     *
     * This response code means that URI of requested resource has been changed. Probably, new URI would be given in the response.
     */
    StatusCodes[StatusCodes["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.3
     *
     * This response code means that URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests.
     */
    StatusCodes[StatusCodes["MOVED_TEMPORARILY"] = 302] = "MOVED_TEMPORARILY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.2
     *
     * A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate.
     */
    StatusCodes[StatusCodes["MULTI_STATUS"] = 207] = "MULTI_STATUS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.1
     *
     * The request has more than one possible responses. User-agent or user should choose one of them. There is no standardized way to choose one of the responses.
     */
    StatusCodes[StatusCodes["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-6
     *
     * The 511 status code indicates that the client needs to authenticate to gain network access.
     */
    StatusCodes[StatusCodes["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.5
     *
     * There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones.
     */
    StatusCodes[StatusCodes["NO_CONTENT"] = 204] = "NO_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.4
     *
     * This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response.
     */
    StatusCodes[StatusCodes["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.6
     *
     * This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content following the criteria given by the user agent.
     */
    StatusCodes[StatusCodes["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.4
     *
     * The server can not find requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of 403 to hide the existence of a resource from an unauthorized client. This response code is probably the most famous one due to its frequent occurence on the web.
     */
    StatusCodes[StatusCodes["NOT_FOUND"] = 404] = "NOT_FOUND";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.2
     *
     * The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are GET and HEAD.
     */
    StatusCodes[StatusCodes["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.1
     *
     * This is used for caching purposes. It is telling to client that response has not been modified. So, client can continue to use same cached version of response.
     */
    StatusCodes[StatusCodes["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.1
     *
     * The request has succeeded. The meaning of a success varies depending on the HTTP method:
     * GET: The resource has been fetched and is transmitted in the message body.
     * HEAD: The entity headers are in the message body.
     * POST: The resource describing the result of the action is transmitted in the message body.
     * TRACE: The message body contains the request message as received by the server
     */
    StatusCodes[StatusCodes["OK"] = 200] = "OK";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.1
     *
     * This response code is used because of range header sent by the client to separate download into multiple streams.
     */
    StatusCodes[StatusCodes["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.2
     *
     * This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems however this is not used currently.
     */
    StatusCodes[StatusCodes["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7538#section-3
     *
     * This means that the resource is now permanently located at another URI, specified by the Location: HTTP Response header. This has the same semantics as the 301 Moved Permanently HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    StatusCodes[StatusCodes["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7232#section-4.2
     *
     * The client has indicated preconditions in its headers which the server does not meet.
     */
    StatusCodes[StatusCodes["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-3
     *
     * The origin server requires the request to be conditional. Intended to prevent the 'lost update' problem, where a client GETs a resource's state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict.
     */
    StatusCodes[StatusCodes["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.1
     *
     * This code indicates that the server has received and is processing the request, but no response is available yet.
     */
    StatusCodes[StatusCodes["PROCESSING"] = 102] = "PROCESSING";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.2
     *
     * This is similar to 401 but authentication is needed to be done by a proxy.
     */
    StatusCodes[StatusCodes["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-5
     *
     * The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.
     */
    StatusCodes[StatusCodes["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.7
     *
     * This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers, like Chrome, Firefox 27+, or IE9, use HTTP pre-connection mechanisms to speed up surfing. Also note that some servers merely shut down the connection without sending this message.
     */
    StatusCodes[StatusCodes["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.11
     *
     * Request entity is larger than limits defined by server; the server might close the connection or return an Retry-After header field.
     */
    StatusCodes[StatusCodes["REQUEST_TOO_LONG"] = 413] = "REQUEST_TOO_LONG";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.12
     *
     * The URI requested by the client is longer than the server is willing to interpret.
     */
    StatusCodes[StatusCodes["REQUEST_URI_TOO_LONG"] = 414] = "REQUEST_URI_TOO_LONG";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7233#section-4.4
     *
     * The range specified by the Range header field in the request can't be fulfilled; it's possible that the range is outside the size of the target URI's data.
     */
    StatusCodes[StatusCodes["REQUESTED_RANGE_NOT_SATISFIABLE"] = 416] = "REQUESTED_RANGE_NOT_SATISFIABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.3.6
     *
     * This response code is sent after accomplishing request to tell user agent reset document view which sent this request.
     */
    StatusCodes[StatusCodes["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.4
     *
     * Server sent this response to directing client to get requested resource to another URI with an GET request.
     */
    StatusCodes[StatusCodes["SEE_OTHER"] = 303] = "SEE_OTHER";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.6.4
     *
     * The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This responses should be used for temporary conditions and the Retry-After: HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached.
     */
    StatusCodes[StatusCodes["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.2.2
     *
     * This code is sent in response to an Upgrade request header by the client, and indicates the protocol the server is switching too.
     */
    StatusCodes[StatusCodes["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.7
     *
     * Server sent this response to directing client to get requested resource to another URI with same method that used prior request. This has the same semantic than the 302 Found HTTP response code, with the exception that the user agent must not change the HTTP method used: if a POST was used in the first request, a POST must be used in the second request.
     */
    StatusCodes[StatusCodes["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc6585#section-4
     *
     * The user has sent too many requests in a given amount of time ("rate limiting").
     */
    StatusCodes[StatusCodes["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7235#section-3.1
     *
     * Although the HTTP standard specifies "unauthorized", semantically this response means "unauthenticated". That is, the client must authenticate itself to get the requested response.
     */
    StatusCodes[StatusCodes["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7725
     *
     * The user-agent requested a resource that cannot legally be provided, such as a web page censored by a government.
     */
    StatusCodes[StatusCodes["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc2518#section-10.3
     *
     * The request was well-formed but was unable to be followed due to semantic errors.
     */
    StatusCodes[StatusCodes["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    /**
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.5.13
     *
     * The media format of the requested data is not supported by the server, so the server is rejecting the request.
     */
    StatusCodes[StatusCodes["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    /**
     * @deprecated
     * Official Documentation @ https://tools.ietf.org/html/rfc7231#section-6.4.6
     *
     * Was defined in a previous version of the HTTP specification to indicate that a requested response must be accessed by a proxy. It has been deprecated due to security concerns regarding in-band configuration of a proxy.
     */
    StatusCodes[StatusCodes["USE_PROXY"] = 305] = "USE_PROXY";
    /**
     * Official Documentation @ https://datatracker.ietf.org/doc/html/rfc7540#section-9.1.2
     *
     * Defined in the specification of HTTP/2 to indicate that a server is not able to produce a response for the combination of scheme and authority that are included in the request URI.
     */
    StatusCodes[StatusCodes["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
})(StatusCodes = exports.StatusCodes || (exports.StatusCodes = {}));

},{}],366:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatusText = exports.getStatusCode = exports.getReasonPhrase = void 0;
var utils_1 = require("./utils");
/**
 * Returns the reason phrase for the given status code.
 * If the given status code does not exist, an error is thrown.
 *
 * @param {number|string} statusCode The HTTP status code
 * @returns {string} The associated reason phrase (e.g. "Bad Request", "OK")
 * */
function getReasonPhrase(statusCode) {
    var result = utils_1.statusCodeToReasonPhrase[statusCode.toString()];
    if (!result) {
        throw new Error("Status code does not exist: " + statusCode);
    }
    return result;
}
exports.getReasonPhrase = getReasonPhrase;
/**
 * Returns the status code for the given reason phrase.
 * If the given reason phrase does not exist, undefined is returned.
 *
 * @param {string} reasonPhrase The HTTP reason phrase (e.g. "Bad Request", "OK")
 * @returns {string} The associated status code
 * */
function getStatusCode(reasonPhrase) {
    var result = utils_1.reasonPhraseToStatusCode[reasonPhrase];
    if (!result) {
        throw new Error("Reason phrase does not exist: " + reasonPhrase);
    }
    return result;
}
exports.getStatusCode = getStatusCode;
/**
 * @deprecated
 *
 * Returns the reason phrase for the given status code.
 * If the given status code does not exist, undefined is returned.
 *
 * Deprecated in favor of getReasonPhrase
 *
 * @param {number|string} statusCode The HTTP status code
 * @returns {string|undefined} The associated reason phrase (e.g. "Bad Request", "OK")
 * */
exports.getStatusText = getReasonPhrase;

},{"./utils":367}],367:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reasonPhraseToStatusCode = exports.statusCodeToReasonPhrase = void 0;
// Generated file. Do not edit
exports.statusCodeToReasonPhrase = {
    "202": "Accepted",
    "502": "Bad Gateway",
    "400": "Bad Request",
    "409": "Conflict",
    "100": "Continue",
    "201": "Created",
    "417": "Expectation Failed",
    "424": "Failed Dependency",
    "403": "Forbidden",
    "504": "Gateway Timeout",
    "410": "Gone",
    "505": "HTTP Version Not Supported",
    "418": "I'm a teapot",
    "419": "Insufficient Space on Resource",
    "507": "Insufficient Storage",
    "500": "Internal Server Error",
    "411": "Length Required",
    "423": "Locked",
    "420": "Method Failure",
    "405": "Method Not Allowed",
    "301": "Moved Permanently",
    "302": "Moved Temporarily",
    "207": "Multi-Status",
    "300": "Multiple Choices",
    "511": "Network Authentication Required",
    "204": "No Content",
    "203": "Non Authoritative Information",
    "406": "Not Acceptable",
    "404": "Not Found",
    "501": "Not Implemented",
    "304": "Not Modified",
    "200": "OK",
    "206": "Partial Content",
    "402": "Payment Required",
    "308": "Permanent Redirect",
    "412": "Precondition Failed",
    "428": "Precondition Required",
    "102": "Processing",
    "407": "Proxy Authentication Required",
    "431": "Request Header Fields Too Large",
    "408": "Request Timeout",
    "413": "Request Entity Too Large",
    "414": "Request-URI Too Long",
    "416": "Requested Range Not Satisfiable",
    "205": "Reset Content",
    "303": "See Other",
    "503": "Service Unavailable",
    "101": "Switching Protocols",
    "307": "Temporary Redirect",
    "429": "Too Many Requests",
    "401": "Unauthorized",
    "451": "Unavailable For Legal Reasons",
    "422": "Unprocessable Entity",
    "415": "Unsupported Media Type",
    "305": "Use Proxy",
    "421": "Misdirected Request"
};
exports.reasonPhraseToStatusCode = {
    "Accepted": 202,
    "Bad Gateway": 502,
    "Bad Request": 400,
    "Conflict": 409,
    "Continue": 100,
    "Created": 201,
    "Expectation Failed": 417,
    "Failed Dependency": 424,
    "Forbidden": 403,
    "Gateway Timeout": 504,
    "Gone": 410,
    "HTTP Version Not Supported": 505,
    "I'm a teapot": 418,
    "Insufficient Space on Resource": 419,
    "Insufficient Storage": 507,
    "Internal Server Error": 500,
    "Length Required": 411,
    "Locked": 423,
    "Method Failure": 420,
    "Method Not Allowed": 405,
    "Moved Permanently": 301,
    "Moved Temporarily": 302,
    "Multi-Status": 207,
    "Multiple Choices": 300,
    "Network Authentication Required": 511,
    "No Content": 204,
    "Non Authoritative Information": 203,
    "Not Acceptable": 406,
    "Not Found": 404,
    "Not Implemented": 501,
    "Not Modified": 304,
    "OK": 200,
    "Partial Content": 206,
    "Payment Required": 402,
    "Permanent Redirect": 308,
    "Precondition Failed": 412,
    "Precondition Required": 428,
    "Processing": 102,
    "Proxy Authentication Required": 407,
    "Request Header Fields Too Large": 431,
    "Request Timeout": 408,
    "Request Entity Too Large": 413,
    "Request-URI Too Long": 414,
    "Requested Range Not Satisfiable": 416,
    "Reset Content": 205,
    "See Other": 303,
    "Service Unavailable": 503,
    "Switching Protocols": 101,
    "Temporary Redirect": 307,
    "Too Many Requests": 429,
    "Unauthorized": 401,
    "Unavailable For Legal Reasons": 451,
    "Unprocessable Entity": 422,
    "Unsupported Media Type": 415,
    "Use Proxy": 305,
    "Misdirected Request": 421
};

},{}],368:[function(require,module,exports){
'use strict';

module.exports = value => {
	const type = typeof value;
	return value !== null && (type === 'object' || type === 'function');
};

},{}],369:[function(require,module,exports){
(function (global){(function (){
/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    asyncTag = '[object AsyncFunction]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    nullTag = '[object Null]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    proxyTag = '[object Proxy]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    undefinedTag = '[object Undefined]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice,
    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = isEqual;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],370:[function(require,module,exports){
(function (process){(function (){
const perf =
  typeof performance === 'object' &&
  performance &&
  typeof performance.now === 'function'
    ? performance
    : Date

const hasAbortController = typeof AbortController === 'function'

// minimal backwards-compatibility polyfill
// this doesn't have nearly all the checks and whatnot that
// actual AbortController/Signal has, but it's enough for
// our purposes, and if used properly, behaves the same.
const AC = hasAbortController
  ? AbortController
  : class AbortController {
      constructor() {
        this.signal = new AS()
      }
      abort() {
        this.signal.dispatchEvent('abort')
      }
    }

const hasAbortSignal = typeof AbortSignal === 'function'
// Some polyfills put this on the AC class, not global
const hasACAbortSignal = typeof AC.AbortSignal === 'function'
const AS = hasAbortSignal
  ? AbortSignal
  : hasACAbortSignal
  ? AC.AbortController
  : class AbortSignal {
      constructor() {
        this.aborted = false
        this._listeners = []
      }
      dispatchEvent(type) {
        if (type === 'abort') {
          this.aborted = true
          const e = { type, target: this }
          this.onabort(e)
          this._listeners.forEach(f => f(e), this)
        }
      }
      onabort() {}
      addEventListener(ev, fn) {
        if (ev === 'abort') {
          this._listeners.push(fn)
        }
      }
      removeEventListener(ev, fn) {
        if (ev === 'abort') {
          this._listeners = this._listeners.filter(f => f !== fn)
        }
      }
    }

const warned = new Set()
const deprecatedOption = (opt, instead) => {
  const code = `LRU_CACHE_OPTION_${opt}`
  if (shouldWarn(code)) {
    warn(code, `${opt} option`, `options.${instead}`, LRUCache)
  }
}
const deprecatedMethod = (method, instead) => {
  const code = `LRU_CACHE_METHOD_${method}`
  if (shouldWarn(code)) {
    const { prototype } = LRUCache
    const { get } = Object.getOwnPropertyDescriptor(prototype, method)
    warn(code, `${method} method`, `cache.${instead}()`, get)
  }
}
const deprecatedProperty = (field, instead) => {
  const code = `LRU_CACHE_PROPERTY_${field}`
  if (shouldWarn(code)) {
    const { prototype } = LRUCache
    const { get } = Object.getOwnPropertyDescriptor(prototype, field)
    warn(code, `${field} property`, `cache.${instead}`, get)
  }
}

const emitWarning = (...a) => {
  typeof process === 'object' &&
  process &&
  typeof process.emitWarning === 'function'
    ? process.emitWarning(...a)
    : console.error(...a)
}

const shouldWarn = code => !warned.has(code)

const warn = (code, what, instead, fn) => {
  warned.add(code)
  const msg = `The ${what} is deprecated. Please use ${instead} instead.`
  emitWarning(msg, 'DeprecationWarning', code, fn)
}

const isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)

/* istanbul ignore next - This is a little bit ridiculous, tbh.
 * The maximum array length is 2^32-1 or thereabouts on most JS impls.
 * And well before that point, you're caching the entire world, I mean,
 * that's ~32GB of just integers for the next/prev links, plus whatever
 * else to hold that many keys and values.  Just filling the memory with
 * zeroes at init time is brutal when you get that big.
 * But why not be complete?
 * Maybe in the future, these limits will have expanded. */
const getUintArray = max =>
  !isPosInt(max)
    ? null
    : max <= Math.pow(2, 8)
    ? Uint8Array
    : max <= Math.pow(2, 16)
    ? Uint16Array
    : max <= Math.pow(2, 32)
    ? Uint32Array
    : max <= Number.MAX_SAFE_INTEGER
    ? ZeroArray
    : null

class ZeroArray extends Array {
  constructor(size) {
    super(size)
    this.fill(0)
  }
}

class Stack {
  constructor(max) {
    if (max === 0) {
      return []
    }
    const UintArray = getUintArray(max)
    this.heap = new UintArray(max)
    this.length = 0
  }
  push(n) {
    this.heap[this.length++] = n
  }
  pop() {
    return this.heap[--this.length]
  }
}

class LRUCache {
  constructor(options = {}) {
    const {
      max = 0,
      ttl,
      ttlResolution = 1,
      ttlAutopurge,
      updateAgeOnGet,
      updateAgeOnHas,
      allowStale,
      dispose,
      disposeAfter,
      noDisposeOnSet,
      noUpdateTTL,
      maxSize = 0,
      maxEntrySize = 0,
      sizeCalculation,
      fetchMethod,
      fetchContext,
      noDeleteOnFetchRejection,
      noDeleteOnStaleGet,
    } = options

    // deprecated options, don't trigger a warning for getting them if
    // the thing being passed in is another LRUCache we're copying.
    const { length, maxAge, stale } =
      options instanceof LRUCache ? {} : options

    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError('max option must be a nonnegative integer')
    }

    const UintArray = max ? getUintArray(max) : Array
    if (!UintArray) {
      throw new Error('invalid max value: ' + max)
    }

    this.max = max
    this.maxSize = maxSize
    this.maxEntrySize = maxEntrySize || this.maxSize
    this.sizeCalculation = sizeCalculation || length
    if (this.sizeCalculation) {
      if (!this.maxSize && !this.maxEntrySize) {
        throw new TypeError(
          'cannot set sizeCalculation without setting maxSize or maxEntrySize'
        )
      }
      if (typeof this.sizeCalculation !== 'function') {
        throw new TypeError('sizeCalculation set to non-function')
      }
    }

    this.fetchMethod = fetchMethod || null
    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {
      throw new TypeError(
        'fetchMethod must be a function if specified'
      )
    }

    this.fetchContext = fetchContext
    if (!this.fetchMethod && fetchContext !== undefined) {
      throw new TypeError(
        'cannot set fetchContext without fetchMethod'
      )
    }

    this.keyMap = new Map()
    this.keyList = new Array(max).fill(null)
    this.valList = new Array(max).fill(null)
    this.next = new UintArray(max)
    this.prev = new UintArray(max)
    this.head = 0
    this.tail = 0
    this.free = new Stack(max)
    this.initialFill = 1
    this.size = 0

    if (typeof dispose === 'function') {
      this.dispose = dispose
    }
    if (typeof disposeAfter === 'function') {
      this.disposeAfter = disposeAfter
      this.disposed = []
    } else {
      this.disposeAfter = null
      this.disposed = null
    }
    this.noDisposeOnSet = !!noDisposeOnSet
    this.noUpdateTTL = !!noUpdateTTL
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection

    // NB: maxEntrySize is set to maxSize if it's set
    if (this.maxEntrySize !== 0) {
      if (this.maxSize !== 0) {
        if (!isPosInt(this.maxSize)) {
          throw new TypeError(
            'maxSize must be a positive integer if specified'
          )
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError(
          'maxEntrySize must be a positive integer if specified'
        )
      }
      this.initializeSizeTracking()
    }

    this.allowStale = !!allowStale || !!stale
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet
    this.updateAgeOnGet = !!updateAgeOnGet
    this.updateAgeOnHas = !!updateAgeOnHas
    this.ttlResolution =
      isPosInt(ttlResolution) || ttlResolution === 0
        ? ttlResolution
        : 1
    this.ttlAutopurge = !!ttlAutopurge
    this.ttl = ttl || maxAge || 0
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError(
          'ttl must be a positive integer if specified'
        )
      }
      this.initializeTTLTracking()
    }

    // do not allow completely unbounded caches
    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
      throw new TypeError(
        'At least one of max, maxSize, or ttl is required'
      )
    }
    if (!this.ttlAutopurge && !this.max && !this.maxSize) {
      const code = 'LRU_CACHE_UNBOUNDED'
      if (shouldWarn(code)) {
        warned.add(code)
        const msg =
          'TTL caching without ttlAutopurge, max, or maxSize can ' +
          'result in unbounded memory consumption.'
        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)
      }
    }

    if (stale) {
      deprecatedOption('stale', 'allowStale')
    }
    if (maxAge) {
      deprecatedOption('maxAge', 'ttl')
    }
    if (length) {
      deprecatedOption('length', 'sizeCalculation')
    }
  }

  getRemainingTTL(key) {
    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0
  }

  initializeTTLTracking() {
    this.ttls = new ZeroArray(this.max)
    this.starts = new ZeroArray(this.max)

    this.setItemTTL = (index, ttl, start = perf.now()) => {
      this.starts[index] = ttl !== 0 ? start : 0
      this.ttls[index] = ttl
      if (ttl !== 0 && this.ttlAutopurge) {
        const t = setTimeout(() => {
          if (this.isStale(index)) {
            this.delete(this.keyList[index])
          }
        }, ttl + 1)
        /* istanbul ignore else - unref() not supported on all platforms */
        if (t.unref) {
          t.unref()
        }
      }
    }

    this.updateItemAge = index => {
      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0
    }

    // debounce calls to perf.now() to 1s so we're not hitting
    // that costly call repeatedly.
    let cachedNow = 0
    const getNow = () => {
      const n = perf.now()
      if (this.ttlResolution > 0) {
        cachedNow = n
        const t = setTimeout(
          () => (cachedNow = 0),
          this.ttlResolution
        )
        /* istanbul ignore else - not available on all platforms */
        if (t.unref) {
          t.unref()
        }
      }
      return n
    }

    this.getRemainingTTL = key => {
      const index = this.keyMap.get(key)
      if (index === undefined) {
        return 0
      }
      return this.ttls[index] === 0 || this.starts[index] === 0
        ? Infinity
        : this.starts[index] +
            this.ttls[index] -
            (cachedNow || getNow())
    }

    this.isStale = index => {
      return (
        this.ttls[index] !== 0 &&
        this.starts[index] !== 0 &&
        (cachedNow || getNow()) - this.starts[index] >
          this.ttls[index]
      )
    }
  }
  updateItemAge(index) {}
  setItemTTL(index, ttl, start) {}
  isStale(index) {
    return false
  }

  initializeSizeTracking() {
    this.calculatedSize = 0
    this.sizes = new ZeroArray(this.max)
    this.removeItemSize = index => {
      this.calculatedSize -= this.sizes[index]
      this.sizes[index] = 0
    }
    this.requireSize = (k, v, size, sizeCalculation) => {
      // provisionally accept background fetches.
      // actual value size will be checked when they return.
      if (this.isBackgroundFetch(v)) {
        return 0
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== 'function') {
            throw new TypeError('sizeCalculation must be a function')
          }
          size = sizeCalculation(v, k)
          if (!isPosInt(size)) {
            throw new TypeError(
              'sizeCalculation return invalid (expect positive integer)'
            )
          }
        } else {
          throw new TypeError(
            'invalid size value (must be positive integer)'
          )
        }
      }
      return size
    }
    this.addItemSize = (index, size) => {
      this.sizes[index] = size
      if (this.maxSize) {
        const maxSize = this.maxSize - this.sizes[index]
        while (this.calculatedSize > maxSize) {
          this.evict(true)
        }
      }
      this.calculatedSize += this.sizes[index]
    }
  }
  removeItemSize(index) {}
  addItemSize(index, size) {}
  requireSize(k, v, size, sizeCalculation) {
    if (size || sizeCalculation) {
      throw new TypeError(
        'cannot set size without setting maxSize or maxEntrySize on cache'
      )
    }
  }

  *indexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.tail; true; ) {
        if (!this.isValidIndex(i)) {
          break
        }
        if (allowStale || !this.isStale(i)) {
          yield i
        }
        if (i === this.head) {
          break
        } else {
          i = this.prev[i]
        }
      }
    }
  }

  *rindexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.head; true; ) {
        if (!this.isValidIndex(i)) {
          break
        }
        if (allowStale || !this.isStale(i)) {
          yield i
        }
        if (i === this.tail) {
          break
        } else {
          i = this.next[i]
        }
      }
    }
  }

  isValidIndex(index) {
    return this.keyMap.get(this.keyList[index]) === index
  }

  *entries() {
    for (const i of this.indexes()) {
      yield [this.keyList[i], this.valList[i]]
    }
  }
  *rentries() {
    for (const i of this.rindexes()) {
      yield [this.keyList[i], this.valList[i]]
    }
  }

  *keys() {
    for (const i of this.indexes()) {
      yield this.keyList[i]
    }
  }
  *rkeys() {
    for (const i of this.rindexes()) {
      yield this.keyList[i]
    }
  }

  *values() {
    for (const i of this.indexes()) {
      yield this.valList[i]
    }
  }
  *rvalues() {
    for (const i of this.rindexes()) {
      yield this.valList[i]
    }
  }

  [Symbol.iterator]() {
    return this.entries()
  }

  find(fn, getOptions = {}) {
    for (const i of this.indexes()) {
      if (fn(this.valList[i], this.keyList[i], this)) {
        return this.get(this.keyList[i], getOptions)
      }
    }
  }

  forEach(fn, thisp = this) {
    for (const i of this.indexes()) {
      fn.call(thisp, this.valList[i], this.keyList[i], this)
    }
  }

  rforEach(fn, thisp = this) {
    for (const i of this.rindexes()) {
      fn.call(thisp, this.valList[i], this.keyList[i], this)
    }
  }

  get prune() {
    deprecatedMethod('prune', 'purgeStale')
    return this.purgeStale
  }

  purgeStale() {
    let deleted = false
    for (const i of this.rindexes({ allowStale: true })) {
      if (this.isStale(i)) {
        this.delete(this.keyList[i])
        deleted = true
      }
    }
    return deleted
  }

  dump() {
    const arr = []
    for (const i of this.indexes({ allowStale: true })) {
      const key = this.keyList[i]
      const v = this.valList[i]
      const value = this.isBackgroundFetch(v)
        ? v.__staleWhileFetching
        : v
      const entry = { value }
      if (this.ttls) {
        entry.ttl = this.ttls[i]
        // always dump the start relative to a portable timestamp
        // it's ok for this to be a bit slow, it's a rare operation.
        const age = perf.now() - this.starts[i]
        entry.start = Math.floor(Date.now() - age)
      }
      if (this.sizes) {
        entry.size = this.sizes[i]
      }
      arr.unshift([key, entry])
    }
    return arr
  }

  load(arr) {
    this.clear()
    for (const [key, entry] of arr) {
      if (entry.start) {
        // entry.start is a portable timestamp, but we may be using
        // node's performance.now(), so calculate the offset.
        // it's ok for this to be a bit slow, it's a rare operation.
        const age = Date.now() - entry.start
        entry.start = perf.now() - age
      }
      this.set(key, entry.value, entry)
    }
  }

  dispose(v, k, reason) {}

  set(
    k,
    v,
    {
      ttl = this.ttl,
      start,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
    } = {}
  ) {
    size = this.requireSize(k, v, size, sizeCalculation)
    // if the item doesn't fit, don't do anything
    // NB: maxEntrySize set to maxSize by default
    if (this.maxEntrySize && size > this.maxEntrySize) {
      // have to delete, in case a background fetch is there already.
      // in non-async cases, this is a no-op
      this.delete(k)
      return this
    }
    let index = this.size === 0 ? undefined : this.keyMap.get(k)
    if (index === undefined) {
      // addition
      index = this.newIndex()
      this.keyList[index] = k
      this.valList[index] = v
      this.keyMap.set(k, index)
      this.next[this.tail] = index
      this.prev[index] = this.tail
      this.tail = index
      this.size++
      this.addItemSize(index, size)
      noUpdateTTL = false
    } else {
      // update
      const oldVal = this.valList[index]
      if (v !== oldVal) {
        if (this.isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort()
        } else {
          if (!noDisposeOnSet) {
            this.dispose(oldVal, k, 'set')
            if (this.disposeAfter) {
              this.disposed.push([oldVal, k, 'set'])
            }
          }
        }
        this.removeItemSize(index)
        this.valList[index] = v
        this.addItemSize(index, size)
      }
      this.moveToTail(index)
    }
    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
      this.initializeTTLTracking()
    }
    if (!noUpdateTTL) {
      this.setItemTTL(index, ttl, start)
    }
    if (this.disposeAfter) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift())
      }
    }
    return this
  }

  newIndex() {
    if (this.size === 0) {
      return this.tail
    }
    if (this.size === this.max && this.max !== 0) {
      return this.evict(false)
    }
    if (this.free.length !== 0) {
      return this.free.pop()
    }
    // initial fill, just keep writing down the list
    return this.initialFill++
  }

  pop() {
    if (this.size) {
      const val = this.valList[this.head]
      this.evict(true)
      return val
    }
  }

  evict(free) {
    const head = this.head
    const k = this.keyList[head]
    const v = this.valList[head]
    if (this.isBackgroundFetch(v)) {
      v.__abortController.abort()
    } else {
      this.dispose(v, k, 'evict')
      if (this.disposeAfter) {
        this.disposed.push([v, k, 'evict'])
      }
    }
    this.removeItemSize(head)
    // if we aren't about to use the index, then null these out
    if (free) {
      this.keyList[head] = null
      this.valList[head] = null
      this.free.push(head)
    }
    this.head = this.next[head]
    this.keyMap.delete(k)
    this.size--
    return head
  }

  has(k, { updateAgeOnHas = this.updateAgeOnHas } = {}) {
    const index = this.keyMap.get(k)
    if (index !== undefined) {
      if (!this.isStale(index)) {
        if (updateAgeOnHas) {
          this.updateItemAge(index)
        }
        return true
      }
    }
    return false
  }

  // like get(), but without any LRU updating or TTL expiration
  peek(k, { allowStale = this.allowStale } = {}) {
    const index = this.keyMap.get(k)
    if (index !== undefined && (allowStale || !this.isStale(index))) {
      const v = this.valList[index]
      // either stale and allowed, or forcing a refresh of non-stale value
      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v
    }
  }

  backgroundFetch(k, index, options, context) {
    const v = index === undefined ? undefined : this.valList[index]
    if (this.isBackgroundFetch(v)) {
      return v
    }
    const ac = new AC()
    const fetchOpts = {
      signal: ac.signal,
      options,
      context,
    }
    const cb = v => {
      if (!ac.signal.aborted) {
        this.set(k, v, fetchOpts.options)
      }
      return v
    }
    const eb = er => {
      if (this.valList[index] === p) {
        const del =
          !options.noDeleteOnFetchRejection ||
          p.__staleWhileFetching === undefined
        if (del) {
          this.delete(k)
        } else {
          // still replace the *promise* with the stale value,
          // since we are done with the promise at this point.
          this.valList[index] = p.__staleWhileFetching
        }
      }
      if (p.__returned === p) {
        throw er
      }
    }
    const pcall = res => res(this.fetchMethod(k, v, fetchOpts))
    const p = new Promise(pcall).then(cb, eb)
    p.__abortController = ac
    p.__staleWhileFetching = v
    p.__returned = null
    if (index === undefined) {
      this.set(k, p, fetchOpts.options)
      index = this.keyMap.get(k)
    } else {
      this.valList[index] = p
    }
    return p
  }

  isBackgroundFetch(p) {
    return (
      p &&
      typeof p === 'object' &&
      typeof p.then === 'function' &&
      Object.prototype.hasOwnProperty.call(
        p,
        '__staleWhileFetching'
      ) &&
      Object.prototype.hasOwnProperty.call(p, '__returned') &&
      (p.__returned === p || p.__returned === null)
    )
  }

  // this takes the union of get() and set() opts, because it does both
  async fetch(
    k,
    {
      // get options
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
      // set options
      ttl = this.ttl,
      noDisposeOnSet = this.noDisposeOnSet,
      size = 0,
      sizeCalculation = this.sizeCalculation,
      noUpdateTTL = this.noUpdateTTL,
      // fetch exclusive options
      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
      fetchContext = this.fetchContext,
      forceRefresh = false,
    } = {}
  ) {
    if (!this.fetchMethod) {
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
      })
    }

    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
    }

    let index = this.keyMap.get(k)
    if (index === undefined) {
      const p = this.backgroundFetch(k, index, options, fetchContext)
      return (p.__returned = p)
    } else {
      // in cache, maybe already fetching
      const v = this.valList[index]
      if (this.isBackgroundFetch(v)) {
        return allowStale && v.__staleWhileFetching !== undefined
          ? v.__staleWhileFetching
          : (v.__returned = v)
      }

      // if we force a refresh, that means do NOT serve the cached value,
      // unless we are already in the process of refreshing the cache.
      if (!forceRefresh && !this.isStale(index)) {
        this.moveToTail(index)
        if (updateAgeOnGet) {
          this.updateItemAge(index)
        }
        return v
      }

      // ok, it is stale or a forced refresh, and not already fetching.
      // refresh the cache.
      const p = this.backgroundFetch(k, index, options, fetchContext)
      return allowStale && p.__staleWhileFetching !== undefined
        ? p.__staleWhileFetching
        : (p.__returned = p)
    }
  }

  get(
    k,
    {
      allowStale = this.allowStale,
      updateAgeOnGet = this.updateAgeOnGet,
      noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    } = {}
  ) {
    const index = this.keyMap.get(k)
    if (index !== undefined) {
      const value = this.valList[index]
      const fetching = this.isBackgroundFetch(value)
      if (this.isStale(index)) {
        // delete only if not an in-flight background fetch
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k)
          }
          return allowStale ? value : undefined
        } else {
          return allowStale ? value.__staleWhileFetching : undefined
        }
      } else {
        // if we're currently fetching it, we don't actually have it yet
        // it's not stale, which means this isn't a staleWhileRefetching,
        // so we just return undefined
        if (fetching) {
          return undefined
        }
        this.moveToTail(index)
        if (updateAgeOnGet) {
          this.updateItemAge(index)
        }
        return value
      }
    }
  }

  connect(p, n) {
    this.prev[n] = p
    this.next[p] = n
  }

  moveToTail(index) {
    // if tail already, nothing to do
    // if head, move head to next[index]
    // else
    //   move next[prev[index]] to next[index] (head has no prev)
    //   move prev[next[index]] to prev[index]
    // prev[index] = tail
    // next[tail] = index
    // tail = index
    if (index !== this.tail) {
      if (index === this.head) {
        this.head = this.next[index]
      } else {
        this.connect(this.prev[index], this.next[index])
      }
      this.connect(this.tail, index)
      this.tail = index
    }
  }

  get del() {
    deprecatedMethod('del', 'delete')
    return this.delete
  }

  delete(k) {
    let deleted = false
    if (this.size !== 0) {
      const index = this.keyMap.get(k)
      if (index !== undefined) {
        deleted = true
        if (this.size === 1) {
          this.clear()
        } else {
          this.removeItemSize(index)
          const v = this.valList[index]
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort()
          } else {
            this.dispose(v, k, 'delete')
            if (this.disposeAfter) {
              this.disposed.push([v, k, 'delete'])
            }
          }
          this.keyMap.delete(k)
          this.keyList[index] = null
          this.valList[index] = null
          if (index === this.tail) {
            this.tail = this.prev[index]
          } else if (index === this.head) {
            this.head = this.next[index]
          } else {
            this.next[this.prev[index]] = this.next[index]
            this.prev[this.next[index]] = this.prev[index]
          }
          this.size--
          this.free.push(index)
        }
      }
    }
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift())
      }
    }
    return deleted
  }

  clear() {
    for (const index of this.rindexes({ allowStale: true })) {
      const v = this.valList[index]
      if (this.isBackgroundFetch(v)) {
        v.__abortController.abort()
      } else {
        const k = this.keyList[index]
        this.dispose(v, k, 'delete')
        if (this.disposeAfter) {
          this.disposed.push([v, k, 'delete'])
        }
      }
    }

    this.keyMap.clear()
    this.valList.fill(null)
    this.keyList.fill(null)
    if (this.ttls) {
      this.ttls.fill(0)
      this.starts.fill(0)
    }
    if (this.sizes) {
      this.sizes.fill(0)
    }
    this.head = 0
    this.tail = 0
    this.initialFill = 1
    this.free.length = 0
    this.calculatedSize = 0
    this.size = 0
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift())
      }
    }
  }

  get reset() {
    deprecatedMethod('reset', 'clear')
    return this.clear
  }

  get length() {
    deprecatedProperty('length', 'size')
    return this.size
  }

  static get AbortController() {
    return AC
  }
  static get AbortSignal() {
    return AS
  }
}

module.exports = LRUCache

}).call(this)}).call(this,require('_process'))
},{"_process":9}],371:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentError = void 0;
const generate_stack_1 = require("./utils/generate-stack");
const wrapStackTrace = (error, stack) => `${error.name}: ${error.message}\n${stack}`;
/**
@hidden
*/
class ArgumentError extends Error {
    constructor(message, context, errors = new Map()) {
        super(message);
        Object.defineProperty(this, "validationErrors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = 'ArgumentError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, context);
        }
        else {
            this.stack = wrapStackTrace(this, (0, generate_stack_1.generateStackTrace)());
        }
        this.validationErrors = errors;
    }
}
exports.ArgumentError = ArgumentError;

},{"./utils/generate-stack":396}],372:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArgumentError = exports.Predicate = void 0;
const callsites_1 = require("callsites");
const infer_label_1 = require("./utils/infer-label");
const predicate_1 = require("./predicates/predicate");
Object.defineProperty(exports, "Predicate", { enumerable: true, get: function () { return predicate_1.Predicate; } });
const base_predicate_1 = require("./predicates/base-predicate");
const modifiers_1 = require("./modifiers");
const predicates_1 = require("./predicates");
const test_1 = require("./test");
const ow = (value, labelOrPredicate, predicate) => {
    if (!(0, base_predicate_1.isPredicate)(labelOrPredicate) && typeof labelOrPredicate !== 'string') {
        throw new TypeError(`Expected second argument to be a predicate or a string, got \`${typeof labelOrPredicate}\``);
    }
    if ((0, base_predicate_1.isPredicate)(labelOrPredicate)) {
        // If the second argument is a predicate, infer the label
        const stackFrames = (0, callsites_1.default)();
        (0, test_1.default)(value, () => (0, infer_label_1.inferLabel)(stackFrames), labelOrPredicate);
        return;
    }
    (0, test_1.default)(value, labelOrPredicate, predicate);
};
Object.defineProperties(ow, {
    isValid: {
        value: (value, predicate) => {
            try {
                (0, test_1.default)(value, '', predicate);
                return true;
            }
            catch {
                return false;
            }
        }
    },
    create: {
        value: (labelOrPredicate, predicate) => (value, label) => {
            if ((0, base_predicate_1.isPredicate)(labelOrPredicate)) {
                const stackFrames = (0, callsites_1.default)();
                (0, test_1.default)(value, label !== null && label !== void 0 ? label : (() => (0, infer_label_1.inferLabel)(stackFrames)), labelOrPredicate);
                return;
            }
            (0, test_1.default)(value, label !== null && label !== void 0 ? label : (labelOrPredicate), predicate);
        }
    }
});
// Can't use `export default predicates(modifiers(ow)) as Ow` because the variable needs a type annotation to avoid a compiler error when used:
// Assertions require every name in the call target to be declared with an explicit type annotation.ts(2775)
// See https://github.com/microsoft/TypeScript/issues/36931 for more details.
const _ow = (0, predicates_1.default)((0, modifiers_1.default)(ow));
exports.default = _ow;
__exportStar(require("./predicates"), exports);
var argument_error_1 = require("./argument-error");
Object.defineProperty(exports, "ArgumentError", { enumerable: true, get: function () { return argument_error_1.ArgumentError; } });

},{"./argument-error":371,"./modifiers":373,"./predicates":375,"./predicates/base-predicate":379,"./predicates/predicate":388,"./test":394,"./utils/infer-label":398,"callsites":359}],373:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const predicates_1 = require("./predicates");
exports.default = (object) => {
    Object.defineProperties(object, {
        optional: {
            get: () => (0, predicates_1.default)({}, { optional: true })
        }
    });
    return object;
};

},{"./predicates":375}],374:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.not = void 0;
const random_id_1 = require("../utils/random-id");
const predicate_1 = require("../predicates/predicate");
/**
Operator which inverts the following validation.

@hidden

@param predictate - Predicate to wrap inside the operator.
*/
const not = (predicate) => {
    const originalAddValidator = predicate.addValidator;
    predicate.addValidator = (validator) => {
        const { validator: fn, message, negatedMessage } = validator;
        const placeholder = (0, random_id_1.default)();
        validator.message = (value, label) => (negatedMessage ?
            negatedMessage(value, label) :
            message(value, placeholder).replace(/ to /, '$&not ').replace(placeholder, label));
        validator.validator = (value) => !fn(value);
        predicate[predicate_1.validatorSymbol].push(validator);
        predicate.addValidator = originalAddValidator;
        return predicate;
    };
    return predicate;
};
exports.not = not;

},{"../predicates/predicate":388,"../utils/random-id":402}],375:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyPredicate = exports.DataViewPredicate = exports.ArrayBufferPredicate = exports.TypedArrayPredicate = exports.WeakSetPredicate = exports.SetPredicate = exports.WeakMapPredicate = exports.MapPredicate = exports.ErrorPredicate = exports.DatePredicate = exports.ObjectPredicate = exports.ArrayPredicate = exports.BooleanPredicate = exports.BigIntPredicate = exports.NumberPredicate = exports.StringPredicate = void 0;
const string_1 = require("./predicates/string");
Object.defineProperty(exports, "StringPredicate", { enumerable: true, get: function () { return string_1.StringPredicate; } });
const number_1 = require("./predicates/number");
Object.defineProperty(exports, "NumberPredicate", { enumerable: true, get: function () { return number_1.NumberPredicate; } });
const bigint_1 = require("./predicates/bigint");
Object.defineProperty(exports, "BigIntPredicate", { enumerable: true, get: function () { return bigint_1.BigIntPredicate; } });
const boolean_1 = require("./predicates/boolean");
Object.defineProperty(exports, "BooleanPredicate", { enumerable: true, get: function () { return boolean_1.BooleanPredicate; } });
const predicate_1 = require("./predicates/predicate");
const array_1 = require("./predicates/array");
Object.defineProperty(exports, "ArrayPredicate", { enumerable: true, get: function () { return array_1.ArrayPredicate; } });
const object_1 = require("./predicates/object");
Object.defineProperty(exports, "ObjectPredicate", { enumerable: true, get: function () { return object_1.ObjectPredicate; } });
const date_1 = require("./predicates/date");
Object.defineProperty(exports, "DatePredicate", { enumerable: true, get: function () { return date_1.DatePredicate; } });
const error_1 = require("./predicates/error");
Object.defineProperty(exports, "ErrorPredicate", { enumerable: true, get: function () { return error_1.ErrorPredicate; } });
const map_1 = require("./predicates/map");
Object.defineProperty(exports, "MapPredicate", { enumerable: true, get: function () { return map_1.MapPredicate; } });
const weak_map_1 = require("./predicates/weak-map");
Object.defineProperty(exports, "WeakMapPredicate", { enumerable: true, get: function () { return weak_map_1.WeakMapPredicate; } });
const set_1 = require("./predicates/set");
Object.defineProperty(exports, "SetPredicate", { enumerable: true, get: function () { return set_1.SetPredicate; } });
const weak_set_1 = require("./predicates/weak-set");
Object.defineProperty(exports, "WeakSetPredicate", { enumerable: true, get: function () { return weak_set_1.WeakSetPredicate; } });
const typed_array_1 = require("./predicates/typed-array");
Object.defineProperty(exports, "TypedArrayPredicate", { enumerable: true, get: function () { return typed_array_1.TypedArrayPredicate; } });
const array_buffer_1 = require("./predicates/array-buffer");
Object.defineProperty(exports, "ArrayBufferPredicate", { enumerable: true, get: function () { return array_buffer_1.ArrayBufferPredicate; } });
const data_view_1 = require("./predicates/data-view");
Object.defineProperty(exports, "DataViewPredicate", { enumerable: true, get: function () { return data_view_1.DataViewPredicate; } });
const any_1 = require("./predicates/any");
Object.defineProperty(exports, "AnyPredicate", { enumerable: true, get: function () { return any_1.AnyPredicate; } });
exports.default = (object, options) => {
    Object.defineProperties(object, {
        string: {
            get: () => new string_1.StringPredicate(options)
        },
        number: {
            get: () => new number_1.NumberPredicate(options)
        },
        bigint: {
            get: () => new bigint_1.BigIntPredicate(options)
        },
        boolean: {
            get: () => new boolean_1.BooleanPredicate(options)
        },
        undefined: {
            get: () => new predicate_1.Predicate('undefined', options)
        },
        null: {
            get: () => new predicate_1.Predicate('null', options)
        },
        nullOrUndefined: {
            get: () => new predicate_1.Predicate('nullOrUndefined', options)
        },
        nan: {
            get: () => new predicate_1.Predicate('nan', options)
        },
        symbol: {
            get: () => new predicate_1.Predicate('symbol', options)
        },
        array: {
            get: () => new array_1.ArrayPredicate(options)
        },
        object: {
            get: () => new object_1.ObjectPredicate(options)
        },
        date: {
            get: () => new date_1.DatePredicate(options)
        },
        error: {
            get: () => new error_1.ErrorPredicate(options)
        },
        map: {
            get: () => new map_1.MapPredicate(options)
        },
        weakMap: {
            get: () => new weak_map_1.WeakMapPredicate(options)
        },
        set: {
            get: () => new set_1.SetPredicate(options)
        },
        weakSet: {
            get: () => new weak_set_1.WeakSetPredicate(options)
        },
        function: {
            get: () => new predicate_1.Predicate('Function', options)
        },
        buffer: {
            get: () => new predicate_1.Predicate('Buffer', options)
        },
        regExp: {
            get: () => new predicate_1.Predicate('RegExp', options)
        },
        promise: {
            get: () => new predicate_1.Predicate('Promise', options)
        },
        typedArray: {
            get: () => new typed_array_1.TypedArrayPredicate('TypedArray', options)
        },
        int8Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Int8Array', options)
        },
        uint8Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Uint8Array', options)
        },
        uint8ClampedArray: {
            get: () => new typed_array_1.TypedArrayPredicate('Uint8ClampedArray', options)
        },
        int16Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Int16Array', options)
        },
        uint16Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Uint16Array', options)
        },
        int32Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Int32Array', options)
        },
        uint32Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Uint32Array', options)
        },
        float32Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Float32Array', options)
        },
        float64Array: {
            get: () => new typed_array_1.TypedArrayPredicate('Float64Array', options)
        },
        arrayBuffer: {
            get: () => new array_buffer_1.ArrayBufferPredicate('ArrayBuffer', options)
        },
        sharedArrayBuffer: {
            get: () => new array_buffer_1.ArrayBufferPredicate('SharedArrayBuffer', options)
        },
        dataView: {
            get: () => new data_view_1.DataViewPredicate(options)
        },
        iterable: {
            get: () => new predicate_1.Predicate('Iterable', options)
        },
        any: {
            value: (...predicates) => new any_1.AnyPredicate(predicates, options)
        }
    });
    return object;
};

},{"./predicates/any":376,"./predicates/array":378,"./predicates/array-buffer":377,"./predicates/bigint":380,"./predicates/boolean":381,"./predicates/data-view":382,"./predicates/date":383,"./predicates/error":384,"./predicates/map":385,"./predicates/number":386,"./predicates/object":387,"./predicates/predicate":388,"./predicates/set":389,"./predicates/string":390,"./predicates/typed-array":391,"./predicates/weak-map":392,"./predicates/weak-set":393}],376:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnyPredicate = void 0;
const argument_error_1 = require("../argument-error");
const base_predicate_1 = require("./base-predicate");
const generate_argument_error_message_1 = require("../utils/generate-argument-error-message");
/**
@hidden
*/
class AnyPredicate {
    constructor(predicates, options = {}) {
        Object.defineProperty(this, "predicates", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: predicates
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
        });
    }
    [base_predicate_1.testSymbol](value, main, label, idLabel) {
        const errors = new Map();
        for (const predicate of this.predicates) {
            try {
                main(value, label, predicate, idLabel);
                return;
            }
            catch (error) {
                if (value === undefined && this.options.optional === true) {
                    return;
                }
                // If we received an ArgumentError, then..
                if (error instanceof argument_error_1.ArgumentError) {
                    // Iterate through every error reported.
                    for (const [key, value] of error.validationErrors.entries()) {
                        // Get the current errors set, if any.
                        const alreadyPresent = errors.get(key);
                        // Add all errors under the same key
                        errors.set(key, new Set([...alreadyPresent !== null && alreadyPresent !== void 0 ? alreadyPresent : [], ...value]));
                    }
                }
            }
        }
        if (errors.size > 0) {
            // Generate the `error.message` property.
            const message = (0, generate_argument_error_message_1.generateArgumentErrorMessage)(errors, true);
            throw new argument_error_1.ArgumentError(`Any predicate failed with the following errors:\n${message}`, main, errors);
        }
    }
}
exports.AnyPredicate = AnyPredicate;

},{"../argument-error":371,"../utils/generate-argument-error-message":395,"./base-predicate":379}],377:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayBufferPredicate = void 0;
const predicate_1 = require("./predicate");
class ArrayBufferPredicate extends predicate_1.Predicate {
    /**
    Test an array buffer to have a specific byte length.

    @param byteLength - The byte length of the array buffer.
    */
    byteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength === byteLength
        });
    }
    /**
    Test an array buffer to have a minimum byte length.

    @param byteLength - The minimum byte length of the array buffer.
    */
    minByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength >= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength - 1}\`, got \`${value.byteLength}\``
        });
    }
    /**
    Test an array buffer to have a minimum byte length.

    @param length - The minimum byte length of the array buffer.
    */
    maxByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength <= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength + 1}\`, got \`${value.byteLength}\``
        });
    }
}
exports.ArrayBufferPredicate = ArrayBufferPredicate;

},{"./predicate":388}],378:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayPredicate = void 0;
const isEqual = require("lodash.isequal");
const predicate_1 = require("./predicate");
const match_shape_1 = require("../utils/match-shape");
const of_type_1 = require("../utils/of-type");
class ArrayPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('array', options);
    }
    /**
    Test an array to have a specific length.

    @param length - The length of the array.
    */
    length(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have length \`${length}\`, got \`${value.length}\``,
            validator: value => value.length === length
        });
    }
    /**
    Test an array to have a minimum length.

    @param length - The minimum length of the array.
    */
    minLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum length of \`${length}\`, got \`${value.length}\``,
            validator: value => value.length >= length,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \`${length - 1}\`, got \`${value.length}\``
        });
    }
    /**
    Test an array to have a maximum length.

    @param length - The maximum length of the array.
    */
    maxLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum length of \`${length}\`, got \`${value.length}\``,
            validator: value => value.length <= length,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \`${length + 1}\`, got \`${value.length}\``
        });
    }
    /**
    Test an array to start with a specific value. The value is tested by identity, not structure.

    @param searchElement - The value that should be the start of the array.
    */
    startsWith(searchElement) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to start with \`${searchElement}\`, got \`${value[0]}\``,
            validator: value => value[0] === searchElement
        });
    }
    /**
    Test an array to end with a specific value. The value is tested by identity, not structure.

    @param searchElement - The value that should be the end of the array.
    */
    endsWith(searchElement) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to end with \`${searchElement}\`, got \`${value[value.length - 1]}\``,
            validator: value => value[value.length - 1] === searchElement
        });
    }
    /**
    Test an array to include all the provided elements. The values are tested by identity, not structure.

    @param searchElements - The values that should be included in the array.
    */
    includes(...searchElements) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to include all elements of \`${JSON.stringify(searchElements)}\`, got \`${JSON.stringify(value)}\``,
            validator: value => searchElements.every(element => value.includes(element))
        });
    }
    /**
    Test an array to include any of the provided elements. The values are tested by identity, not structure.

    @param searchElements - The values that should be included in the array.
    */
    includesAny(...searchElements) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to include any element of \`${JSON.stringify(searchElements)}\`, got \`${JSON.stringify(value)}\``,
            validator: value => searchElements.some(element => value.includes(element))
        });
    }
    /**
    Test an array to be empty.
    */
    get empty() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be empty, got \`${JSON.stringify(value)}\``,
            validator: value => value.length === 0
        });
    }
    /**
    Test an array to be not empty.
    */
    get nonEmpty() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to not be empty`,
            validator: value => value.length > 0
        });
    }
    /**
    Test an array to be deeply equal to the provided array.

    @param expected - Expected value to match.
    */
    deepEqual(expected) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be deeply equal to \`${JSON.stringify(expected)}\`, got \`${JSON.stringify(value)}\``,
            validator: value => isEqual(value, expected)
        });
    }
    /**
    Test all elements in the array to match to provided predicate.

    @param predicate - The predicate that should be applied against every individual item.

    @example
    ```
    ow(['a', 1], ow.array.ofType(ow.any(ow.string, ow.number)));
    ```
    */
    ofType(predicate) {
        // TODO [typescript@>=5] If higher-kinded types are supported natively by typescript, refactor `addValidator` to use them to avoid the usage of `any`. Otherwise, bump or remove this TODO.
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: value => (0, of_type_1.default)(value, 'values', predicate)
        });
    }
    /**
    Test if the elements in the array exactly matches the elements placed at the same indices in the predicates array.

    @param predicates - Predicates to test the array against. Describes what the tested array should look like.

    @example
    ```
    ow(['1', 2], ow.array.exactShape([ow.string, ow.number]));
    ```
    */
    exactShape(predicates) {
        const shape = predicates;
        return this.addValidator({
            message: (_, label, message) => `${message.replace('Expected', 'Expected element')} in ${label}`,
            validator: object => (0, match_shape_1.exact)(object, shape, undefined, true)
        });
    }
}
exports.ArrayPredicate = ArrayPredicate;

},{"../utils/match-shape":399,"../utils/of-type":401,"./predicate":388,"lodash.isequal":369}],379:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPredicate = exports.testSymbol = void 0;
/**
@hidden
*/
exports.testSymbol = Symbol('test');
/**
@hidden
*/
const isPredicate = (value) => Boolean(value[exports.testSymbol]);
exports.isPredicate = isPredicate;

},{}],380:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigIntPredicate = void 0;
const predicate_1 = require("./predicate");
class BigIntPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('bigint', options);
    }
}
exports.BigIntPredicate = BigIntPredicate;

},{"./predicate":388}],381:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BooleanPredicate = void 0;
const predicate_1 = require("./predicate");
class BooleanPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('boolean', options);
    }
    /**
    Test a boolean to be true.
    */
    get true() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be true, got ${value}`,
            validator: value => value
        });
    }
    /**
    Test a boolean to be false.
    */
    get false() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be false, got ${value}`,
            validator: value => !value
        });
    }
}
exports.BooleanPredicate = BooleanPredicate;

},{"./predicate":388}],382:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataViewPredicate = void 0;
const predicate_1 = require("./predicate");
class DataViewPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('DataView', options);
    }
    /**
    Test a DataView to have a specific byte length.

    @param byteLength - The byte length of the DataView.
    */
    byteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength === byteLength
        });
    }
    /**
    Test a DataView to have a minimum byte length.

    @param byteLength - The minimum byte length of the DataView.
    */
    minByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength >= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength - 1}\`, got \`${value.byteLength}\``
        });
    }
    /**
    Test a DataView to have a minimum byte length.

    @param length - The minimum byte length of the DataView.
    */
    maxByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength <= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength + 1}\`, got \`${value.byteLength}\``
        });
    }
}
exports.DataViewPredicate = DataViewPredicate;

},{"./predicate":388}],383:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatePredicate = void 0;
const predicate_1 = require("./predicate");
class DatePredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('date', options);
    }
    /**
    Test a date to be before another date.

    @param date - Maximum value.
    */
    before(date) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} ${value.toISOString()} to be before ${date.toISOString()}`,
            validator: value => value.getTime() < date.getTime()
        });
    }
    /**
    Test a date to be before another date.

    @param date - Minimum value.
    */
    after(date) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} ${value.toISOString()} to be after ${date.toISOString()}`,
            validator: value => value.getTime() > date.getTime()
        });
    }
}
exports.DatePredicate = DatePredicate;

},{"./predicate":388}],384:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorPredicate = void 0;
const predicate_1 = require("./predicate");
class ErrorPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('error', options);
    }
    /**
    Test an error to have a specific name.

    @param expected - Expected name of the Error.
    */
    name(expected) {
        return this.addValidator({
            message: (error, label) => `Expected ${label} to have name \`${expected}\`, got \`${error.name}\``,
            validator: error => error.name === expected
        });
    }
    /**
    Test an error to have a specific message.

    @param expected - Expected message of the Error.
    */
    message(expected) {
        return this.addValidator({
            message: (error, label) => `Expected ${label} message to be \`${expected}\`, got \`${error.message}\``,
            validator: error => error.message === expected
        });
    }
    /**
    Test the error message to include a specific message.

    @param message - Message that should be included in the error.
    */
    messageIncludes(message) {
        return this.addValidator({
            message: (error, label) => `Expected ${label} message to include \`${message}\`, got \`${error.message}\``,
            validator: error => error.message.includes(message)
        });
    }
    /**
    Test the error object to have specific keys.

    @param keys - One or more keys which should be part of the error object.
    */
    hasKeys(...keys) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} message to have keys \`${keys.join('`, `')}\``,
            validator: error => keys.every(key => Object.prototype.hasOwnProperty.call(error, key))
        });
    }
    /**
    Test an error to be of a specific instance type.

    @param instance - The expected instance type of the error.
    */
    instanceOf(instance) {
        return this.addValidator({
            message: (error, label) => `Expected ${label} \`${error.name}\` to be of type \`${instance.name}\``,
            validator: error => error instanceof instance
        });
    }
    /**
    Test an Error to be a TypeError.
    */
    get typeError() {
        return this.instanceOf(TypeError);
    }
    /**
    Test an Error to be an EvalError.
    */
    get evalError() {
        return this.instanceOf(EvalError);
    }
    /**
    Test an Error to be a RangeError.
    */
    get rangeError() {
        return this.instanceOf(RangeError);
    }
    /**
    Test an Error to be a ReferenceError.
    */
    get referenceError() {
        return this.instanceOf(ReferenceError);
    }
    /**
    Test an Error to be a SyntaxError.
    */
    get syntaxError() {
        return this.instanceOf(SyntaxError);
    }
    /**
    Test an Error to be a URIError.
    */
    get uriError() {
        return this.instanceOf(URIError);
    }
}
exports.ErrorPredicate = ErrorPredicate;

},{"./predicate":388}],385:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapPredicate = void 0;
const isEqual = require("lodash.isequal");
const has_items_1 = require("../utils/has-items");
const of_type_1 = require("../utils/of-type");
const predicate_1 = require("./predicate");
class MapPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('Map', options);
    }
    /**
    Test a Map to have a specific size.

    @param size - The size of the Map.
    */
    size(size) {
        return this.addValidator({
            message: (map, label) => `Expected ${label} to have size \`${size}\`, got \`${map.size}\``,
            validator: map => map.size === size
        });
    }
    /**
    Test an Map to have a minimum size.

    @param size - The minimum size of the Map.
    */
    minSize(size) {
        return this.addValidator({
            message: (map, label) => `Expected ${label} to have a minimum size of \`${size}\`, got \`${map.size}\``,
            validator: map => map.size >= size,
            negatedMessage: (map, label) => `Expected ${label} to have a maximum size of \`${size - 1}\`, got \`${map.size}\``
        });
    }
    /**
    Test an Map to have a maximum size.

    @param size - The maximum size of the Map.
    */
    maxSize(size) {
        return this.addValidator({
            message: (map, label) => `Expected ${label} to have a maximum size of \`${size}\`, got \`${map.size}\``,
            validator: map => map.size <= size,
            negatedMessage: (map, label) => `Expected ${label} to have a minimum size of \`${size + 1}\`, got \`${map.size}\``
        });
    }
    /**
    Test a Map to include all the provided keys. The keys are tested by identity, not structure.

    @param keys - The keys that should be a key in the Map.
    */
    hasKeys(...keys) {
        return this.addValidator({
            message: (_, label, missingKeys) => `Expected ${label} to have keys \`${JSON.stringify(missingKeys)}\``,
            validator: map => (0, has_items_1.default)(map, keys)
        });
    }
    /**
    Test a Map to include any of the provided keys. The keys are tested by identity, not structure.

    @param keys - The keys that could be a key in the Map.
    */
    hasAnyKeys(...keys) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any key of \`${JSON.stringify(keys)}\``,
            validator: map => keys.some(key => map.has(key))
        });
    }
    /**
    Test a Map to include all the provided values. The values are tested by identity, not structure.

    @param values - The values that should be a value in the Map.
    */
    hasValues(...values) {
        return this.addValidator({
            message: (_, label, missingValues) => `Expected ${label} to have values \`${JSON.stringify(missingValues)}\``,
            validator: map => (0, has_items_1.default)(new Set(map.values()), values)
        });
    }
    /**
    Test a Map to include any of the provided values. The values are tested by identity, not structure.

    @param values - The values that could be a value in the Map.
    */
    hasAnyValues(...values) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any value of \`${JSON.stringify(values)}\``,
            validator: map => {
                const valueSet = new Set(map.values());
                return values.some(key => valueSet.has(key));
            }
        });
    }
    /**
    Test all the keys in the Map to match the provided predicate.

    @param predicate - The predicate that should be applied against every key in the Map.
    */
    keysOfType(predicate) {
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: map => (0, of_type_1.default)(map.keys(), 'keys', predicate)
        });
    }
    /**
    Test all the values in the Map to match the provided predicate.

    @param predicate - The predicate that should be applied against every value in the Map.
    */
    valuesOfType(predicate) {
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: map => (0, of_type_1.default)(map.values(), 'values', predicate)
        });
    }
    /**
    Test a Map to be empty.
    */
    get empty() {
        return this.addValidator({
            message: (map, label) => `Expected ${label} to be empty, got \`${JSON.stringify([...map])}\``,
            validator: map => map.size === 0
        });
    }
    /**
    Test a Map to be not empty.
    */
    get nonEmpty() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to not be empty`,
            validator: map => map.size > 0
        });
    }
    /**
    Test a Map to be deeply equal to the provided Map.

    @param expected - Expected Map to match.
    */
    deepEqual(expected) {
        return this.addValidator({
            message: (map, label) => `Expected ${label} to be deeply equal to \`${JSON.stringify([...expected])}\`, got \`${JSON.stringify([...map])}\``,
            validator: map => isEqual(map, expected)
        });
    }
}
exports.MapPredicate = MapPredicate;

},{"../utils/has-items":397,"../utils/of-type":401,"./predicate":388,"lodash.isequal":369}],386:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberPredicate = void 0;
const is_1 = require("@sindresorhus/is");
const predicate_1 = require("./predicate");
class NumberPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('number', options);
    }
    /**
    Test a number to be in a specified range.

    @param start - Start of the range.
    @param end - End of the range.
    */
    inRange(start, end) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be in range [${start}..${end}], got ${value}`,
            validator: value => is_1.default.inRange(value, [start, end])
        });
    }
    /**
    Test a number to be greater than the provided value.

    @param number - Minimum value.
    */
    greaterThan(number) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be greater than ${number}, got ${value}`,
            validator: value => value > number
        });
    }
    /**
    Test a number to be greater than or equal to the provided value.

    @param number - Minimum value.
    */
    greaterThanOrEqual(number) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be greater than or equal to ${number}, got ${value}`,
            validator: value => value >= number
        });
    }
    /**
    Test a number to be less than the provided value.

    @param number - Maximum value.
    */
    lessThan(number) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be less than ${number}, got ${value}`,
            validator: value => value < number
        });
    }
    /**
    Test a number to be less than or equal to the provided value.

    @param number - Minimum value.
    */
    lessThanOrEqual(number) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be less than or equal to ${number}, got ${value}`,
            validator: value => value <= number
        });
    }
    /**
    Test a number to be equal to a specified number.

    @param expected - Expected value to match.
    */
    equal(expected) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be equal to ${expected}, got ${value}`,
            validator: value => value === expected
        });
    }
    /**
    Test if a number is an element of the provided list.

    @param list - List of possible values.
    */
    oneOf(list) {
        return this.addValidator({
            message: (value, label) => {
                let printedList = JSON.stringify(list);
                if (list.length > 10) {
                    const overflow = list.length - 10;
                    printedList = JSON.stringify(list.slice(0, 10)).replace(/]$/, `,…+${overflow} more]`);
                }
                return `Expected ${label} to be one of \`${printedList}\`, got ${value}`;
            },
            validator: value => list.includes(value)
        });
    }
    /**
    Test a number to be an integer.
    */
    get integer() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be an integer, got ${value}`,
            validator: value => is_1.default.integer(value)
        });
    }
    /**
    Test a number to be finite.
    */
    get finite() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be finite, got ${value}`,
            validator: value => !is_1.default.infinite(value)
        });
    }
    /**
    Test a number to be infinite.
    */
    get infinite() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be infinite, got ${value}`,
            validator: value => is_1.default.infinite(value)
        });
    }
    /**
    Test a number to be positive.
    */
    get positive() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be positive, got ${value}`,
            validator: value => value > 0
        });
    }
    /**
    Test a number to be negative.
    */
    get negative() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be negative, got ${value}`,
            validator: value => value < 0
        });
    }
    /**
    Test a number to be an integer or infinite.
    */
    get integerOrInfinite() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be an integer or infinite, got ${value}`,
            validator: value => is_1.default.integer(value) || is_1.default.infinite(value)
        });
    }
    /**
    Test a number to be in a valid range for a 8-bit unsigned integer.
    */
    get uint8() {
        return this.integer.inRange(0, 255);
    }
    /**
    Test a number to be in a valid range for a 16-bit unsigned integer.
    */
    get uint16() {
        return this.integer.inRange(0, 65535);
    }
    /**
    Test a number to be in a valid range for a 32-bit unsigned integer.
    */
    get uint32() {
        return this.integer.inRange(0, 4294967295);
    }
    /**
    Test a number to be in a valid range for a 8-bit signed integer.
    */
    get int8() {
        return this.integer.inRange(-128, 127);
    }
    /**
    Test a number to be in a valid range for a 16-bit signed integer.
    */
    get int16() {
        return this.integer.inRange(-32768, 32767);
    }
    /**
    Test a number to be in a valid range for a 32-bit signed integer.
    */
    get int32() {
        return this.integer.inRange(-2147483648, 2147483647);
    }
}
exports.NumberPredicate = NumberPredicate;

},{"./predicate":388,"@sindresorhus/is":40}],387:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectPredicate = void 0;
const is_1 = require("@sindresorhus/is");
const dotProp = require("dot-prop");
const isEqual = require("lodash.isequal");
const has_items_1 = require("../utils/has-items");
const of_type_1 = require("../utils/of-type");
const of_type_deep_1 = require("../utils/of-type-deep");
const match_shape_1 = require("../utils/match-shape");
const predicate_1 = require("./predicate");
class ObjectPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('object', options);
    }
    /**
    Test if an Object is a plain object.
    */
    get plain() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to be a plain object`,
            validator: object => is_1.default.plainObject(object)
        });
    }
    /**
    Test an object to be empty.
    */
    get empty() {
        return this.addValidator({
            message: (object, label) => `Expected ${label} to be empty, got \`${JSON.stringify(object)}\``,
            validator: object => Object.keys(object).length === 0
        });
    }
    /**
    Test an object to be not empty.
    */
    get nonEmpty() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to not be empty`,
            validator: object => Object.keys(object).length > 0
        });
    }
    /**
    Test all the values in the object to match the provided predicate.

    @param predicate - The predicate that should be applied against every value in the object.
    */
    valuesOfType(predicate) {
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: object => (0, of_type_1.default)(Object.values(object), 'values', predicate)
        });
    }
    /**
    Test all the values in the object deeply to match the provided predicate.

    @param predicate - The predicate that should be applied against every value in the object.
    */
    deepValuesOfType(predicate) {
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: object => (0, of_type_deep_1.default)(object, predicate)
        });
    }
    /**
    Test an object to be deeply equal to the provided object.

    @param expected - Expected object to match.
    */
    deepEqual(expected) {
        return this.addValidator({
            message: (object, label) => `Expected ${label} to be deeply equal to \`${JSON.stringify(expected)}\`, got \`${JSON.stringify(object)}\``,
            validator: object => isEqual(object, expected)
        });
    }
    /**
    Test an object to be of a specific instance type.

    @param instance - The expected instance type of the object.
    */
    instanceOf(instance) {
        return this.addValidator({
            message: (object, label) => {
                var _a;
                let { name } = (_a = object === null || object === void 0 ? void 0 : object.constructor) !== null && _a !== void 0 ? _a : {};
                if (!name || name === 'Object') {
                    name = JSON.stringify(object);
                }
                return `Expected ${label} \`${name}\` to be of type \`${instance.name}\``;
            },
            validator: object => object instanceof instance
        });
    }
    /**
    Test an object to include all the provided keys. You can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a key to access nested properties.

    @param keys - The keys that should be present in the object.
    */
    hasKeys(...keys) {
        return this.addValidator({
            message: (_, label, missingKeys) => `Expected ${label} to have keys \`${JSON.stringify(missingKeys)}\``,
            validator: object => (0, has_items_1.default)({
                has: item => dotProp.has(object, item)
            }, keys)
        });
    }
    /**
    Test an object to include any of the provided keys. You can use [dot-notation](https://github.com/sindresorhus/dot-prop) in a key to access nested properties.

    @param keys - The keys that could be a key in the object.
    */
    hasAnyKeys(...keys) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any key of \`${JSON.stringify(keys)}\``,
            validator: object => keys.some(key => dotProp.has(object, key))
        });
    }
    /**
    Test an object to match the `shape` partially. This means that it ignores unexpected properties. The shape comparison is deep.

    The shape is an object which describes how the tested object should look like. The keys are the same as the source object and the values are predicates.

    @param shape - Shape to test the object against.

    @example
    ```
    import ow from 'ow';

    const object = {
        unicorn: '🦄',
        rainbow: '🌈'
    };

    ow(object, ow.object.partialShape({
        unicorn: ow.string
    }));
    ```
    */
    partialShape(shape) {
        return this.addValidator({
            // TODO: Improve this when message handling becomes smarter
            message: (_, label, message) => `${message.replace('Expected', 'Expected property')} in ${label}`,
            validator: object => (0, match_shape_1.partial)(object, shape)
        });
    }
    /**
    Test an object to match the `shape` exactly. This means that will fail if it comes across unexpected properties. The shape comparison is deep.

    The shape is an object which describes how the tested object should look like. The keys are the same as the source object and the values are predicates.

    @param shape - Shape to test the object against.

    @example
    ```
    import ow from 'ow';

    ow({unicorn: '🦄'}, ow.object.exactShape({
        unicorn: ow.string
    }));
    ```
    */
    exactShape(shape) {
        // TODO [typescript@>=5] If higher-kinded types are supported natively by typescript, refactor `addValidator` to use them to avoid the usage of `any`. Otherwise, bump or remove this TODO.
        return this.addValidator({
            // TODO: Improve this when message handling becomes smarter
            message: (_, label, message) => `${message.replace('Expected', 'Expected property')} in ${label}`,
            validator: object => (0, match_shape_1.exact)(object, shape)
        });
    }
}
exports.ObjectPredicate = ObjectPredicate;

},{"../utils/has-items":397,"../utils/match-shape":399,"../utils/of-type":401,"../utils/of-type-deep":400,"./predicate":388,"@sindresorhus/is":40,"dot-prop":360,"lodash.isequal":369}],388:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Predicate = exports.validatorSymbol = void 0;
const is_1 = require("@sindresorhus/is");
const argument_error_1 = require("../argument-error");
const not_1 = require("../operators/not");
const base_predicate_1 = require("./base-predicate");
const generate_argument_error_message_1 = require("../utils/generate-argument-error-message");
/**
@hidden
*/
exports.validatorSymbol = Symbol('validators');
/**
@hidden
*/
class Predicate {
    constructor(type, options = {}) {
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: type
        });
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: options
        });
        Object.defineProperty(this, "context", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {
                validators: []
            }
        });
        this.context = {
            ...this.context,
            ...this.options
        };
        const typeString = this.type.charAt(0).toLowerCase() + this.type.slice(1);
        this.addValidator({
            message: (value, label) => {
                // We do not include type in this label as we do for other messages, because it would be redundant.
                const label_ = label === null || label === void 0 ? void 0 : label.slice(this.type.length + 1);
                // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
                return `Expected ${label_ || 'argument'} to be of type \`${this.type}\` but received type \`${(0, is_1.default)(value)}\``;
            },
            validator: value => is_1.default[typeString](value)
        });
    }
    /**
    @hidden
    */
    [base_predicate_1.testSymbol](value, main, label, idLabel) {
        // Create a map of labels -> received errors.
        const errors = new Map();
        for (const { validator, message } of this.context.validators) {
            if (this.options.optional === true && value === undefined) {
                continue;
            }
            let result;
            try {
                result = validator(value);
            }
            catch (error) {
                // Any errors caught means validators couldn't process the input.
                result = error;
            }
            if (result === true) {
                continue;
            }
            const label2 = is_1.default.function_(label) ? label() : label;
            const labelWithTick = (label2 && idLabel) ? `\`${label2}\`` : label2;
            const label_ = labelWithTick ?
                `${this.type} ${labelWithTick}` :
                this.type;
            const mapKey = label2 || this.type;
            // Get the current errors encountered for this label.
            const currentErrors = errors.get(mapKey);
            // Pre-generate the error message that will be reported to the user.
            const errorMessage = message(value, label_, result);
            // If we already have any errors for this label.
            if (currentErrors) {
                // If we don't already have this error logged, add it.
                currentErrors.add(errorMessage);
            }
            else {
                // Set this label and error in the full map.
                errors.set(mapKey, new Set([errorMessage]));
            }
        }
        // If we have any errors to report, throw.
        if (errors.size > 0) {
            // Generate the `error.message` property.
            const message = (0, generate_argument_error_message_1.generateArgumentErrorMessage)(errors);
            throw new argument_error_1.ArgumentError(message, main, errors);
        }
    }
    /**
    @hidden
    */
    get [exports.validatorSymbol]() {
        return this.context.validators;
    }
    /**
    Invert the following validators.
    */
    get not() {
        return (0, not_1.not)(this);
    }
    /**
    Test if the value matches a custom validation function. The validation function should return an object containing a `validator` and `message`. If the `validator` is `false`, the validation fails and the `message` will be used as error message. If the `message` is a function, the function is invoked with the `label` as argument to let you further customize the error message.

    @param customValidator - Custom validation function.
    */
    validate(customValidator) {
        return this.addValidator({
            message: (_, label, error) => typeof error === 'string' ?
                `(${label}) ${error}` :
                error(label),
            validator: value => {
                const { message, validator } = customValidator(value);
                if (validator) {
                    return true;
                }
                return message;
            }
        });
    }
    /**
    Test if the value matches a custom validation function. The validation function should return `true` if the value passes the function. If the function either returns `false` or a string, the function fails and the string will be used as error message.

    @param validator - Validation function.
    */
    is(validator) {
        return this.addValidator({
            message: (value, label, error) => (error ?
                `(${label}) ${error}` :
                `Expected ${label} \`${value}\` to pass custom validation function`),
            validator
        });
    }
    /**
    Provide a new error message to be thrown when the validation fails.

    @param newMessage - Either a string containing the new message or a function returning the new message.

    @example
    ```
    ow('🌈', 'unicorn', ow.string.equals('🦄').message('Expected unicorn, got rainbow'));
    //=> ArgumentError: Expected unicorn, got rainbow
    ```

    @example
    ```
    ow('🌈', ow.string.minLength(5).message((value, label) => `Expected ${label}, to have a minimum length of 5, got \`${value}\``));
    //=> ArgumentError: Expected string, to be have a minimum length of 5, got `🌈`
    ```
    */
    message(newMessage) {
        const { validators } = this.context;
        validators[validators.length - 1].message = (value, label) => {
            if (typeof newMessage === 'function') {
                return newMessage(value, label);
            }
            return newMessage;
        };
        return this;
    }
    /**
    Register a new validator.

    @param validator - Validator to register.
    */
    addValidator(validator) {
        this.context.validators.push(validator);
        return this;
    }
}
exports.Predicate = Predicate;

},{"../argument-error":371,"../operators/not":374,"../utils/generate-argument-error-message":395,"./base-predicate":379,"@sindresorhus/is":40}],389:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetPredicate = void 0;
const isEqual = require("lodash.isequal");
const has_items_1 = require("../utils/has-items");
const of_type_1 = require("../utils/of-type");
const predicate_1 = require("./predicate");
class SetPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('Set', options);
    }
    /**
    Test a Set to have a specific size.

    @param size - The size of the Set.
    */
    size(size) {
        return this.addValidator({
            message: (set, label) => `Expected ${label} to have size \`${size}\`, got \`${set.size}\``,
            validator: set => set.size === size
        });
    }
    /**
    Test a Set to have a minimum size.

    @param size - The minimum size of the Set.
    */
    minSize(size) {
        return this.addValidator({
            message: (set, label) => `Expected ${label} to have a minimum size of \`${size}\`, got \`${set.size}\``,
            validator: set => set.size >= size,
            negatedMessage: (set, label) => `Expected ${label} to have a maximum size of \`${size - 1}\`, got \`${set.size}\``
        });
    }
    /**
    Test a Set to have a maximum size.

    @param size - The maximum size of the Set.
    */
    maxSize(size) {
        return this.addValidator({
            message: (set, label) => `Expected ${label} to have a maximum size of \`${size}\`, got \`${set.size}\``,
            validator: set => set.size <= size,
            negatedMessage: (set, label) => `Expected ${label} to have a minimum size of \`${size + 1}\`, got \`${set.size}\``
        });
    }
    /**
    Test a Set to include all the provided items. The items are tested by identity, not structure.

    @param items - The items that should be a item in the Set.
    */
    has(...items) {
        return this.addValidator({
            message: (_, label, missingItems) => `Expected ${label} to have items \`${JSON.stringify(missingItems)}\``,
            validator: set => (0, has_items_1.default)(set, items)
        });
    }
    /**
    Test a Set to include any of the provided items. The items are tested by identity, not structure.

    @param items - The items that could be a item in the Set.
    */
    hasAny(...items) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any item of \`${JSON.stringify(items)}\``,
            validator: set => items.some(item => set.has(item))
        });
    }
    /**
    Test all the items in the Set to match the provided predicate.

    @param predicate - The predicate that should be applied against every item in the Set.
    */
    ofType(predicate) {
        return this.addValidator({
            message: (_, label, error) => `(${label}) ${error}`,
            validator: set => (0, of_type_1.default)(set, 'values', predicate)
        });
    }
    /**
    Test a Set to be empty.
    */
    get empty() {
        return this.addValidator({
            message: (set, label) => `Expected ${label} to be empty, got \`${JSON.stringify([...set])}\``,
            validator: set => set.size === 0
        });
    }
    /**
    Test a Set to be not empty.
    */
    get nonEmpty() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to not be empty`,
            validator: set => set.size > 0
        });
    }
    /**
    Test a Set to be deeply equal to the provided Set.

    @param expected - Expected Set to match.
    */
    deepEqual(expected) {
        return this.addValidator({
            message: (set, label) => `Expected ${label} to be deeply equal to \`${JSON.stringify([...expected])}\`, got \`${JSON.stringify([...set])}\``,
            validator: set => isEqual(set, expected)
        });
    }
}
exports.SetPredicate = SetPredicate;

},{"../utils/has-items":397,"../utils/of-type":401,"./predicate":388,"lodash.isequal":369}],390:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringPredicate = void 0;
const is_1 = require("@sindresorhus/is");
const valiDate = require("vali-date");
const predicate_1 = require("./predicate");
class StringPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('string', options);
    }
    /**
    Test a string to have a specific length.

    @param length - The length of the string.
    */
    length(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have length \`${length}\`, got \`${value}\``,
            validator: value => value.length === length
        });
    }
    /**
    Test a string to have a minimum length.

    @param length - The minimum length of the string.
    */
    minLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum length of \`${length}\`, got \`${value}\``,
            validator: value => value.length >= length,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \`${length - 1}\`, got \`${value}\``
        });
    }
    /**
    Test a string to have a maximum length.

    @param length - The maximum length of the string.
    */
    maxLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum length of \`${length}\`, got \`${value}\``,
            validator: value => value.length <= length,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \`${length + 1}\`, got \`${value}\``
        });
    }
    /**
    Test a string against a regular expression.

    @param regex - The regular expression to match the value with.
    */
    matches(regex) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to match \`${regex}\`, got \`${value}\``,
            validator: value => regex.test(value)
        });
    }
    /**
    Test a string to start with a specific value.

    @param searchString - The value that should be the start of the string.
    */
    startsWith(searchString) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to start with \`${searchString}\`, got \`${value}\``,
            validator: value => value.startsWith(searchString)
        });
    }
    /**
    Test a string to end with a specific value.

    @param searchString - The value that should be the end of the string.
    */
    endsWith(searchString) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to end with \`${searchString}\`, got \`${value}\``,
            validator: value => value.endsWith(searchString)
        });
    }
    /**
    Test a string to include a specific value.

    @param searchString - The value that should be included in the string.
    */
    includes(searchString) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to include \`${searchString}\`, got \`${value}\``,
            validator: value => value.includes(searchString)
        });
    }
    /**
    Test if the string is an element of the provided list.

    @param list - List of possible values.
    */
    oneOf(list) {
        return this.addValidator({
            message: (value, label) => {
                let printedList = JSON.stringify(list);
                if (list.length > 10) {
                    const overflow = list.length - 10;
                    printedList = JSON.stringify(list.slice(0, 10)).replace(/]$/, `,…+${overflow} more]`);
                }
                return `Expected ${label} to be one of \`${printedList}\`, got \`${value}\``;
            },
            validator: value => list.includes(value)
        });
    }
    /**
    Test a string to be empty.
    */
    get empty() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be empty, got \`${value}\``,
            validator: value => value === ''
        });
    }
    /**
    Test a string to be not empty.
    */
    get nonEmpty() {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to not be empty`,
            validator: value => value !== ''
        });
    }
    /**
    Test a string to be equal to a specified string.

    @param expected - Expected value to match.
    */
    equals(expected) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be equal to \`${expected}\`, got \`${value}\``,
            validator: value => value === expected
        });
    }
    /**
    Test a string to be alphanumeric.
    */
    get alphanumeric() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be alphanumeric, got \`${value}\``,
            validator: value => /^[a-z\d]+$/i.test(value)
        });
    }
    /**
    Test a string to be alphabetical.
    */
    get alphabetical() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be alphabetical, got \`${value}\``,
            validator: value => /^[a-z]+$/gi.test(value)
        });
    }
    /**
    Test a string to be numeric.
    */
    get numeric() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be numeric, got \`${value}\``,
            validator: value => /^[+-]?\d+$/i.test(value)
        });
    }
    /**
    Test a string to be a valid date.
    */
    get date() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be a date, got \`${value}\``,
            validator: valiDate
        });
    }
    /**
    Test a non-empty string to be lowercase. Matching both alphabetical & numbers.
    */
    get lowercase() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be lowercase, got \`${value}\``,
            validator: value => value.trim() !== '' && value === value.toLowerCase()
        });
    }
    /**
    Test a non-empty string to be uppercase. Matching both alphabetical & numbers.
    */
    get uppercase() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be uppercase, got \`${value}\``,
            validator: value => value.trim() !== '' && value === value.toUpperCase()
        });
    }
    /**
    Test a string to be a valid URL.
    */
    get url() {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to be a URL, got \`${value}\``,
            validator: is_1.default.urlString
        });
    }
}
exports.StringPredicate = StringPredicate;

},{"./predicate":388,"@sindresorhus/is":40,"vali-date":434}],391:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedArrayPredicate = void 0;
const predicate_1 = require("./predicate");
class TypedArrayPredicate extends predicate_1.Predicate {
    /**
    Test a typed array to have a specific byte length.

    @param byteLength - The byte length of the typed array.
    */
    byteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength === byteLength
        });
    }
    /**
    Test a typed array to have a minimum byte length.

    @param byteLength - The minimum byte length of the typed array.
    */
    minByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength >= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength - 1}\`, got \`${value.byteLength}\``
        });
    }
    /**
    Test a typed array to have a minimum byte length.

    @param length - The minimum byte length of the typed array.
    */
    maxByteLength(byteLength) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum byte length of \`${byteLength}\`, got \`${value.byteLength}\``,
            validator: value => value.byteLength <= byteLength,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \`${byteLength + 1}\`, got \`${value.byteLength}\``
        });
    }
    /**
    Test a typed array to have a specific length.

    @param length - The length of the typed array.
    */
    length(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have length \`${length}\`, got \`${value.length}\``,
            validator: value => value.length === length
        });
    }
    /**
    Test a typed array to have a minimum length.

    @param length - The minimum length of the typed array.
    */
    minLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a minimum length of \`${length}\`, got \`${value.length}\``,
            validator: value => value.length >= length,
            negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \`${length - 1}\`, got \`${value.length}\``
        });
    }
    /**
    Test a typed array to have a maximum length.

    @param length - The maximum length of the typed array.
    */
    maxLength(length) {
        return this.addValidator({
            message: (value, label) => `Expected ${label} to have a maximum length of \`${length}\`, got \`${value.length}\``,
            validator: value => value.length <= length,
            negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \`${length + 1}\`, got \`${value.length}\``
        });
    }
}
exports.TypedArrayPredicate = TypedArrayPredicate;

},{"./predicate":388}],392:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeakMapPredicate = void 0;
const has_items_1 = require("../utils/has-items");
const predicate_1 = require("./predicate");
class WeakMapPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('WeakMap', options);
    }
    /**
    Test a WeakMap to include all the provided keys. The keys are tested by identity, not structure.

    @param keys - The keys that should be a key in the WeakMap.
    */
    hasKeys(...keys) {
        return this.addValidator({
            message: (_, label, missingKeys) => `Expected ${label} to have keys \`${JSON.stringify(missingKeys)}\``,
            validator: map => (0, has_items_1.default)(map, keys)
        });
    }
    /**
    Test a WeakMap to include any of the provided keys. The keys are tested by identity, not structure.

    @param keys - The keys that could be a key in the WeakMap.
    */
    hasAnyKeys(...keys) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any key of \`${JSON.stringify(keys)}\``,
            validator: map => keys.some(key => map.has(key))
        });
    }
}
exports.WeakMapPredicate = WeakMapPredicate;

},{"../utils/has-items":397,"./predicate":388}],393:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeakSetPredicate = void 0;
const has_items_1 = require("../utils/has-items");
const predicate_1 = require("./predicate");
class WeakSetPredicate extends predicate_1.Predicate {
    /**
    @hidden
    */
    constructor(options) {
        super('WeakSet', options);
    }
    /**
    Test a WeakSet to include all the provided items. The items are tested by identity, not structure.

    @param items - The items that should be a item in the WeakSet.
    */
    has(...items) {
        return this.addValidator({
            message: (_, label, missingItems) => `Expected ${label} to have items \`${JSON.stringify(missingItems)}\``,
            validator: set => (0, has_items_1.default)(set, items)
        });
    }
    /**
    Test a WeakSet to include any of the provided items. The items are tested by identity, not structure.

    @param items - The items that could be a item in the WeakSet.
    */
    hasAny(...items) {
        return this.addValidator({
            message: (_, label) => `Expected ${label} to have any item of \`${JSON.stringify(items)}\``,
            validator: set => items.some(item => set.has(item))
        });
    }
}
exports.WeakSetPredicate = WeakSetPredicate;

},{"../utils/has-items":397,"./predicate":388}],394:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_predicate_1 = require("./predicates/base-predicate");
/**
Validate the value against the provided predicate.

@hidden

@param value - Value to test.
@param label - Label which should be used in error messages.
@param predicate - Predicate to test to value against.
@param idLabel - If true, the label is a variable or type. Default: true.
*/
function test(value, label, predicate, idLabel = true) {
    predicate[base_predicate_1.testSymbol](value, test, label, idLabel);
}
exports.default = test;

},{"./predicates/base-predicate":379}],395:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateArgumentErrorMessage = void 0;
/**
Generates a complete message from all errors generated by predicates.

@param errors - The errors generated by the predicates.
@param isAny - If this function is called from the any argument.
@hidden
*/
const generateArgumentErrorMessage = (errors, isAny = false) => {
    const message = [];
    const errorArray = [...errors.entries()];
    const anyErrorWithoutOneItemOnly = errorArray.some(([, array]) => array.size !== 1);
    // If only one error "key" is present, enumerate all of those errors only.
    if (errorArray.length === 1) {
        const [, returnedErrors] = errorArray[0];
        if (!isAny && returnedErrors.size === 1) {
            const [errorMessage] = returnedErrors;
            return errorMessage;
        }
        for (const entry of returnedErrors) {
            message.push(`${isAny ? '  - ' : ''}${entry}`);
        }
        return message.join('\n');
    }
    // If every predicate returns just one error, enumerate them as is.
    if (!anyErrorWithoutOneItemOnly) {
        return errorArray.map(([, [item]]) => `  - ${item}`).join('\n');
    }
    // Else, iterate through all the errors and enumerate them.
    for (const [key, value] of errorArray) {
        message.push(`Errors from the "${key}" predicate:`);
        for (const entry of value) {
            message.push(`  - ${entry}`);
        }
    }
    return message.join('\n');
};
exports.generateArgumentErrorMessage = generateArgumentErrorMessage;

},{}],396:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateStackTrace = void 0;
/**
Generates a useful stacktrace that points to the user's code where the error happened on platforms without the `Error.captureStackTrace()` method.

@hidden
*/
const generateStackTrace = () => {
    const stack = new RangeError('INTERNAL_OW_ERROR').stack;
    return stack;
};
exports.generateStackTrace = generateStackTrace;

},{}],397:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
Retrieve the missing values in a collection based on an array of items.

@hidden

@param source - Source collection to search through.
@param items - Items to search for.
@param maxValues - Maximum number of values after the search process is stopped. Default: 5.
*/
exports.default = (source, items, maxValues = 5) => {
    const missingValues = [];
    for (const value of items) {
        if (source.has(value)) {
            continue;
        }
        missingValues.push(value);
        if (missingValues.length === maxValues) {
            return missingValues;
        }
    }
    return missingValues.length === 0 ? true : missingValues;
};

},{}],398:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inferLabel = void 0;
const inferLabel = () => { };
exports.inferLabel = inferLabel;

},{}],399:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exact = exports.partial = void 0;
const is_1 = require("@sindresorhus/is");
const test_1 = require("../test");
const base_predicate_1 = require("../predicates/base-predicate");
/**
Test if the `object` matches the `shape` partially.

@hidden

@param object - Object to test against the provided shape.
@param shape - Shape to test the object against.
@param parent - Name of the parent property.
*/
function partial(object, shape, parent) {
    try {
        for (const key of Object.keys(shape)) {
            const label = parent ? `${parent}.${key}` : key;
            if ((0, base_predicate_1.isPredicate)(shape[key])) {
                (0, test_1.default)(object[key], label, shape[key]);
            }
            else if (is_1.default.plainObject(shape[key])) {
                const result = partial(object[key], shape[key], label);
                if (result !== true) {
                    return result;
                }
            }
        }
        return true;
    }
    catch (error) {
        return error.message;
    }
}
exports.partial = partial;
/**
Test if the `object` matches the `shape` exactly.

@hidden

@param object - Object to test against the provided shape.
@param shape - Shape to test the object against.
@param parent - Name of the parent property.
*/
function exact(object, shape, parent, isArray) {
    try {
        const objectKeys = new Set(Object.keys(object));
        for (const key of Object.keys(shape)) {
            objectKeys.delete(key);
            const label = parent ? `${parent}.${key}` : key;
            if ((0, base_predicate_1.isPredicate)(shape[key])) {
                (0, test_1.default)(object[key], label, shape[key]);
            }
            else if (is_1.default.plainObject(shape[key])) {
                if (!Object.prototype.hasOwnProperty.call(object, key)) {
                    return `Expected \`${label}\` to exist`;
                }
                const result = exact(object[key], shape[key], label);
                if (result !== true) {
                    return result;
                }
            }
        }
        if (objectKeys.size > 0) {
            const firstKey = [...objectKeys.keys()][0];
            const label = parent ? `${parent}.${firstKey}` : firstKey;
            return `Did not expect ${isArray ? 'element' : 'property'} \`${label}\` to exist, got \`${object[firstKey]}\``;
        }
        return true;
    }
    catch (error) {
        return error.message;
    }
}
exports.exact = exact;

},{"../predicates/base-predicate":379,"../test":394,"@sindresorhus/is":40}],400:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_1 = require("@sindresorhus/is");
const test_1 = require("../test");
const ofTypeDeep = (object, predicate) => {
    if (!is_1.default.plainObject(object)) {
        (0, test_1.default)(object, 'deep values', predicate, false);
        return true;
    }
    return Object.values(object).every(value => ofTypeDeep(value, predicate));
};
/**
Test all the values in the object against a provided predicate.

@hidden

@param predicate - Predicate to test every value in the given object against.
*/
exports.default = (object, predicate) => {
    try {
        return ofTypeDeep(object, predicate);
    }
    catch (error) {
        return error.message;
    }
};

},{"../test":394,"@sindresorhus/is":40}],401:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const test_1 = require("../test");
/**
Test all the values in the collection against a provided predicate.

@hidden
@param source Source collection to test.
@param name The name to call the collection of values, such as `values` or `keys`.
@param predicate Predicate to test every item in the source collection against.
*/
exports.default = (source, name, predicate) => {
    try {
        for (const item of source) {
            (0, test_1.default)(item, name, predicate, false);
        }
        return true;
    }
    catch (error) {
        return error.message;
    }
};

},{"../test":394}],402:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = () => Math.random().toString(16).slice(2);

},{}],403:[function(require,module,exports){
(function (process,global){(function (){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof global === "object" ? global :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":9}],404:[function(require,module,exports){
void function(global) {

  'use strict';

  //  ValueError :: String -> Error
  function ValueError(message) {
    var err = new Error(message);
    err.name = 'ValueError';
    return err;
  }

  //  create :: Object -> String,*... -> String
  function create(transformers) {
    return function(template) {
      var args = Array.prototype.slice.call(arguments, 1);
      var idx = 0;
      var state = 'UNDEFINED';

      return template.replace(
        /([{}])\1|[{](.*?)(?:!(.+?))?[}]/g,
        function(match, literal, _key, xf) {
          if (literal != null) {
            return literal;
          }
          var key = _key;
          if (key.length > 0) {
            if (state === 'IMPLICIT') {
              throw ValueError('cannot switch from ' +
                               'implicit to explicit numbering');
            }
            state = 'EXPLICIT';
          } else {
            if (state === 'EXPLICIT') {
              throw ValueError('cannot switch from ' +
                               'explicit to implicit numbering');
            }
            state = 'IMPLICIT';
            key = String(idx);
            idx += 1;
          }

          //  1.  Split the key into a lookup path.
          //  2.  If the first path component is not an index, prepend '0'.
          //  3.  Reduce the lookup path to a single result. If the lookup
          //      succeeds the result is a singleton array containing the
          //      value at the lookup path; otherwise the result is [].
          //  4.  Unwrap the result by reducing with '' as the default value.
          var path = key.split('.');
          var value = (/^\d+$/.test(path[0]) ? path : ['0'].concat(path))
            .reduce(function(maybe, key) {
              return maybe.reduce(function(_, x) {
                return x != null && key in Object(x) ?
                  [typeof x[key] === 'function' ? x[key]() : x[key]] :
                  [];
              }, []);
            }, [args])
            .reduce(function(_, x) { return x; }, '');

          if (xf == null) {
            return value;
          } else if (Object.prototype.hasOwnProperty.call(transformers, xf)) {
            return transformers[xf](value);
          } else {
            throw ValueError('no transformer named "' + xf + '"');
          }
        }
      );
    };
  }

  //  format :: String,*... -> String
  var format = create({});

  //  format.create :: Object -> String,*... -> String
  format.create = create;

  //  format.extend :: Object,Object -> ()
  format.extend = function(prototype, transformers) {
    var $format = create(transformers);
    prototype.format = function() {
      var args = Array.prototype.slice.call(arguments);
      args.unshift(this);
      return $format.apply(global, args);
    };
  };

  /* istanbul ignore else */
  if (typeof module !== 'undefined') {
    module.exports = format;
  } else if (typeof define === 'function' && define.amd) {
    define(function() { return format; });
  } else {
    global.format = format;
  }

}.call(this, this);

},{}],405:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var property_definition_1 = require("./property-definition");
var ObjectDefinition = /** @class */ (function () {
    function ObjectDefinition() {
        this.ctr = function () { };
        this.beforeDeserialized = function () { };
        this.onDeserialized = function () { };
        this.properties = new Map();
    }
    ObjectDefinition.prototype.getProperty = function (key) {
        var property = this.properties.get(key);
        if (!property) {
            property = new property_definition_1.PropertyDefinition();
            this.properties.set(key, property);
        }
        return property;
    };
    return ObjectDefinition;
}());
exports.ObjectDefinition = ObjectDefinition;
exports.objectDefinitions = new Map();
function getDefinition(target) {
    var definition = exports.objectDefinitions.get(target);
    if (!definition) {
        definition = new ObjectDefinition();
        exports.objectDefinitions.set(target, definition);
    }
    return definition;
}
exports.getDefinition = getDefinition;
function getInheritanceChain(type) {
    if (!type) {
        return [];
    }
    var parent = Object.getPrototypeOf(type);
    return [type.constructor].concat(getInheritanceChain(parent));
}
exports.getInheritanceChain = getInheritanceChain;
function getChildClassDefinitions(parentType) {
    var childDefs = [];
    exports.objectDefinitions.forEach(function (def, type) {
        var superClass = Object.getPrototypeOf(type.prototype).constructor;
        if (superClass === parentType) {
            childDefs.push([type, def]);
        }
    });
    return childDefs;
}
function getTypedInheritanceChain(type, object) {
    var parentDef = exports.objectDefinitions.get(type);
    var childDefs = [];
    if (object && parentDef && parentDef.discriminatorProperty) {
        childDefs = childDefs.concat(getChildClassDefinitions(type));
    }
    var actualType;
    while (childDefs.length !== 0 && !actualType) {
        var _a = childDefs.shift(), t = _a[0], def = _a[1]; // We are checking the length in the loop so an assertion here is fine.
        if (def.hasOwnProperty("discriminatorValue")) {
            if (object && parentDef && def.discriminatorValue === object[parentDef.discriminatorProperty]) {
                if (def.hasOwnProperty("discriminatorProperty")) {
                    return getTypedInheritanceChain(t, object);
                }
                actualType = t;
            }
        }
        else {
            childDefs = childDefs.concat(getChildClassDefinitions(t));
        }
    }
    if (!actualType) {
        actualType = type;
    }
    var inheritanceChain = new Set(getInheritanceChain(Object.create(actualType.prototype)));
    return Array.from(inheritanceChain).filter(function (t) { return exports.objectDefinitions.has(t); });
}
exports.getTypedInheritanceChain = getTypedInheritanceChain;

},{"./property-definition":406}],406:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PropertyDefinition = /** @class */ (function () {
    function PropertyDefinition() {
        this.array = false;
        this.set = false;
        this.readonly = false;
        this.writeonly = false;
    }
    return PropertyDefinition;
}());
exports.PropertyDefinition = PropertyDefinition;

},{}],407:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BufferConverter = /** @class */ (function () {
    function BufferConverter(encoding) {
        if (encoding === void 0) { encoding = "json"; }
        this._encoding = encoding;
    }
    BufferConverter.prototype.serialize = function (property) {
        if (this._encoding === "json") {
            return property.toJSON();
        }
        return property.toString(this._encoding);
    };
    BufferConverter.prototype.deserialize = function (value) {
        if (this._encoding === "json") {
            return Buffer.from(value.data);
        }
        return Buffer.from(value, this._encoding);
    };
    return BufferConverter;
}());
exports.BufferConverter = BufferConverter;

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":3}],408:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_converter_1 = require("./date-converter");
var buffer_converter_1 = require("./buffer-converter");
exports.propertyConverters = new Map();
// Only import Buffer code if running in NodeJS
if (typeof window === "undefined") {
    exports.propertyConverters.set(Buffer, new buffer_converter_1.BufferConverter());
}
exports.propertyConverters.set(Date, new date_converter_1.DateConverter());

}).call(this)}).call(this,require("buffer").Buffer)
},{"./buffer-converter":407,"./date-converter":409,"buffer":3}],409:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DateConverter = /** @class */ (function () {
    function DateConverter() {
    }
    DateConverter.prototype.serialize = function (property) {
        return property.toString();
    };
    DateConverter.prototype.deserialize = function (value) {
        return new Date(value);
    };
    return DateConverter;
}());
exports.DateConverter = DateConverter;

},{}],410:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./converter"));
__export(require("./buffer-converter"));
__export(require("./date-converter"));

},{"./buffer-converter":407,"./converter":408,"./date-converter":409}],411:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function BeforeDeserialized() {
    return function (target, key) {
        var definition = object_definition_1.getDefinition(target.constructor);
        definition.beforeDeserialized = target[key.toString()];
    };
}
exports.BeforeDeserialized = BeforeDeserialized;

},{"../classes/object-definition":405}],412:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./json-object"));
__export(require("./json-property"));
__export(require("./json-type"));
__export(require("./json-element-type"));
__export(require("./json-converter"));
__export(require("./json-readonly"));
__export(require("./json-writeonly"));
__export(require("./json-discriminator-property"));
__export(require("./json-discriminator-value"));
__export(require("./json-constructor"));
__export(require("./before-deserialized"));
__export(require("./on-deserialized"));

},{"./before-deserialized":411,"./json-constructor":413,"./json-converter":414,"./json-discriminator-property":415,"./json-discriminator-value":416,"./json-element-type":417,"./json-object":418,"./json-property":419,"./json-readonly":420,"./json-type":421,"./json-writeonly":422,"./on-deserialized":423}],413:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonConstructor() {
    return function (target, key) {
        var definition = object_definition_1.getDefinition(target.constructor);
        definition.ctr = target[key.toString()];
    };
}
exports.JsonConstructor = JsonConstructor;

},{"../classes/object-definition":405}],414:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonConverter(converter) {
    return function (target, key) {
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        if (typeof converter === "function") {
            property.converter = new converter();
        }
        else {
            property.converter = converter;
        }
    };
}
exports.JsonConverter = JsonConverter;

},{"../classes/object-definition":405}],415:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonDiscriminatorProperty(property) {
    return function (constructor) {
        object_definition_1.getDefinition(constructor).discriminatorProperty = property;
    };
}
exports.JsonDiscriminatorProperty = JsonDiscriminatorProperty;

},{"../classes/object-definition":405}],416:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonDiscriminatorValue(value) {
    return function (constructor) {
        object_definition_1.getDefinition(constructor).discriminatorValue = value;
    };
}
exports.JsonDiscriminatorValue = JsonDiscriminatorValue;

},{"../classes/object-definition":405}],417:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonElementType(type) {
    return function (target, key) {
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        property.type = type;
    };
}
exports.JsonElementType = JsonElementType;

},{"../classes/object-definition":405}],418:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonObject() {
    return function (constructor) {
        object_definition_1.getDefinition(constructor);
    };
}
exports.JsonObject = JsonObject;

},{"../classes/object-definition":405}],419:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonProperty(propertyName) {
    return function (target, key) {
        var type = Reflect.getMetadata("design:type", target, key.toString());
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        property.serializedName = propertyName || key.toString();
        property.array = type === Array;
        property.set = type === Set;
        if (!property.array && !property.set && !property.type) {
            property.type = type;
        }
    };
}
exports.JsonProperty = JsonProperty;

},{"../classes/object-definition":405,"reflect-metadata":403}],420:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonReadonly() {
    return function (target, key) {
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        property.readonly = true;
    };
}
exports.JsonReadonly = JsonReadonly;

},{"../classes/object-definition":405}],421:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonType(type) {
    return function (target, key) {
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        property.type = type;
    };
}
exports.JsonType = JsonType;

},{"../classes/object-definition":405}],422:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function JsonWriteonly() {
    return function (target, key) {
        var property = object_definition_1.getDefinition(target.constructor).getProperty(key.toString());
        property.writeonly = true;
    };
}
exports.JsonWriteonly = JsonWriteonly;

},{"../classes/object-definition":405}],423:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
// tslint:disable:ext-variable-name only-arrow-functions
function OnDeserialized() {
    return function (target, key) {
        var definition = object_definition_1.getDefinition(target.constructor);
        definition.onDeserialized = target[key.toString()];
    };
}
exports.OnDeserialized = OnDeserialized;

},{"../classes/object-definition":405}],424:[function(require,module,exports){
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./decorators"));
__export(require("./converters"));
// Export both as JSON name but also local name.
var ta_json_1 = require("./ta-json");
exports.JSON = ta_json_1.TaJson;
exports.TaJson = ta_json_1.TaJson;

},{"./converters":410,"./decorators":412,"./ta-json":427}],425:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var object_definition_1 = require("../classes/object-definition");
var converter_1 = require("../converters/converter");
function deserialize(object, type, options) {
    if (options === void 0) { options = { runConstructor: false }; }
    if (object && object.constructor === Array) {
        return object.map(function (o) { return deserializeRootObject(o, type, options); });
    }
    return deserializeRootObject(object, type, options);
}
exports.deserialize = deserialize;
function deserializeRootObject(object, objectType, options) {
    if (objectType === void 0) { objectType = Object; }
    if (!object_definition_1.objectDefinitions.has(objectType)) {
        return object;
    }
    var values = object;
    var _a = object_definition_1.getTypedInheritanceChain(objectType, values), type = _a[0], superTypes = _a.slice(1);
    var output = Object.create(type.prototype);
    var definitions = superTypes.reverse().concat([type]).map(function (t) { return object_definition_1.objectDefinitions.get(t); }).filter(function (t) { return !!t; });
    definitions.forEach(function (d) {
        if (options.runConstructor) {
            d.ctr.call(output);
        }
        d.beforeDeserialized.call(output);
        d.properties.forEach(function (p, key) {
            if (!p.type) {
                throw new Error("Cannot deserialize property '" + key + "' without type!");
            }
            var value = values[p.serializedName];
            if (value == undefined || p.readonly) {
                return;
            }
            if (p.array || p.set) {
                output[key] = deserializeArray(value, p, options);
                if (p.set) {
                    output[key] = new Set(output[key]);
                }
                return;
            }
            output[key] = deserializeObject(value, p, options);
        });
        d.onDeserialized.call(output);
    });
    return output;
}
function deserializeArray(array, definition, options) {
    return array.map(function (v) { return deserializeObject(v, definition, options); });
}
function deserializeObject(object, definition, options) {
    var primitive = definition.type === String || definition.type === Boolean || definition.type === Number;
    var value = object;
    var converter = definition.converter || converter_1.propertyConverters.get(definition.type);
    if (converter) {
        return converter.deserialize(value);
    }
    if (!primitive) {
        var objDefinition = object_definition_1.objectDefinitions.get(definition.type);
        if (objDefinition) {
            return deserialize(value, definition.type);
        }
    }
    return value;
}

},{"../classes/object-definition":405,"../converters/converter":408}],426:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var converter_1 = require("./../converters/converter");
var object_definition_1 = require("../classes/object-definition");
function serialize(value, type) {
    if (value.constructor === Array) {
        return value.map(function (o) { return serializeRootObject(o, type); });
    }
    return serializeRootObject(value, type);
}
exports.serialize = serialize;
function serializeRootObject(object, type) {
    if (type === void 0) { type = Object.getPrototypeOf(object).constructor; }
    var inheritanceChain = object_definition_1.getTypedInheritanceChain(type);
    if (inheritanceChain.length === 0) {
        return object;
    }
    var definitions = inheritanceChain
        .map(function (t) { return object_definition_1.objectDefinitions.get(t); })
        .filter(function (t) { return !!t; }); // Typescript doesn't yet support the undefined filter
    var output = {};
    definitions.forEach(function (d) {
        d.properties.forEach(function (p, key) {
            if (!p.type) {
                throw new Error("Cannot serialize property '" + key + "' without type!");
            }
            var value = object[key];
            if (value == undefined || p.writeonly) {
                return;
            }
            if (p.set) {
                output[p.serializedName] = serializeArray(Array.from(value || []), p);
                return;
            }
            if (p.array) {
                output[p.serializedName] = serializeArray(value, p);
                return;
            }
            output[p.serializedName] = serializeObject(value, p);
        });
    });
    return output;
}
function serializeArray(array, definition) {
    return array.map(function (v) { return serializeObject(v, definition); });
}
function serializeObject(object, definition) {
    var primitive = definition.type === String || definition.type === Boolean || definition.type === Number;
    var value = object;
    var converter = definition.converter || converter_1.propertyConverters.get(definition.type);
    if (converter) {
        return converter.serialize(value);
    }
    if (!primitive) {
        var objDefinition = object_definition_1.objectDefinitions.get(definition.type);
        if (objDefinition) {
            if (value instanceof definition.type) {
                return serialize(value);
            }
            return serialize(value, definition.type);
        }
    }
    return value;
}

},{"../classes/object-definition":405,"./../converters/converter":408}],427:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var serialize_1 = require("./methods/serialize");
var deserialize_1 = require("./methods/deserialize");
var TaJson = /** @class */ (function () {
    function TaJson() {
    }
    TaJson.deserialize = function (object, type, options) {
        return deserialize_1.deserialize(object, type, options);
    };
    TaJson.parse = function (json, type, options) {
        return this.deserialize(JSON.parse(json), type, options);
    };
    TaJson.serialize = function (value) {
        return serialize_1.serialize(value);
    };
    TaJson.stringify = function (object) {
        return JSON.stringify(this.serialize(object));
    };
    return TaJson;
}());
exports.TaJson = TaJson;

},{"./methods/deserialize":425,"./methods/serialize":426}],428:[function(require,module,exports){
(function (global){(function (){
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global global, define, System, Reflect, Promise */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __classPrivateFieldIn;
var __createBinding;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
});

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],429:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.IPv6 = factory(root);
  }
}(this, function (root) {
  'use strict';

  /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */

  // save current IPv6 variable, if any
  var _IPv6 = root && root.IPv6;

  function bestPresentation(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
      // must have been ::
      // remove first two items
      segments.shift();
      segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
      // must have been ::xxxx
      // remove the first item
      segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
      // must have been xxxx::
      segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
      // found a "." which means IPv4
      total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
      if (segments[pos] === '') {
        break;
      }
    }

    if (pos < total) {
      segments.splice(pos, 1, '0000');
      while (segments.length < total) {
        segments.splice(pos, 0, '0000');
      }
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
      _segments = segments[i].split('');
      for (var j = 0; j < 3 ; j++) {
        if (_segments[0] === '0' && _segments.length > 1) {
          _segments.splice(0,1);
        } else {
          break;
        }
      }

      segments[i] = _segments.join('');
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
      if (inzeroes) {
        if (segments[i] === '0') {
          _current += 1;
        } else {
          inzeroes = false;
          if (_current > _best) {
            best = current;
            _best = _current;
          }
        }
      } else {
        if (segments[i] === '0') {
          inzeroes = true;
          current = i;
          _current = 1;
        }
      }
    }

    if (_current > _best) {
      best = current;
      _best = _current;
    }

    if (_best > 1) {
      segments.splice(best, _best, '');
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
      result = ':';
    }

    for (i = 0; i < length; i++) {
      result += segments[i];
      if (i === length - 1) {
        break;
      }

      result += ':';
    }

    if (segments[length - 1] === '') {
      result += ':';
    }

    return result;
  }

  function noConflict() {
    /*jshint validthis: true */
    if (root.IPv6 === this) {
      root.IPv6 = _IPv6;
    }

    return this;
  }

  return {
    best: bestPresentation,
    noConflict: noConflict
  };
}));

},{}],430:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */

(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory);
  } else {
    // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
  }
}(this, function (root) {
  'use strict';

  // save current SecondLevelDomains variable, if any
  var _SecondLevelDomains = root && root.SecondLevelDomains;

  var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
      'ac':' com gov mil net org ',
      'ae':' ac co gov mil name net org pro sch ',
      'af':' com edu gov net org ',
      'al':' com edu gov mil net org ',
      'ao':' co ed gv it og pb ',
      'ar':' com edu gob gov int mil net org tur ',
      'at':' ac co gv or ',
      'au':' asn com csiro edu gov id net org ',
      'ba':' co com edu gov mil net org rs unbi unmo unsa untz unze ',
      'bb':' biz co com edu gov info net org store tv ',
      'bh':' biz cc com edu gov info net org ',
      'bn':' com edu gov net org ',
      'bo':' com edu gob gov int mil net org tv ',
      'br':' adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ',
      'bs':' com edu gov net org ',
      'bz':' du et om ov rg ',
      'ca':' ab bc mb nb nf nl ns nt nu on pe qc sk yk ',
      'ck':' biz co edu gen gov info net org ',
      'cn':' ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ',
      'co':' com edu gov mil net nom org ',
      'cr':' ac c co ed fi go or sa ',
      'cy':' ac biz com ekloges gov ltd name net org parliament press pro tm ',
      'do':' art com edu gob gov mil net org sld web ',
      'dz':' art asso com edu gov net org pol ',
      'ec':' com edu fin gov info med mil net org pro ',
      'eg':' com edu eun gov mil name net org sci ',
      'er':' com edu gov ind mil net org rochest w ',
      'es':' com edu gob nom org ',
      'et':' biz com edu gov info name net org ',
      'fj':' ac biz com info mil name net org pro ',
      'fk':' ac co gov net nom org ',
      'fr':' asso com f gouv nom prd presse tm ',
      'gg':' co net org ',
      'gh':' com edu gov mil org ',
      'gn':' ac com gov net org ',
      'gr':' com edu gov mil net org ',
      'gt':' com edu gob ind mil net org ',
      'gu':' com edu gov net org ',
      'hk':' com edu gov idv net org ',
      'hu':' 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ',
      'id':' ac co go mil net or sch web ',
      'il':' ac co gov idf k12 muni net org ',
      'in':' ac co edu ernet firm gen gov i ind mil net nic org res ',
      'iq':' com edu gov i mil net org ',
      'ir':' ac co dnssec gov i id net org sch ',
      'it':' edu gov ',
      'je':' co net org ',
      'jo':' com edu gov mil name net org sch ',
      'jp':' ac ad co ed go gr lg ne or ',
      'ke':' ac co go info me mobi ne or sc ',
      'kh':' com edu gov mil net org per ',
      'ki':' biz com de edu gov info mob net org tel ',
      'km':' asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ',
      'kn':' edu gov net org ',
      'kr':' ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ',
      'kw':' com edu gov net org ',
      'ky':' com edu gov net org ',
      'kz':' com edu gov mil net org ',
      'lb':' com edu gov net org ',
      'lk':' assn com edu gov grp hotel int ltd net ngo org sch soc web ',
      'lr':' com edu gov net org ',
      'lv':' asn com conf edu gov id mil net org ',
      'ly':' com edu gov id med net org plc sch ',
      'ma':' ac co gov m net org press ',
      'mc':' asso tm ',
      'me':' ac co edu gov its net org priv ',
      'mg':' com edu gov mil nom org prd tm ',
      'mk':' com edu gov inf name net org pro ',
      'ml':' com edu gov net org presse ',
      'mn':' edu gov org ',
      'mo':' com edu gov net org ',
      'mt':' com edu gov net org ',
      'mv':' aero biz com coop edu gov info int mil museum name net org pro ',
      'mw':' ac co com coop edu gov int museum net org ',
      'mx':' com edu gob net org ',
      'my':' com edu gov mil name net org sch ',
      'nf':' arts com firm info net other per rec store web ',
      'ng':' biz com edu gov mil mobi name net org sch ',
      'ni':' ac co com edu gob mil net nom org ',
      'np':' com edu gov mil net org ',
      'nr':' biz com edu gov info net org ',
      'om':' ac biz co com edu gov med mil museum net org pro sch ',
      'pe':' com edu gob mil net nom org sld ',
      'ph':' com edu gov i mil net ngo org ',
      'pk':' biz com edu fam gob gok gon gop gos gov net org web ',
      'pl':' art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ',
      'pr':' ac biz com edu est gov info isla name net org pro prof ',
      'ps':' com edu gov net org plo sec ',
      'pw':' belau co ed go ne or ',
      'ro':' arts com firm info nom nt org rec store tm www ',
      'rs':' ac co edu gov in org ',
      'sb':' com edu gov net org ',
      'sc':' com edu gov net org ',
      'sh':' co com edu gov net nom org ',
      'sl':' com edu gov net org ',
      'st':' co com consulado edu embaixada gov mil net org principe saotome store ',
      'sv':' com edu gob org red ',
      'sz':' ac co org ',
      'tr':' av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ',
      'tt':' aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ',
      'tw':' club com ebiz edu game gov idv mil net org ',
      'mu':' ac co com gov net or org ',
      'mz':' ac co edu gov org ',
      'na':' co com ',
      'nz':' ac co cri geek gen govt health iwi maori mil net org parliament school ',
      'pa':' abo ac com edu gob ing med net nom org sld ',
      'pt':' com edu gov int net nome org publ ',
      'py':' com edu gov mil net org ',
      'qa':' com edu gov mil net org ',
      're':' asso com nom ',
      'ru':' ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ',
      'rw':' ac co com edu gouv gov int mil net ',
      'sa':' com edu gov med net org pub sch ',
      'sd':' com edu gov info med net org tv ',
      'se':' a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ',
      'sg':' com edu gov idn net org per ',
      'sn':' art com edu gouv org perso univ ',
      'sy':' com edu gov mil net news org ',
      'th':' ac co go in mi net or ',
      'tj':' ac biz co com edu go gov info int mil name net nic org test web ',
      'tn':' agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ',
      'tz':' ac co go ne or ',
      'ua':' biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ',
      'ug':' ac co go ne or org sc ',
      'uk':' ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ',
      'us':' dni fed isa kids nsn ',
      'uy':' com edu gub mil net org ',
      've':' co com edu gob info mil net org web ',
      'vi':' co com k12 net org ',
      'vn':' ac biz com edu gov health info int name net org pro ',
      'ye':' co com gov ltd me net org plc ',
      'yu':' ac co edu gov org ',
      'za':' ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ',
      'zm':' ac co com edu gov net org sch ',
      // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
      'com': 'ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ',
      'net': 'gb jp se uk ',
      'org': 'ae',
      'de': 'com '
    },
    // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
    // in both performance and memory footprint. No initialization required.
    // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
    // Following methods use lastIndexOf() rather than array.split() in order
    // to avoid any memory allocations.
    has: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') >= 0;
    },
    is: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return false;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset >= 0) {
        return false;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return false;
      }
      return sldList.indexOf(' ' + domain.slice(0, tldOffset) + ' ') >= 0;
    },
    get: function(domain) {
      var tldOffset = domain.lastIndexOf('.');
      if (tldOffset <= 0 || tldOffset >= (domain.length-1)) {
        return null;
      }
      var sldOffset = domain.lastIndexOf('.', tldOffset-1);
      if (sldOffset <= 0 || sldOffset >= (tldOffset-1)) {
        return null;
      }
      var sldList = SLD.list[domain.slice(tldOffset+1)];
      if (!sldList) {
        return null;
      }
      if (sldList.indexOf(' ' + domain.slice(sldOffset+1, tldOffset) + ' ') < 0) {
        return null;
      }
      return domain.slice(sldOffset+1);
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    }
  };

  return SLD;
}));

},{}],431:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
  } else {
    // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
  }
}(this, function (punycode, IPv6, SLD, root) {
  'use strict';
  /*global location, escape, unescape */
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URI variable, if any
  var _URI = root && root.URI;

  function URI(url, base) {
    var _urlSupplied = arguments.length >= 1;
    var _baseSupplied = arguments.length >= 2;

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
      if (_urlSupplied) {
        if (_baseSupplied) {
          return new URI(url, base);
        }

        return new URI(url);
      }

      return new URI();
    }

    if (url === undefined) {
      if (_urlSupplied) {
        throw new TypeError('undefined is not a valid argument for URI');
      }

      if (typeof location !== 'undefined') {
        url = location.href + '';
      } else {
        url = '';
      }
    }

    if (url === null) {
      if (_urlSupplied) {
        throw new TypeError('null is not a valid argument for URI');
      }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
      return this.absoluteTo(base);
    }

    return this;
  }

  function isInteger(value) {
    return /^[0-9]+$/.test(value);
  }

  URI.version = '1.19.11';

  var p = URI.prototype;
  var hasOwn = Object.prototype.hasOwnProperty;

  function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
  }

  function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
      return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
  }

  function isArray(obj) {
    return getType(obj) === 'Array';
  }

  function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (getType(value) === 'RegExp') {
      lookup = null;
    } else if (isArray(value)) {
      for (i = 0, length = value.length; i < length; i++) {
        lookup[value[i]] = true;
      }
    } else {
      lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
      /*jshint laxbreak: true */
      var _match = lookup && lookup[data[i]] !== undefined
        || !lookup && value.test(data[i]);
      /*jshint laxbreak: false */
      if (_match) {
        data.splice(i, 1);
        length--;
        i--;
      }
    }

    return data;
  }

  function arrayContains(list, value) {
    var i, length;

    // value may be string, number, array, regexp
    if (isArray(value)) {
      // Note: this can be optimized to O(n) (instead of current O(m * n))
      for (i = 0, length = value.length; i < length; i++) {
        if (!arrayContains(list, value[i])) {
          return false;
        }
      }

      return true;
    }

    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
      if (_type === 'RegExp') {
        if (typeof list[i] === 'string' && list[i].match(value)) {
          return true;
        }
      } else if (list[i] === value) {
        return true;
      }
    }

    return false;
  }

  function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
      return false;
    }

    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
      return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
      if (one[i] !== two[i]) {
        return false;
      }
    }

    return true;
  }

  function trimSlashes(text) {
    var trim_expression = /^\/+|\/+$/g;
    return text.replace(trim_expression, '');
  }

  URI._parts = function() {
    return {
      protocol: null,
      username: null,
      password: null,
      hostname: null,
      urn: null,
      port: null,
      path: null,
      query: null,
      fragment: null,
      // state
      preventInvalidHostname: URI.preventInvalidHostname,
      duplicateQueryParameters: URI.duplicateQueryParameters,
      escapeQuerySpace: URI.escapeQuerySpace
    };
  };
  // state: throw on invalid hostname
  // see https://github.com/medialize/URI.js/pull/345
  // and https://github.com/medialize/URI.js/issues/354
  URI.preventInvalidHostname = false;
  // state: allow duplicate query parameters (a=1&a=1)
  URI.duplicateQueryParameters = false;
  // state: replaces + with %20 (space in query strings)
  URI.escapeQuerySpace = true;
  // static properties
  URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
  URI.idn_expression = /[^a-z0-9\._-]/i;
  URI.punycode_expression = /(xn--)/i;
  // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
  URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
  // credits to Rich Brown
  // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
  // specification: http://www.ietf.org/rfc/rfc4291.txt
  URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  // expression used is "gruber revised" (@gruber v2) determined to be the
  // best solution in a regex-golf we did a couple of ages ago at
  // * http://mathiasbynens.be/demo/url-regex
  // * http://rodneyrehm.de/t/url-regex.html
  URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
  URI.findUri = {
    // valid "scheme://" or "www."
    start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
    // everything up to the next whitespace
    end: /[\s\r\n]|$/,
    // trim trailing punctuation captured by end RegExp
    trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
    // balanced parens inclusion (), [], {}, <>
    parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g,
  };
  URI.leading_whitespace_expression = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/
  // https://infra.spec.whatwg.org/#ascii-tab-or-newline
  URI.ascii_tab_whitespace = /[\u0009\u000A\u000D]+/g
  // http://www.iana.org/assignments/uri-schemes.html
  // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
  URI.defaultPorts = {
    http: '80',
    https: '443',
    ftp: '21',
    gopher: '70',
    ws: '80',
    wss: '443'
  };
  // list of protocols which always require a hostname
  URI.hostProtocols = [
    'http',
    'https'
  ];

  // allowed hostname characters according to RFC 3986
  // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
  // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _
  URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
  // map DOM Elements to their URI attribute
  URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src', // but only if type="image"
    'audio': 'src',
    'video': 'src'
  };
  URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
      return undefined;
    }

    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
      return undefined;
    }

    return URI.domAttributes[nodeName];
  };

  function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
  }

  // encoding / decoding according to RFC3986
  function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
      .replace(/[!'()*]/g, escapeForDumbFirefox36)
      .replace(/\*/g, '%2A');
  }
  URI.encode = strictEncodeURIComponent;
  URI.decode = decodeURIComponent;
  URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
  };
  URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
  };
  URI.characters = {
    pathname: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
        map: {
          // -._~!'()*
          '%24': '$',
          '%26': '&',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%3A': ':',
          '%40': '@'
        }
      },
      decode: {
        expression: /[\/\?#]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23'
        }
      }
    },
    reserved: {
      encode: {
        // RFC3986 2.1: For consistency, URI producers and normalizers should
        // use uppercase hexadecimal digits for all percent-encodings.
        expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
        map: {
          // gen-delims
          '%3A': ':',
          '%2F': '/',
          '%3F': '?',
          '%23': '#',
          '%5B': '[',
          '%5D': ']',
          '%40': '@',
          // sub-delims
          '%21': '!',
          '%24': '$',
          '%26': '&',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '='
        }
      }
    },
    urnpath: {
      // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
      // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
      // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
      // note that the colon character is not featured in the encoding map; this is because URI.js
      // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
      // should not appear unencoded in a segment itself.
      // See also the note above about RFC3986 and capitalalized hex digits.
      encode: {
        expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
        map: {
          '%21': '!',
          '%24': '$',
          '%27': '\'',
          '%28': '(',
          '%29': ')',
          '%2A': '*',
          '%2B': '+',
          '%2C': ',',
          '%3B': ';',
          '%3D': '=',
          '%40': '@'
        }
      },
      // These characters are the characters called out by RFC2141 as "reserved" characters that
      // should never appear in a URN, plus the colon character (see note above).
      decode: {
        expression: /[\/\?#:]/g,
        map: {
          '/': '%2F',
          '?': '%3F',
          '#': '%23',
          ':': '%3A'
        }
      }
    }
  };
  URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + '');
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
  };
  URI.decodeQuery = function(string, escapeQuerySpace) {
    string += '';
    if (escapeQuerySpace === undefined) {
      escapeQuerySpace = URI.escapeQuerySpace;
    }

    try {
      return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
      // we're not going to mess with weird encodings,
      // give up and return the undecoded original string
      // see https://github.com/medialize/URI.js/issues/87
      // see https://github.com/medialize/URI.js/issues/92
      return string;
    }
  };
  // generate encode/decode path functions
  var _parts = {'encode':'encode', 'decode':'decode'};
  var _part;
  var generateAccessor = function(_group, _part) {
    return function(string) {
      try {
        return URI[_part](string + '').replace(URI.characters[_group][_part].expression, function(c) {
          return URI.characters[_group][_part].map[c];
        });
      } catch (e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
      }
    };
  };

  for (_part in _parts) {
    URI[_part + 'PathSegment'] = generateAccessor('pathname', _parts[_part]);
    URI[_part + 'UrnPathSegment'] = generateAccessor('urnpath', _parts[_part]);
  }

  var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
    return function(string) {
      // Why pass in names of functions, rather than the function objects themselves? The
      // definitions of some functions (but in particular, URI.decode) will occasionally change due
      // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
      // that the functions we use here are "fresh".
      var actualCodingFunc;
      if (!_innerCodingFuncName) {
        actualCodingFunc = URI[_codingFuncName];
      } else {
        actualCodingFunc = function(string) {
          return URI[_codingFuncName](URI[_innerCodingFuncName](string));
        };
      }

      var segments = (string + '').split(_sep);

      for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = actualCodingFunc(segments[i]);
      }

      return segments.join(_sep);
    };
  };

  // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
  URI.decodePath = generateSegmentedPathFunction('/', 'decodePathSegment');
  URI.decodeUrnPath = generateSegmentedPathFunction(':', 'decodeUrnPathSegment');
  URI.recodePath = generateSegmentedPathFunction('/', 'encodePathSegment', 'decode');
  URI.recodeUrnPath = generateSegmentedPathFunction(':', 'encodeUrnPathSegment', 'decode');

  URI.encodeReserved = generateAccessor('reserved', 'encode');

  URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
      parts = {
        preventInvalidHostname: URI.preventInvalidHostname
      };
    }

    string = string.replace(URI.leading_whitespace_expression, '')
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    string = string.replace(URI.ascii_tab_whitespace, '')

    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
      // escaping?
      parts.fragment = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
      // escaping?
      parts.query = string.substring(pos + 1) || null;
      string = string.substring(0, pos);
    }

    // slashes and backslashes have lost all meaning for the web protocols (https, http, wss, ws)
    string = string.replace(/^(https?|ftp|wss?)?:+[/\\]*/i, '$1://');
    // slashes and backslashes have lost all meaning for scheme relative URLs
    string = string.replace(/^[/\\]{2,}/i, '//');

    // extract protocol
    if (string.substring(0, 2) === '//') {
      // relative-scheme
      parts.protocol = null;
      string = string.substring(2);
      // extract "user:pass@host:port"
      string = URI.parseAuthority(string, parts);
    } else {
      pos = string.indexOf(':');
      if (pos > -1) {
        parts.protocol = string.substring(0, pos) || null;
        if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
          // : may be within the path
          parts.protocol = undefined;
        } else if (string.substring(pos + 1, pos + 3).replace(/\\/g, '/') === '//') {
          string = string.substring(pos + 3);

          // extract "user:pass@host:port"
          string = URI.parseAuthority(string, parts);
        } else {
          string = string.substring(pos + 1);
          parts.urn = true;
        }
      }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
  };
  URI.parseHost = function(string, parts) {
    if (!string) {
      string = '';
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    // https://github.com/medialize/URI.js/pull/233
    string = string.replace(/\\/g, '/');

    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
      pos = string.length;
    }

    if (string.charAt(0) === '[') {
      // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
      // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
      // IPv6+port in the format [2001:db8::1]:80 (for the time being)
      bracketPos = string.indexOf(']');
      parts.hostname = string.substring(1, bracketPos) || null;
      parts.port = string.substring(bracketPos + 2, pos) || null;
      if (parts.port === '/') {
        parts.port = null;
      }
    } else {
      var firstColon = string.indexOf(':');
      var firstSlash = string.indexOf('/');
      var nextColon = string.indexOf(':', firstColon + 1);
      if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
      } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
      }
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
      pos++;
      string = '/' + string;
    }

    if (parts.preventInvalidHostname) {
      URI.ensureValidHostname(parts.hostname, parts.protocol);
    }

    if (parts.port) {
      URI.ensureValidPort(parts.port);
    }

    return string.substring(pos) || '/';
  };
  URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
  };
  URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var _string = string
    var firstBackSlash = string.indexOf('\\');
    if (firstBackSlash !== -1) {
      string = string.replace(/\\/g, '/')
    }
    var firstSlash = string.indexOf('/');
    var pos = string.lastIndexOf('@', firstSlash > -1 ? firstSlash : string.length - 1);
    var t;

    // authority@ must come before /path or \path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
      t = string.substring(0, pos).split(':');
      parts.username = t[0] ? URI.decode(t[0]) : null;
      t.shift();
      parts.password = t[0] ? URI.decode(t.join(':')) : null;
      string = _string.substring(pos + 1);
    } else {
      parts.username = null;
      parts.password = null;
    }

    return string;
  };
  URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
      return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
      return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
      v = splits[i].split('=');
      name = URI.decodeQuery(v.shift(), escapeQuerySpace);
      // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
      value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

      if (name === '__proto__') {
        // ignore attempt at exploiting JavaScript internals
        continue;
      } else if (hasOwn.call(items, name)) {
        if (typeof items[name] === 'string' || items[name] === null) {
          items[name] = [items[name]];
        }

        items[name].push(value);
      } else {
        items[name] = value;
      }
    }

    return items;
  };

  URI.build = function(parts) {
    var t = '';
    var requireAbsolutePath = false

    if (parts.protocol) {
      t += parts.protocol + ':';
    }

    if (!parts.urn && (t || parts.hostname)) {
      t += '//';
      requireAbsolutePath = true
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === 'string') {
      if (parts.path.charAt(0) !== '/' && requireAbsolutePath) {
        t += '/';
      }

      t += parts.path;
    }

    if (typeof parts.query === 'string' && parts.query) {
      t += '?' + parts.query;
    }

    if (typeof parts.fragment === 'string' && parts.fragment) {
      t += '#' + parts.fragment;
    }
    return t;
  };
  URI.buildHost = function(parts) {
    var t = '';

    if (!parts.hostname) {
      return '';
    } else if (URI.ip6_expression.test(parts.hostname)) {
      t += '[' + parts.hostname + ']';
    } else {
      t += parts.hostname;
    }

    if (parts.port) {
      t += ':' + parts.port;
    }

    return t;
  };
  URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
  };
  URI.buildUserinfo = function(parts) {
    var t = '';

    if (parts.username) {
      t += URI.encode(parts.username);
    }

    if (parts.password) {
      t += ':' + URI.encode(parts.password);
    }

    if (t) {
      t += '@';
    }

    return t;
  };
  URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = '';
    var unique, key, i, length;
    for (key in data) {
      if (key === '__proto__') {
        // ignore attempt at exploiting JavaScript internals
        continue;
      } else if (hasOwn.call(data, key)) {
        if (isArray(data[key])) {
          unique = {};
          for (i = 0, length = data[key].length; i < length; i++) {
            if (data[key][i] !== undefined && unique[data[key][i] + ''] === undefined) {
              t += '&' + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
              if (duplicateQueryParameters !== true) {
                unique[data[key][i] + ''] = true;
              }
            }
          }
        } else if (data[key] !== undefined) {
          t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
        }
      }
    }

    return t.substring(1);
  };
  URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? '=' + URI.encodeQuery(value, escapeQuerySpace) : '');
  };

  URI.addQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.addQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (data[name] === undefined) {
        data[name] = value;
        return;
      } else if (typeof data[name] === 'string') {
        data[name] = [data[name]];
      }

      if (!isArray(value)) {
        value = [value];
      }

      data[name] = (data[name] || []).concat(value);
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }
  };

  URI.setQuery = function(data, name, value) {
    if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          URI.setQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      data[name] = value === undefined ? null : value;
    } else {
      throw new TypeError('URI.setQuery() accepts an object, string as the name parameter');
    }
  };

  URI.removeQuery = function(data, name, value) {
    var i, length, key;

    if (isArray(name)) {
      for (i = 0, length = name.length; i < length; i++) {
        data[name[i]] = undefined;
      }
    } else if (getType(name) === 'RegExp') {
      for (key in data) {
        if (name.test(key)) {
          data[key] = undefined;
        }
      }
    } else if (typeof name === 'object') {
      for (key in name) {
        if (hasOwn.call(name, key)) {
          URI.removeQuery(data, key, name[key]);
        }
      }
    } else if (typeof name === 'string') {
      if (value !== undefined) {
        if (getType(value) === 'RegExp') {
          if (!isArray(data[name]) && value.test(data[name])) {
            data[name] = undefined;
          } else {
            data[name] = filterArrayValues(data[name], value);
          }
        } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) {
          data[name] = undefined;
        } else if (isArray(data[name])) {
          data[name] = filterArrayValues(data[name], value);
        }
      } else {
        data[name] = undefined;
      }
    } else {
      throw new TypeError('URI.removeQuery() accepts an object, string, RegExp as the first parameter');
    }
  };
  URI.hasQuery = function(data, name, value, withinArray) {
    switch (getType(name)) {
      case 'String':
        // Nothing to do here
        break;

      case 'RegExp':
        for (var key in data) {
          if (hasOwn.call(data, key)) {
            if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) {
              return true;
            }
          }
        }

        return false;

      case 'Object':
        for (var _key in name) {
          if (hasOwn.call(name, _key)) {
            if (!URI.hasQuery(data, _key, name[_key])) {
              return false;
            }
          }
        }

        return true;

      default:
        throw new TypeError('URI.hasQuery() accepts a string, regular expression or object as the name parameter');
    }

    switch (getType(value)) {
      case 'Undefined':
        // true if exists (but may be empty)
        return name in data; // data[name] !== undefined;

      case 'Boolean':
        // true if exists and non-empty
        var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
        return value === _booly;

      case 'Function':
        // allow complex comparison
        return !!value(data[name], name, data);

      case 'Array':
        if (!isArray(data[name])) {
          return false;
        }

        var op = withinArray ? arrayContains : arraysEqual;
        return op(data[name], value);

      case 'RegExp':
        if (!isArray(data[name])) {
          return Boolean(data[name] && data[name].match(value));
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      case 'Number':
        value = String(value);
        /* falls through */
      case 'String':
        if (!isArray(data[name])) {
          return data[name] === value;
        }

        if (!withinArray) {
          return false;
        }

        return arrayContains(data[name], value);

      default:
        throw new TypeError('URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter');
    }
  };


  URI.joinPaths = function() {
    var input = [];
    var segments = [];
    var nonEmptySegments = 0;

    for (var i = 0; i < arguments.length; i++) {
      var url = new URI(arguments[i]);
      input.push(url);
      var _segments = url.segment();
      for (var s = 0; s < _segments.length; s++) {
        if (typeof _segments[s] === 'string') {
          segments.push(_segments[s]);
        }

        if (_segments[s]) {
          nonEmptySegments++;
        }
      }
    }

    if (!segments.length || !nonEmptySegments) {
      return new URI('');
    }

    var uri = new URI('').segment(segments);

    if (input[0].path() === '' || input[0].path().slice(0, 1) === '/') {
      uri.path('/' + uri.path());
    }

    return uri.normalize();
  };

  URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
      if (one.charAt(pos) !== two.charAt(pos)) {
        pos--;
        break;
      }
    }

    if (pos < 1) {
      return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }

    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
      pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
  };

  URI.withinString = function(string, callback, options) {
    options || (options = {});
    var _start = options.start || URI.findUri.start;
    var _end = options.end || URI.findUri.end;
    var _trim = options.trim || URI.findUri.trim;
    var _parens = options.parens || URI.findUri.parens;
    var _attributeOpen = /[a-z0-9-]=["']?$/i;

    _start.lastIndex = 0;
    while (true) {
      var match = _start.exec(string);
      if (!match) {
        break;
      }

      var start = match.index;
      if (options.ignoreHtml) {
        // attribut(e=["']?$)
        var attributeOpen = string.slice(Math.max(start - 3, 0), start);
        if (attributeOpen && _attributeOpen.test(attributeOpen)) {
          continue;
        }
      }

      var end = start + string.slice(start).search(_end);
      var slice = string.slice(start, end);
      // make sure we include well balanced parens
      var parensEnd = -1;
      while (true) {
        var parensMatch = _parens.exec(slice);
        if (!parensMatch) {
          break;
        }

        var parensMatchEnd = parensMatch.index + parensMatch[0].length;
        parensEnd = Math.max(parensEnd, parensMatchEnd);
      }

      if (parensEnd > -1) {
        slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, '');
      } else {
        slice = slice.replace(_trim, '');
      }

      if (slice.length <= match[0].length) {
        // the extract only contains the starting marker of a URI,
        // e.g. "www" or "http://"
        continue;
      }

      if (options.ignore && options.ignore.test(slice)) {
        continue;
      }

      end = start + slice.length;
      var result = callback(slice, start, end, string);
      if (result === undefined) {
        _start.lastIndex = end;
        continue;
      }

      result = String(result);
      string = string.slice(0, start) + result + string.slice(end);
      _start.lastIndex = start + result.length;
    }

    _start.lastIndex = 0;
    return string;
  };

  URI.ensureValidHostname = function(v, protocol) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    var hasHostname = !!v; // not null and not an empty string
    var hasProtocol = !!protocol;
    var rejectEmptyHostname = false;

    if (hasProtocol) {
      rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
    }

    if (rejectEmptyHostname && !hasHostname) {
      throw new TypeError('Hostname cannot be empty, if protocol is ' + protocol);
    } else if (v && v.match(URI.invalid_hostname_characters)) {
      // test punycode
      if (!punycode) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
      }
      if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
      }
    }
  };

  URI.ensureValidPort = function (v) {
    if (!v) {
      return;
    }

    var port = Number(v);
    if (isInteger(port) && (port > 0) && (port < 65536)) {
      return;
    }

    throw new TypeError('Port "' + v + '" is not a valid port');
  };

  // noConflict
  URI.noConflict = function(removeAll) {
    if (removeAll) {
      var unconflicted = {
        URI: this.noConflict()
      };

      if (root.URITemplate && typeof root.URITemplate.noConflict === 'function') {
        unconflicted.URITemplate = root.URITemplate.noConflict();
      }

      if (root.IPv6 && typeof root.IPv6.noConflict === 'function') {
        unconflicted.IPv6 = root.IPv6.noConflict();
      }

      if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === 'function') {
        unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
      }

      return unconflicted;
    } else if (root.URI === this) {
      root.URI = _URI;
    }

    return this;
  };

  p.build = function(deferBuild) {
    if (deferBuild === true) {
      this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
      this._string = URI.build(this._parts);
      this._deferred_build = false;
    }

    return this;
  };

  p.clone = function() {
    return new URI(this);
  };

  p.valueOf = p.toString = function() {
    return this.build(false)._string;
  };


  function generateSimpleAccessor(_part){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        this._parts[_part] = v || null;
        this.build(!build);
        return this;
      }
    };
  }

  function generatePrefixAccessor(_part, _key){
    return function(v, build) {
      if (v === undefined) {
        return this._parts[_part] || '';
      } else {
        if (v !== null) {
          v = v + '';
          if (v.charAt(0) === _key) {
            v = v.substring(1);
          }
        }

        this._parts[_part] = v;
        this.build(!build);
        return this;
      }
    };
  }

  p.protocol = generateSimpleAccessor('protocol');
  p.username = generateSimpleAccessor('username');
  p.password = generateSimpleAccessor('password');
  p.hostname = generateSimpleAccessor('hostname');
  p.port = generateSimpleAccessor('port');
  p.query = generatePrefixAccessor('query', '?');
  p.fragment = generatePrefixAccessor('fragment', '#');

  p.search = function(v, build) {
    var t = this.query(v, build);
    return typeof t === 'string' && t.length ? ('?' + t) : t;
  };
  p.hash = function(v, build) {
    var t = this.fragment(v, build);
    return typeof t === 'string' && t.length ? ('#' + t) : t;
  };

  p.pathname = function(v, build) {
    if (v === undefined || v === true) {
      var res = this._parts.path || (this._parts.hostname ? '/' : '');
      return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
    } else {
      if (this._parts.urn) {
        this._parts.path = v ? URI.recodeUrnPath(v) : '';
      } else {
        this._parts.path = v ? URI.recodePath(v) : '/';
      }
      this.build(!build);
      return this;
    }
  };
  p.path = p.pathname;
  p.href = function(href, build) {
    var key;

    if (href === undefined) {
      return this.toString();
    }

    this._string = '';
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === 'object' && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
      var attribute = URI.getDomAttribute(href);
      href = href[attribute] || '';
      _object = false;
    }

    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for:
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
      href = href.toString();
    }

    if (typeof href === 'string' || href instanceof String) {
      this._parts = URI.parse(String(href), this._parts);
    } else if (_URI || _object) {
      var src = _URI ? href._parts : href;
      for (key in src) {
        if (key === 'query') { continue; }
        if (hasOwn.call(this._parts, key)) {
          this._parts[key] = src[key];
        }
      }
      if (src.query) {
        this.query(src.query, false);
      }
    } else {
      throw new TypeError('invalid input');
    }

    this.build(!build);
    return this;
  };

  // identification accessors
  p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
      relative = false;
      ip4 = URI.ip4_expression.test(this._parts.hostname);
      ip6 = URI.ip6_expression.test(this._parts.hostname);
      ip = ip4 || ip6;
      name = !ip;
      sld = name && SLD && SLD.has(this._parts.hostname);
      idn = name && URI.idn_expression.test(this._parts.hostname);
      punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
      case 'relative':
        return relative;

      case 'absolute':
        return !relative;

      // hostname identification
      case 'domain':
      case 'name':
        return name;

      case 'sld':
        return sld;

      case 'ip':
        return ip;

      case 'ip4':
      case 'ipv4':
      case 'inet4':
        return ip4;

      case 'ip6':
      case 'ipv6':
      case 'inet6':
        return ip6;

      case 'idn':
        return idn;

      case 'url':
        return !this._parts.urn;

      case 'urn':
        return !!this._parts.urn;

      case 'punycode':
        return punycode;
    }

    return null;
  };

  // component specific input validation
  var _protocol = p.protocol;
  var _port = p.port;
  var _hostname = p.hostname;

  p.protocol = function(v, build) {
    if (v) {
      // accept trailing ://
      v = v.replace(/:(\/\/)?$/, '');

      if (!v.match(URI.protocol_expression)) {
        throw new TypeError('Protocol "' + v + '" contains characters other than [A-Z0-9.+-] or doesn\'t start with [A-Z]');
      }
    }

    return _protocol.call(this, v, build);
  };
  p.scheme = p.protocol;
  p.port = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      if (v === 0) {
        v = null;
      }

      if (v) {
        v += '';
        if (v.charAt(0) === ':') {
          v = v.substring(1);
        }

        URI.ensureValidPort(v);
      }
    }
    return _port.call(this, v, build);
  };
  p.hostname = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v !== undefined) {
      var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
      var res = URI.parseHost(v, x);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      v = x.hostname;
      if (this._parts.preventInvalidHostname) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }
    }

    return _hostname.call(this, v, build);
  };

  // compound accessors
  p.origin = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var protocol = this.protocol();
      var authority = this.authority();
      if (!authority) {
        return '';
      }

      return (protocol ? protocol + '://' : '') + this.authority();
    } else {
      var origin = URI(v);
      this
        .protocol(origin.protocol())
        .authority(origin.authority())
        .build(!build);
      return this;
    }
  };
  p.host = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildHost(this._parts) : '';
    } else {
      var res = URI.parseHost(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.authority = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      return this._parts.hostname ? URI.buildAuthority(this._parts) : '';
    } else {
      var res = URI.parseAuthority(v, this._parts);
      if (res !== '/') {
        throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
      }

      this.build(!build);
      return this;
    }
  };
  p.userinfo = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined) {
      var t = URI.buildUserinfo(this._parts);
      return t ? t.substring(0, t.length -1) : t;
    } else {
      if (v[v.length-1] !== '@') {
        v += '@';
      }

      URI.parseUserinfo(v, this._parts);
      this.build(!build);
      return this;
    }
  };
  p.resource = function(v, build) {
    var parts;

    if (v === undefined) {
      return this.path() + this.search() + this.hash();
    }

    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
  };

  // fraction accessors
  p.subdomain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // grab domain and add another segment
      var end = this._parts.hostname.length - this.domain().length - 1;
      return this._parts.hostname.substring(0, end) || '';
    } else {
      var e = this._parts.hostname.length - this.domain().length;
      var sub = this._parts.hostname.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(sub));

      if (v && v.charAt(v.length - 1) !== '.') {
        v += '.';
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      if (v) {
        URI.ensureValidHostname(v, this._parts.protocol);
      }

      this._parts.hostname = this._parts.hostname.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.domain = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      // if hostname consists of 1 or 2 segments, it must be the domain
      var t = this._parts.hostname.match(/\./g);
      if (t && t.length < 2) {
        return this._parts.hostname;
      }

      // grab tld and add another segment
      var end = this._parts.hostname.length - this.tld(build).length - 1;
      end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
      return this._parts.hostname.substring(end) || '';
    } else {
      if (!v) {
        throw new TypeError('cannot set domain empty');
      }

      if (v.indexOf(':') !== -1) {
        throw new TypeError('Domains cannot contain colons');
      }

      URI.ensureValidHostname(v, this._parts.protocol);

      if (!this._parts.hostname || this.is('IP')) {
        this._parts.hostname = v;
      } else {
        var replace = new RegExp(escapeRegEx(this.domain()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.tld = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
      build = v;
      v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
      if (!this._parts.hostname || this.is('IP')) {
        return '';
      }

      var pos = this._parts.hostname.lastIndexOf('.');
      var tld = this._parts.hostname.substring(pos + 1);

      if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
        return SLD.get(this._parts.hostname) || tld;
      }

      return tld;
    } else {
      var replace;

      if (!v) {
        throw new TypeError('cannot set TLD empty');
      } else if (v.match(/[^a-zA-Z0-9-]/)) {
        if (SLD && SLD.is(v)) {
          replace = new RegExp(escapeRegEx(this.tld()) + '$');
          this._parts.hostname = this._parts.hostname.replace(replace, v);
        } else {
          throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
        }
      } else if (!this._parts.hostname || this.is('IP')) {
        throw new ReferenceError('cannot set TLD on non-domain host');
      } else {
        replace = new RegExp(escapeRegEx(this.tld()) + '$');
        this._parts.hostname = this._parts.hostname.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.directory = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path && !this._parts.hostname) {
        return '';
      }

      if (this._parts.path === '/') {
        return '/';
      }

      var end = this._parts.path.length - this.filename().length - 1;
      var res = this._parts.path.substring(0, end) || (this._parts.hostname ? '/' : '');

      return v ? URI.decodePath(res) : res;

    } else {
      var e = this._parts.path.length - this.filename().length;
      var directory = this._parts.path.substring(0, e);
      var replace = new RegExp('^' + escapeRegEx(directory));

      // fully qualifier directories begin with a slash
      if (!this.is('relative')) {
        if (!v) {
          v = '/';
        }

        if (v.charAt(0) !== '/') {
          v = '/' + v;
        }
      }

      // directories always end with a slash
      if (v && v.charAt(v.length - 1) !== '/') {
        v += '/';
      }

      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);
      this.build(!build);
      return this;
    }
  };
  p.filename = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (typeof v !== 'string') {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var pos = this._parts.path.lastIndexOf('/');
      var res = this._parts.path.substring(pos+1);

      return v ? URI.decodePathSegment(res) : res;
    } else {
      var mutatedDirectory = false;

      if (v.charAt(0) === '/') {
        v = v.substring(1);
      }

      if (v.match(/\.?\//)) {
        mutatedDirectory = true;
      }

      var replace = new RegExp(escapeRegEx(this.filename()) + '$');
      v = URI.recodePath(v);
      this._parts.path = this._parts.path.replace(replace, v);

      if (mutatedDirectory) {
        this.normalizePath(build);
      } else {
        this.build(!build);
      }

      return this;
    }
  };
  p.suffix = function(v, build) {
    if (this._parts.urn) {
      return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
      if (!this._parts.path || this._parts.path === '/') {
        return '';
      }

      var filename = this.filename();
      var pos = filename.lastIndexOf('.');
      var s, res;

      if (pos === -1) {
        return '';
      }

      // suffix may only contain alnum characters (yup, I made this up.)
      s = filename.substring(pos+1);
      res = (/^[a-z0-9%]+$/i).test(s) ? s : '';
      return v ? URI.decodePathSegment(res) : res;
    } else {
      if (v.charAt(0) === '.') {
        v = v.substring(1);
      }

      var suffix = this.suffix();
      var replace;

      if (!suffix) {
        if (!v) {
          return this;
        }

        this._parts.path += '.' + URI.recodePath(v);
      } else if (!v) {
        replace = new RegExp(escapeRegEx('.' + suffix) + '$');
      } else {
        replace = new RegExp(escapeRegEx(suffix) + '$');
      }

      if (replace) {
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
      }

      this.build(!build);
      return this;
    }
  };
  p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
      throw new Error('Bad segment "' + segment + '", must be 0-based integer');
    }

    if (absolute) {
      segments.shift();
    }

    if (segment < 0) {
      // allow negative indexes to address from the end
      segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
      /*jshint laxbreak: true */
      return segment === undefined
        ? segments
        : segments[segment];
      /*jshint laxbreak: false */
    } else if (segment === null || segments[segment] === undefined) {
      if (isArray(v)) {
        segments = [];
        // collapse empty elements within array
        for (var i=0, l=v.length; i < l; i++) {
          if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
            continue;
          }

          if (segments.length && !segments[segments.length -1].length) {
            segments.pop();
          }

          segments.push(trimSlashes(v[i]));
        }
      } else if (v || typeof v === 'string') {
        v = trimSlashes(v);
        if (segments[segments.length -1] === '') {
          // empty trailing elements have to be overwritten
          // to prevent results such as /foo//bar
          segments[segments.length -1] = v;
        } else {
          segments.push(v);
        }
      }
    } else {
      if (v) {
        segments[segment] = trimSlashes(v);
      } else {
        segments.splice(segment, 1);
      }
    }

    if (absolute) {
      segments.unshift('');
    }

    return this.path(segments.join(separator), build);
  };
  p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
      build = v;
      v = segment;
      segment = undefined;
    }

    if (v === undefined) {
      segments = this.segment(segment, v, build);
      if (!isArray(segments)) {
        segments = segments !== undefined ? URI.decode(segments) : undefined;
      } else {
        for (i = 0, l = segments.length; i < l; i++) {
          segments[i] = URI.decode(segments[i]);
        }
      }

      return segments;
    }

    if (!isArray(v)) {
      v = (typeof v === 'string' || v instanceof String) ? URI.encode(v) : v;
    } else {
      for (i = 0, l = v.length; i < l; i++) {
        v[i] = URI.encode(v[i]);
      }
    }

    return this.segment(segment, v, build);
  };

  // mutating query string
  var q = p.query;
  p.query = function(v, build) {
    if (v === true) {
      return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === 'function') {
      var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
      var result = v.call(this, data);
      this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else if (v !== undefined && typeof v !== 'string') {
      this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
      this.build(!build);
      return this;
    } else {
      return q.call(this, v, build);
    }
  };
  p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);

    if (typeof name === 'string' || name instanceof String) {
      data[name] = value !== undefined ? value : null;
    } else if (typeof name === 'object') {
      for (var key in name) {
        if (hasOwn.call(name, key)) {
          data[key] = name[key];
        }
      }
    } else {
      throw new TypeError('URI.addQuery() accepts an object, string as the name parameter');
    }

    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== 'string') {
      build = value;
    }

    this.build(!build);
    return this;
  };
  p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
  };
  p.setSearch = p.setQuery;
  p.addSearch = p.addQuery;
  p.removeSearch = p.removeQuery;
  p.hasSearch = p.hasQuery;

  // sanitizing URLs
  p.normalize = function() {
    if (this._parts.urn) {
      return this
        .normalizeProtocol(false)
        .normalizePath(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
    }

    return this
      .normalizeProtocol(false)
      .normalizeHostname(false)
      .normalizePort(false)
      .normalizePath(false)
      .normalizeQuery(false)
      .normalizeFragment(false)
      .build();
  };
  p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === 'string') {
      this._parts.protocol = this._parts.protocol.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
      if (this.is('IDN') && punycode) {
        this._parts.hostname = punycode.toASCII(this._parts.hostname);
      } else if (this.is('IPv6') && IPv6) {
        this._parts.hostname = IPv6.best(this._parts.hostname);
      }

      this._parts.hostname = this._parts.hostname.toLowerCase();
      this.build(!build);
    }

    return this;
  };
  p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === 'string' && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
      this._parts.port = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizePath = function(build) {
    var _path = this._parts.path;
    if (!_path) {
      return this;
    }

    if (this._parts.urn) {
      this._parts.path = URI.recodeUrnPath(this._parts.path);
      this.build(!build);
      return this;
    }

    if (this._parts.path === '/') {
      return this;
    }

    _path = URI.recodePath(_path);

    var _was_relative;
    var _leadingParents = '';
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
      _was_relative = true;
      _path = '/' + _path;
    }

    // handle relative files (as opposed to directories)
    if (_path.slice(-3) === '/..' || _path.slice(-2) === '/.') {
      _path += '/';
    }

    // resolve simples
    _path = _path
      .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
      .replace(/\/{2,}/g, '/');

    // remember leading parents
    if (_was_relative) {
      _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || '';
      if (_leadingParents) {
        _leadingParents = _leadingParents[0];
      }
    }

    // resolve parents
    while (true) {
      _parent = _path.search(/\/\.\.(\/|$)/);
      if (_parent === -1) {
        // no more ../ to resolve
        break;
      } else if (_parent === 0) {
        // top level cannot be relative, skip it
        _path = _path.substring(3);
        continue;
      }

      _pos = _path.substring(0, _parent).lastIndexOf('/');
      if (_pos === -1) {
        _pos = _parent;
      }
      _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
      _path = _leadingParents + _path.substring(1);
    }

    this._parts.path = _path;
    this.build(!build);
    return this;
  };
  p.normalizePathname = p.normalizePath;
  p.normalizeQuery = function(build) {
    if (typeof this._parts.query === 'string') {
      if (!this._parts.query.length) {
        this._parts.query = null;
      } else {
        this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
      }

      this.build(!build);
    }

    return this;
  };
  p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
      this._parts.fragment = null;
      this.build(!build);
    }

    return this;
  };
  p.normalizeSearch = p.normalizeQuery;
  p.normalizeHash = p.normalizeFragment;

  p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    try {
      this.normalize();
    } finally {
      URI.encode = e;
      URI.decode = d;
    }
    return this;
  };

  p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username('').password('').normalize();
    var t = '';
    if (uri._parts.protocol) {
      t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
      if (uri.is('punycode') && punycode) {
        t += punycode.toUnicode(uri._parts.hostname);
        if (uri._parts.port) {
          t += ':' + uri._parts.port;
        }
      } else {
        t += uri.host();
      }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
      t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
      var q = '';
      for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
        var kv = (qp[i] || '').split('=');
        q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
          .replace(/&/g, '%26');

        if (kv[1] !== undefined) {
          q += '=' + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
            .replace(/&/g, '%26');
        }
      }
      t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
  };

  // resolving relative and absolute URLs
  p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
      base = new URI(base);
    }

    if (resolved._parts.protocol) {
      // Directly returns even if this._parts.hostname is empty.
      return resolved;
    } else {
      resolved._parts.protocol = base._parts.protocol;
    }

    if (this._parts.hostname) {
      return resolved;
    }

    for (i = 0; (p = properties[i]); i++) {
      resolved._parts[p] = base._parts[p];
    }

    if (!resolved._parts.path) {
      resolved._parts.path = base._parts.path;
      if (!resolved._parts.query) {
        resolved._parts.query = base._parts.query;
      }
    } else {
      if (resolved._parts.path.substring(-2) === '..') {
        resolved._parts.path += '/';
      }

      if (resolved.path().charAt(0) !== '/') {
        basedir = base.directory();
        basedir = basedir ? basedir : base.path().indexOf('/') === 0 ? '/' : '';
        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
        resolved.normalizePath();
      }
    }

    resolved.build();
    return resolved;
  };
  p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
      throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
      throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
      throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
      relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
      return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
      return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
      relativeParts.hostname = null;
      relativeParts.port = null;
    } else {
      return relative.build();
    }

    if (relativePath === basePath) {
      relativeParts.path = '';
      return relative.build();
    }

    // determine common sub path
    common = URI.commonPath(relativePath, basePath);

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
      return relative.build();
    }

    var parents = baseParts.path
      .substring(common.length)
      .replace(/[^\/]*$/, '')
      .replace(/.*?\//g, '../');

    relativeParts.path = (parents + relativeParts.path.substring(common.length)) || './';

    return relative.build();
  };

  // comparing URIs
  p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
      return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query('');
    two.query('');

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
      return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
      return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
      if (hasOwn.call(one_map, key)) {
        if (!isArray(one_map[key])) {
          if (one_map[key] !== two_map[key]) {
            return false;
          }
        } else if (!arraysEqual(one_map[key], two_map[key])) {
          return false;
        }

        checked[key] = true;
      }
    }

    for (key in two_map) {
      if (hasOwn.call(two_map, key)) {
        if (!checked[key]) {
          // two contains a parameter not present in one
          return false;
        }
      }
    }

    return true;
  };

  // state
  p.preventInvalidHostname = function(v) {
    this._parts.preventInvalidHostname = !!v;
    return this;
  };

  p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
  };

  p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
  };

  return URI;
}));

},{"./IPv6":429,"./SecondLevelDomains":430,"./punycode":433}],432:[function(require,module,exports){
/*!
 * URI.js - Mutating URLs
 * URI Template Support - http://tools.ietf.org/html/rfc6570
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */
(function (root, factory) {
  'use strict';
  // https://github.com/umdjs/umd/blob/master/returnExports.js
  if (typeof module === 'object' && module.exports) {
    // Node
    module.exports = factory(require('./URI'));
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['./URI'], factory);
  } else {
    // Browser globals (root is window)
    root.URITemplate = factory(root.URI, root);
  }
}(this, function (URI, root) {
  'use strict';
  // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
  /*jshint camelcase: false */

  // save current URITemplate variable, if any
  var _URITemplate = root && root.URITemplate;

  var hasOwn = Object.prototype.hasOwnProperty;
  function URITemplate(expression) {
    // serve from cache where possible
    if (URITemplate._cache[expression]) {
      return URITemplate._cache[expression];
    }

    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URITemplate)) {
      return new URITemplate(expression);
    }

    this.expression = expression;
    URITemplate._cache[expression] = this;
    return this;
  }

  function Data(data) {
    this.data = data;
    this.cache = {};
  }

  var p = URITemplate.prototype;
  // list of operators and their defined options
  var operators = {
    // Simple string expansion
    '' : {
      prefix: '',
      separator: ',',
      named: false,
      empty_name_separator: false,
      encode : 'encode'
    },
    // Reserved character strings
    '+' : {
      prefix: '',
      separator: ',',
      named: false,
      empty_name_separator: false,
      encode : 'encodeReserved'
    },
    // Fragment identifiers prefixed by '#'
    '#' : {
      prefix: '#',
      separator: ',',
      named: false,
      empty_name_separator: false,
      encode : 'encodeReserved'
    },
    // Name labels or extensions prefixed by '.'
    '.' : {
      prefix: '.',
      separator: '.',
      named: false,
      empty_name_separator: false,
      encode : 'encode'
    },
    // Path segments prefixed by '/'
    '/' : {
      prefix: '/',
      separator: '/',
      named: false,
      empty_name_separator: false,
      encode : 'encode'
    },
    // Path parameter name or name=value pairs prefixed by ';'
    ';' : {
      prefix: ';',
      separator: ';',
      named: true,
      empty_name_separator: false,
      encode : 'encode'
    },
    // Query component beginning with '?' and consisting
    // of name=value pairs separated by '&'; an
    '?' : {
      prefix: '?',
      separator: '&',
      named: true,
      empty_name_separator: true,
      encode : 'encode'
    },
    // Continuation of query-style &name=value pairs
    // within a literal query component.
    '&' : {
      prefix: '&',
      separator: '&',
      named: true,
      empty_name_separator: true,
      encode : 'encode'
    }

    // The operator characters equals ("="), comma (","), exclamation ("!"),
    // at sign ("@"), and pipe ("|") are reserved for future extensions.
  };

  // storage for already parsed templates
  URITemplate._cache = {};
  // pattern to identify expressions [operator, variable-list] in template
  URITemplate.EXPRESSION_PATTERN = /\{([^a-zA-Z0-9%_]?)([^\}]+)(\}|$)/g;
  // pattern to identify variables [name, explode, maxlength] in variable-list
  URITemplate.VARIABLE_PATTERN = /^([^*:.](?:\.?[^*:.])*)((\*)|:(\d+))?$/;
  // pattern to verify variable name integrity
  URITemplate.VARIABLE_NAME_PATTERN = /[^a-zA-Z0-9%_.]/;
  // pattern to verify literal integrity
  URITemplate.LITERAL_PATTERN = /[<>{}"`^| \\]/;

  // expand parsed expression (expression, not template!)
  URITemplate.expand = function(expression, data, opts) {
    // container for defined options for the given operator
    var options = operators[expression.operator];
    // expansion type (include keys or not)
    var type = options.named ? 'Named' : 'Unnamed';
    // list of variables within the expression
    var variables = expression.variables;
    // result buffer for evaluating the expression
    var buffer = [];
    var d, variable, i;

    for (i = 0; (variable = variables[i]); i++) {
      // fetch simplified data source
      d = data.get(variable.name);
      if (d.type === 0 && opts && opts.strict) {
          throw new Error('Missing expansion value for variable "' + variable.name + '"');
      }
      if (!d.val.length) {
        if (d.type) {
          // empty variables (empty string)
          // still lead to a separator being appended!
          buffer.push('');
        }
        // no data, no action
        continue;
      }

      if (d.type > 1 && variable.maxlength) {
        // composite variable cannot specify maxlength
        throw new Error('Invalid expression: Prefix modifier not applicable to variable "' + variable.name + '"');
      }

      // expand the given variable
      buffer.push(URITemplate['expand' + type](
        d,
        options,
        variable.explode,
        variable.explode && options.separator || ',',
        variable.maxlength,
        variable.name
      ));
    }

    if (buffer.length) {
      return options.prefix + buffer.join(options.separator);
    } else {
      // prefix is not prepended for empty expressions
      return '';
    }
  };
  // expand a named variable
  URITemplate.expandNamed = function(d, options, explode, separator, length, name) {
    // variable result buffer
    var result = '';
    // peformance crap
    var encode = options.encode;
    var empty_name_separator = options.empty_name_separator;
    // flag noting if values are already encoded
    var _encode = !d[encode].length;
    // key for named expansion
    var _name = d.type === 2 ? '': URI[encode](name);
    var _value, i, l;

    // for each found value
    for (i = 0, l = d.val.length; i < l; i++) {
      if (length) {
        // maxlength must be determined before encoding can happen
        _value = URI[encode](d.val[i][1].substring(0, length));
        if (d.type === 2) {
          // apply maxlength to keys of objects as well
          _name = URI[encode](d.val[i][0].substring(0, length));
        }
      } else if (_encode) {
        // encode value
        _value = URI[encode](d.val[i][1]);
        if (d.type === 2) {
          // encode name and cache encoded value
          _name = URI[encode](d.val[i][0]);
          d[encode].push([_name, _value]);
        } else {
          // cache encoded value
          d[encode].push([undefined, _value]);
        }
      } else {
        // values are already encoded and can be pulled from cache
        _value = d[encode][i][1];
        if (d.type === 2) {
          _name = d[encode][i][0];
        }
      }

      if (result) {
        // unless we're the first value, prepend the separator
        result += separator;
      }

      if (!explode) {
        if (!i) {
          // first element, so prepend variable name
          result += URI[encode](name) + (empty_name_separator || _value ? '=' : '');
        }

        if (d.type === 2) {
          // without explode-modifier, keys of objects are returned comma-separated
          result += _name + ',';
        }

        result += _value;
      } else {
        // only add the = if it is either default (?&) or there actually is a value (;)
        result += _name + (empty_name_separator || _value ? '=' : '') + _value;
      }
    }

    return result;
  };
  // expand an unnamed variable
  URITemplate.expandUnnamed = function(d, options, explode, separator, length) {
    // variable result buffer
    var result = '';
    // performance crap
    var encode = options.encode;
    var empty_name_separator = options.empty_name_separator;
    // flag noting if values are already encoded
    var _encode = !d[encode].length;
    var _name, _value, i, l;

    // for each found value
    for (i = 0, l = d.val.length; i < l; i++) {
      if (length) {
        // maxlength must be determined before encoding can happen
        _value = URI[encode](d.val[i][1].substring(0, length));
      } else if (_encode) {
        // encode and cache value
        _value = URI[encode](d.val[i][1]);
        d[encode].push([
          d.type === 2 ? URI[encode](d.val[i][0]) : undefined,
          _value
        ]);
      } else {
        // value already encoded, pull from cache
        _value = d[encode][i][1];
      }

      if (result) {
        // unless we're the first value, prepend the separator
        result += separator;
      }

      if (d.type === 2) {
        if (length) {
          // maxlength also applies to keys of objects
          _name = URI[encode](d.val[i][0].substring(0, length));
        } else {
          // at this point the name must already be encoded
          _name = d[encode][i][0];
        }

        result += _name;
        if (explode) {
          // explode-modifier separates name and value by "="
          result += (empty_name_separator || _value ? '=' : '');
        } else {
          // no explode-modifier separates name and value by ","
          result += ',';
        }
      }

      result += _value;
    }

    return result;
  };

  URITemplate.noConflict = function() {
    if (root.URITemplate === URITemplate) {
      root.URITemplate = _URITemplate;
    }

    return URITemplate;
  };

  // expand template through given data map
  p.expand = function(data, opts) {
    var result = '';

    if (!this.parts || !this.parts.length) {
      // lazilyy parse the template
      this.parse();
    }

    if (!(data instanceof Data)) {
      // make given data available through the
      // optimized data handling thingie
      data = new Data(data);
    }

    for (var i = 0, l = this.parts.length; i < l; i++) {
      /*jshint laxbreak: true */
      result += typeof this.parts[i] === 'string'
        // literal string
        ? this.parts[i]
        // expression
        : URITemplate.expand(this.parts[i], data, opts);
      /*jshint laxbreak: false */
    }

    return result;
  };
  // parse template into action tokens
  p.parse = function() {
    // performance crap
    var expression = this.expression;
    var ePattern = URITemplate.EXPRESSION_PATTERN;
    var vPattern = URITemplate.VARIABLE_PATTERN;
    var nPattern = URITemplate.VARIABLE_NAME_PATTERN;
    var lPattern = URITemplate.LITERAL_PATTERN;
    // token result buffer
    var parts = [];
      // position within source template
    var pos = 0;
    var variables, eMatch, vMatch;

    var checkLiteral = function(literal) {
      if (literal.match(lPattern)) {
        throw new Error('Invalid Literal "' + literal + '"');
      }
      return literal;
    };

    // RegExp is shared accross all templates,
    // which requires a manual reset
    ePattern.lastIndex = 0;
    // I don't like while(foo = bar()) loops,
    // to make things simpler I go while(true) and break when required
    while (true) {
      eMatch = ePattern.exec(expression);
      if (eMatch === null) {
        // push trailing literal
        parts.push(checkLiteral(expression.substring(pos)));
        break;
      } else {
        // push leading literal
        parts.push(checkLiteral(expression.substring(pos, eMatch.index)));
        pos = eMatch.index + eMatch[0].length;
      }

      if (!operators[eMatch[1]]) {
        throw new Error('Unknown Operator "' + eMatch[1]  + '" in "' + eMatch[0] + '"');
      } else if (!eMatch[3]) {
        throw new Error('Unclosed Expression "' + eMatch[0]  + '"');
      }

      // parse variable-list
      variables = eMatch[2].split(',');
      for (var i = 0, l = variables.length; i < l; i++) {
        vMatch = variables[i].match(vPattern);
        if (vMatch === null) {
          throw new Error('Invalid Variable "' + variables[i] + '" in "' + eMatch[0] + '"');
        } else if (vMatch[1].match(nPattern)) {
          throw new Error('Invalid Variable Name "' + vMatch[1] + '" in "' + eMatch[0] + '"');
        }

        variables[i] = {
          name: vMatch[1],
          explode: !!vMatch[3],
          maxlength: vMatch[4] && parseInt(vMatch[4], 10)
        };
      }

      if (!variables.length) {
        throw new Error('Expression Missing Variable(s) "' + eMatch[0] + '"');
      }

      parts.push({
        expression: eMatch[0],
        operator: eMatch[1],
        variables: variables
      });
    }

    if (!parts.length) {
      // template doesn't contain any expressions
      // so it is a simple literal string
      // this probably should fire a warning or something?
      parts.push(checkLiteral(expression));
    }

    this.parts = parts;
    return this;
  };

  // simplify data structures
  Data.prototype.get = function(key) {
    // performance crap
    var data = this.data;
    // cache for processed data-point
    var d = {
      // type of data 0: undefined/null, 1: string, 2: object, 3: array
      type: 0,
      // original values (except undefined/null)
      val: [],
      // cache for encoded values (only for non-maxlength expansion)
      encode: [],
      encodeReserved: []
    };
    var i, l, value;

    if (this.cache[key] !== undefined) {
      // we've already processed this key
      return this.cache[key];
    }

    this.cache[key] = d;

    if (String(Object.prototype.toString.call(data)) === '[object Function]') {
      // data itself is a callback (global callback)
      value = data(key);
    } else if (String(Object.prototype.toString.call(data[key])) === '[object Function]') {
      // data is a map of callbacks (local callback)
      value = data[key](key);
    } else {
      // data is a map of data
      value = data[key];
    }

    // generalize input into [ [name1, value1], [name2, value2], … ]
    // so expansion has to deal with a single data structure only
    if (value === undefined || value === null) {
      // undefined and null values are to be ignored completely
      return d;
    } else if (String(Object.prototype.toString.call(value)) === '[object Array]') {
      for (i = 0, l = value.length; i < l; i++) {
        if (value[i] !== undefined && value[i] !== null) {
          // arrays don't have names
          d.val.push([undefined, String(value[i])]);
        }
      }

      if (d.val.length) {
        // only treat non-empty arrays as arrays
        d.type = 3; // array
      }
    } else if (String(Object.prototype.toString.call(value)) === '[object Object]') {
      for (i in value) {
        if (hasOwn.call(value, i) && value[i] !== undefined && value[i] !== null) {
          // objects have keys, remember them for named expansion
          d.val.push([i, String(value[i])]);
        }
      }

      if (d.val.length) {
        // only treat non-empty objects as objects
        d.type = 2; // object
      }
    } else {
      d.type = 1; // primitive string (could've been string, number, boolean and objects with a toString())
      // arrays don't have names
      d.val.push([undefined, String(value)]);
    }

    return d;
  };

  // hook into URI for fluid access
  URI.expand = function(expression, data) {
    var template = new URITemplate(expression);
    var expansion = template.expand(data);

    return new URI(expansion);
  };

  return URITemplate;
}));

},{"./URI":431}],433:[function(require,module,exports){
(function (global){(function (){
/*! https://mths.be/punycode v1.4.0 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],434:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return !isNaN(Date.parse(str));
};

},{}]},{},[39])(39)
});
